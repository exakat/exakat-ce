.. _Rules:

Rules
====================

Introduction
------------------------

Exakat provides unique 653 rules to detect BUGS, CODE SMELLS, SECURITY OR QUALITY ISSUES in your PHP code.

Each rule is documented with code example to allow you to remediate your code. If you want to automate remediation, ours cobblers can are there to fix the issues in your code for your.  

List of Rules
-------------------------


.. _arrays-arraynsusage:

.. _short-syntax-for-arrays:

Short Syntax For Arrays
+++++++++++++++++++++++

 Arrays written with the new short syntax. 

PHP 5.4 introduced the new short syntax, with square brackets. The previous syntax, based on the `array() <https://www.php.net/array>`_ keyword is still available.

.. code-block:: php

   <?php
   
   // All PHP versions array
   $a = array(1, 2, 3);
   
   // PHP 5.4+ arrays
   $a = [1, 2, 3];
   
   ?>


See also `Array <https://www.php.net/manual/en/language.types.array.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Arrays/ArrayNSUsage |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Critical            |
+--------------+---------------------+
| Time To Fix  | Quick (30 mins)     |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _arrays-arrayindex:

.. _array-index:

Array Index
+++++++++++

 List of all indexes used in arrays. 

.. code-block:: php

   <?php
   
   // Index
   $x['index'] = 1;
   
   // in array creation
   $a = array('index2' => 1);
   $a2 = ['index3' => 2];
   
   ?>

Specs
^^^^^
+--------------+-------------------+
| Short name   | Arrays/Arrayindex |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Instant (5 mins)  |
+--------------+-------------------+
| Precision    | Very high         |
+--------------+-------------------+


.. _arrays-multidimensional:

.. _multidimensional-arrays:

Multidimensional Arrays
+++++++++++++++++++++++

 Simply, arrays of arrays. 

.. code-block:: php

   <?php
       $x[1][2] = $x[2][3][4];
       
   ?>


See also `Type array <https://www.php.net/manual/en/language.types.array.php>`_ and `Using Multidimensional Arrays in PHP <https://www.elated.com/articles/php-multidimensional-arrays/>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Arrays/Multidimensional |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _arrays-multipleidenticalkeys:

.. _multiple-index-definition:

Multiple Index Definition
+++++++++++++++++++++++++

 Indexes that are defined multiple times in the same array. 

.. code-block:: php

   <?php
       // Multiple identical keys
       $x = array(1 => 2, 
                  2 => 3,  
                  1 => 3);
   
       // Multiple identical keys (sneaky version)
       $x = array(1 => 2, 
                  1.1 => 3,  
                  true => 4);
   
       // Multiple identical keys (automated version)
       $x = array(1 => 2, 
                  3,        // This will be index 2
                  2 => 4);  // this index is overwritten
   ?>


They are indeed overwriting each other. This is most probably a typo.


Suggestions
^^^^^^^^^^^

* Review your code and check that arrays only have keys defined once.
* Review carefully your code and check indirect values, like constants, static constants.

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------+
| Short name   | Arrays/MultipleIdenticalKeys                                                                         |
+--------------+------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                       |
+--------------+------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                |
+--------------+------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                  |
+--------------+------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                |
+--------------+------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                     |
+--------------+------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                 |
+--------------+------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-magento-arrays-multipleidenticalkeys`, :ref:`case-mediawiki-arrays-multipleidenticalkeys` |
+--------------+------------------------------------------------------------------------------------------------------+


.. _arrays-negativestart:

.. _negative-start-index-in-array:

Negative Start Index In Array
+++++++++++++++++++++++++++++

 Negative starting index in arrays changed in PHP 8.0. Until then, they were ignored, and automatic index started always at 0. Since PHP 8.0, the next index is calculated.

The behavior will `break <https://www.php.net/manual/en/control-structures.break.php>`_ code that relies on automatic index in arrays, when a negative index is used for a starter.

.. code-block:: php

   <?php
   
   $x = [-5 => 2];
   $x[] = 3;
   
   print_r($x);
   
   /*
   PHP 7.4 and older 
   Array
   (
       [-5] => 2
       [0] => 3
   )
   */
   
   /*
   PHP 8.0 and more recent
   Array
   (
       [-5] => 2
       [-4] => 3
   )
   */
   
   ?>


See also `PHP RFC: Arrays starting with a negative index <https://wiki.php.net/rfc/negative_array_index>`_.


Suggestions
^^^^^^^^^^^

* Explicitely create the index, instead of using the automatic indexing
* Add an explicit index of 0 in the initial array, to set the automatic process in the right track
* Avoid using specified index in array, conjointly with automatic indexing.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Arrays/NegativeStart      |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 2.1.9                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _arrays-phparrayindex:

.. _php-arrays-index:

PHP Arrays Index
++++++++++++++++

 List of indexes used when manipulating PHP arrays in the code.

.. code-block:: php

   <?php
   
   // HTTP_HOST is a PHP array index. 
   $ip = 'http'.$_SERVER['HTTP_HOST'].'/'.$row['path'];
   
   //'path' is not a PHP index
   
   ?>

Specs
^^^^^
+--------------+----------------------+
| Short name   | Arrays/Phparrayindex |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _arrays-withcallback:

.. _handle-arrays-with-callback:

Handle Arrays With Callback
+++++++++++++++++++++++++++

 Use functions like `array_map() <https://www.php.net/array_map>`_.

.. code-block:: php

   <?php
   
   // Handles arrays with callback
   $uppercase = array_map('strtoupper', $source);
   
   // Handles arrays with foreach
   foreach($source as &$s) {
       $s = uppercase($s);
   }
   
   ?>


See also `array_map <https://www.php.net/array_map>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Arrays/WithCallback |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 1.3.7               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _classes-abstractclass:

.. _abstract-class-usage:

Abstract Class Usage
++++++++++++++++++++

 List of all abstract classes being used.

.. code-block:: php

   <?php
   
   abstract class foo {
       function foobar(); 
   }
   
   class bar extends foo {
       // extended method
       function foobar() {
           // doSomething()
       }
   
       // extra method
       function barbar() {
           // doSomething()
       }
   }
   ?>


See also `Classes abstraction <https://www.php.net/abstract>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Classes/Abstractclass |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _classes-abstractmethods:

.. _abstract-methods-usage:

Abstract Methods Usage
++++++++++++++++++++++

 List of all abstract methods being used.

.. code-block:: php

   <?php
   
   // abstract class
   abstract class foo {
       // abstract method
       function foobar(); 
   }
   
   class bar extends foo {
       // extended abstract method
       function foobar() {
           // doSomething()
       }
   
       // extra method
       function barbar() {
           // doSomething()
       }
   }
   ?>


See also `Classes abstraction <https://www.php.net/abstract>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Classes/Abstractmethods |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _classes-anonymous:

.. _anonymous-classes:

Anonymous Classes
+++++++++++++++++

 Anonymous classes.

.. code-block:: php

   <?php
   
   // Anonymous class, available since PHP 7.0
   $object = new class { function __construct() { echo __METHOD__; } };
   
   ?>

Specs
^^^^^
+--------------+-------------------+
| Short name   | Classes/Anonymous |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | 7.0+              |
+--------------+-------------------+
| Severity     | Major             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _classes-checkoncallusage:

.. _check-on-\_\_call-usage:

Check On __Call Usage
+++++++++++++++++++++

 When using the magic methods `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and __staticcall(), make sure the method exists before calling it. 

If the method doesn't exists, then the same method will be called again, leading to the same failure. Finally, it will crash PHP.

.. code-block:: php

   <?php
   
   class safeCall {
       function __class($name, $args) {
           // unsafe call, no checks
           if (method_exists($this, $name)) {
               $this->$name(...$args);
           }
       }
   }
   
   class unsafeCall {
       function __class($name, $args) {
           // unsafe call, no checks
           $this->$name(...$args);
       }
   }
   
   ?>


See also `Method overloading <https://www.php.net/manual/en/language.oop5.overloading.php#object.call>`_ and ``Magical PHP: `__call <https://www.php.net/manual/en/language.oop5.magic.php>`_ <https://www.garfieldtech.com/index.php/blog/magical-php-call>`_.



Suggestions
^^^^^^^^^^^

* Add a call to method_exists() before using any method name
* Relay the call to another object that doesn't handle __call() or __callStatic()

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/CheckOnCallUsage |
+--------------+--------------------------+
| Rulesets     | :ref:`Analyze`           |
+--------------+--------------------------+
| Exakat since | 1.7.2                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-classaliasusage:

.. _usage-of-class\_alias():

Usage Of class_alias()
++++++++++++++++++++++

 ``class_alias`` creates dynamically an alias for classes. 

.. code-block:: php

   <?php
   
   class foo { }
   
   class_alias('foo', 'bar');
   
   $a = new foo;
   $b = new bar;
   
   // the objects are the same
   var_dump($a == $b, $a === $b);
   var_dump($a instanceof $b);
   
   // the classes are the same
   var_dump($a instanceof foo);
   var_dump($a instanceof bar);
   
   var_dump($b instanceof foo);
   var_dump($b instanceof bar);
   
   ?>


See also `class_alias <https://www.php.net/class_alias>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Classes/ClassAliasUsage |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _classes-classnames:

.. _classes-names:

Classes Names
+++++++++++++

 List of all classes, as defined in the application.

.. code-block:: php

   <?php
   
   // foo is in the list
   class foo {}
   
   // Anonymous classes are not in the list
   $o = class { function foo(){} }
   
   ?>

Specs
^^^^^
+--------------+--------------------+
| Short name   | Classes/Classnames |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _classes-cloningusage:

.. _clone-usage:

Clone Usage
+++++++++++

 List of all clone situations.

.. code-block:: php

   <?php
       $dateTime = new DateTime();
       echo (clone $dateTime)->format('Y');
   ?>


See also `Object cloning <https://www.php.net/manual/en/language.oop5.cloning.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Classes/CloningUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _classes-constantclass:

.. _constant-class:

Constant Class
++++++++++++++

 A class or an interface only made up of constants. Constants usually have to be used in conjunction of some behavior (methods, class...) and never alone. 

.. code-block:: php

   <?php
   
   class ConstantClass {
       const KBIT = 1000;
       const MBIT = self::KBIT * 1000;
       const GBIT = self::MBIT * 1000;
       const PBIT = self::GBIT * 1000;
   }
   
   ?>


As such, they should be PHP constants (build with define or const), or included in a class with other methods and properties. 

See also `PHP Classes containing only constants <https://stackoverflow.com/questions/16838266/php-classes-containing-only-constants>`_.


Suggestions
^^^^^^^^^^^

* Make the class an interface
* Make the class an abstract class, to avoid its instantiation

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Classes/ConstantClass |
+--------------+-----------------------+
| Rulesets     | none                  |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _classes-constantdefinition:

.. _constant-definition:

Constant Definition
+++++++++++++++++++

 List of class constants being defined.

.. code-block:: php

   <?php
   
   // traditional way of making constants
   define('aConstant', 1);
   
   // modern way of making constants
   const anotherConstant = 2;
   
   class foo {
       // Not a constant, a class constant.
       const aClassConstant = 3;
   }
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Classes/ConstantDefinition |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _classes-definedconstants:

.. _defined-class-constants:

Defined Class Constants
+++++++++++++++++++++++

 Connect class constants with their definition when it can find it. This includes class constants, one level of `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ (extended) or interfaces (implemented).

.. code-block:: php

   <?php
   
   class X {
       const Y = 2;
       
       function foo() {
           // This is defined on the line above
           echo self::Y;
   
           // This is not defined in the current code
           echo X::X;
       }
   }
   
   ?>

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/DefinedConstants |
+--------------+--------------------------+
| Rulesets     | none                     |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-definedproperty:

.. _defined-properties:

Defined Properties
++++++++++++++++++

 List of properties that are explicitly defined in the class, its parents or traits.

.. code-block:: php

   <?php
   
   class foo {
       // property definition
       private bar = 2;
   }
   
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Classes/DefinedProperty |
+--------------+-------------------------+
| Rulesets     | none                    |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _classes-directcalltomagicmethod:

.. _no-direct-call-to-magic-method:

No Direct Call To Magic Method
++++++++++++++++++++++++++++++

 PHP features magic methods, which are methods related to operators.

Magic methods, such as `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, related to =, or `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_, related to ``clone``, are supposed to be used in an object environment, and not with direct call. 

It is recommended to use the magic method with its intended usage, and not to call it directly. For example, typecast to ``string`` instead of calling the `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ method.

.. code-block:: php

   <?php
   // Write
     print $x->a;
   // instead of 
     print $x->__get('a'); 
   
   class Foo {
       private $b = secret;
   
       public function __toString() {
           return strtoupper($this->b);
       }
   }
   
   $bar = new Foo();
   echo (string) $bar;
   
   ?>


Accessing those methods in a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ way is also discouraged.

See also `Magic Methods <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `Magical PHP: `__call <https://www.php.net/manual/en/language.oop5.magic.php>`_ <https://www.garfieldtech.com/blog/magical-php-call>`_.

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Classes/DirectCallToMagicMethod |
+--------------+---------------------------------+
| Rulesets     | :ref:`Analyze`                  |
+--------------+---------------------------------+
| Exakat since | 0.8.4                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Major                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _classes-dontunsetproperties:

.. _don't-unset-properties:

Don't Unset Properties
++++++++++++++++++++++

 Avoid unsetting properties. They would go undefined, and raise more warnings. 

When getting rid of a property, assign it to null. This keeps the property in the object, yet allows existence check without errors.

.. code-block:: php

   <?php
   
   class Foo {
       public $a = 1;
   }
   
   $a = new Foo();
   
   var_dump((array) $a) ;
   // la propriété est reportée, et null
   // ['a' => null]
   
   unset($a->a);
   
   var_dump((array) $a) ;
   //Empty []
   
   // Check if a property exists
   var_dump($a->b === null);
   
   // Same result as above, but with a warning
   var_dump($a->c === null);
   
   ?>


This analysis works on properties and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties. It also reports magic properties being unset.

Thanks for `Benoit Burnichon <https://twitter.com/BenoitBurnichon>`_ for the original idea.



Suggestions
^^^^^^^^^^^

* Never unset properties : set it to null or its default value instead
* Make the property an array, and set/unset its index

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------+
| Short name   | Classes/DontUnsetProperties                                                                    |
+--------------+------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                 |
+--------------+------------------------------------------------------------------------------------------------+
| Exakat since | 1.2.3                                                                                          |
+--------------+------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                            |
+--------------+------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                          |
+--------------+------------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                                  |
+--------------+------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                           |
+--------------+------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-vanilla-classes-dontunsetproperties`, :ref:`case-typo3-classes-dontunsetproperties` |
+--------------+------------------------------------------------------------------------------------------------+


.. _classes-dynamicclass:

.. _dynamic-classes:

Dynamic Classes
+++++++++++++++

 Dynamic calls of classes.

.. code-block:: php

   <?php
   
   class x {
       static function staticMethod() {}
   }
   
   $class = 'x';
   $class::staticMethod();
   
   ?>

Specs
^^^^^
+--------------+----------------------+
| Short name   | Classes/DynamicClass |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _classes-dynamicconstantcall:

.. _dynamic-class-constant:

Dynamic Class Constant
++++++++++++++++++++++

 Dynamic calls to class constants.

Constant may be dynamically called with the `constant() <https://www.php.net/constant>`_ function.

.. code-block:: php

   <?php
       // Dynamic access to 'E_ALL'
       echo constant('E_ALL');
       
       interface i {
           const MY_CONSTANT  = 1;
       }
   
       // Dynamic access to 'E_ALL'
       echo constant('i::MY_CONSTANT');
   
   ?>

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Classes/DynamicConstantCall |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Slow (1 hour)               |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _classes-dynamicmethodcall:

.. _dynamic-methodcall:

Dynamic Methodcall
++++++++++++++++++

 Dynamic calls to class methods.

.. code-block:: php

   <?php
   
   class x {
       static public function foo() {}
              public function bar() {}
   }
   
   $staticmethod = 'foo';
   // dynamic static method call to x::foo()
   x::$staticmethod();
   
   $method = 'bar';
   // dynamic method call to bar()
   $object = new x();
   $object->$method();
   
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Classes/DynamicMethodCall |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _classes-dynamicnew:

.. _dynamic-new:

Dynamic New
+++++++++++

 Dynamic instantiation of classes.

.. code-block:: php

   <?php
     $object = new $classname()
   ?>

.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Classes/DynamicNew |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _classes-dynamicpropertycall:

.. _dynamic-property:

Dynamic Property
++++++++++++++++

 Dynamic access to class property.

.. code-block:: php

   <?php
   
   class x {
       static public $foo = 1;
              public $bar = 2;
   }
   
   $staticproperty = 'foo';
   // dynamic static property call to x::$foo
   echo x::${$staticproperty};
   
   $property = 'bar';
   // dynamic property call to bar()
   $object = new x();
   $object->$property = 4;
   
   ?>

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Classes/DynamicPropertyCall |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Slow (1 hour)               |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _classes-finalprivate:

.. _final-private-methods:

Final Private Methods
+++++++++++++++++++++

 PHP's private methods cannot be overwritten, as they are dedicated to the current class. That way, the ``final`` keyword is useless. 

PHP 8.0 warns when it finds such a method.

.. code-block:: php

   <?php
   
   class foo {
       // Final and private both prevent child classes to overwrite the method
       final private function bar() {}
   
       // Final and protected (or public) keep this method available, but not overwritable
       final protected function bar() {}
   }
   
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the final keyword
* Relax visibility

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Classes/FinalPrivate      |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 2.2.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | Very high                 |
+--------------+---------------------------+


.. _classes-hasmagicproperty:

.. _has-magic-property:

Has Magic Property
++++++++++++++++++

 The class has defined one of the magic methods.

The magic methods are  : `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__unset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__wakeup() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.

`__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ and `__destruct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ are omitted here. 

.. code-block:: php

   <?php
   
   class WithMagic {
       // some more methods, const or properties
       
       public function __get() {
           // doSomething();
       }
   }
   
   ?>


See also `Property overloading <https://www.php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/HasMagicProperty |
+--------------+--------------------------+
| Rulesets     | none                     |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-immutablesignature:

.. _immutable-signature:

Immutable Signature
+++++++++++++++++++

 Overwrites makes refactoring a method signature difficult. PHP enforces compatible signature, by checking if arguments have the same type, reference and default values.

In PHP 7.3, typehint had to be the same, or dropped. In PHP 7.4, typehint may be contravariant (arguments), or covariant (returntype). 

This analysis may be configured with ``maxOverwrite``. By default, a minimum of 8 overwritten methods is considered difficult to update.

.. code-block:: php

   <?php
   
   // Changing any of the four foo() method signature will trigger a PHP warning
   class a {
       function foo($a) {}
   }
   
   class ab1 extends a {
       // four foo() methods have to be refactored at the same time!
       function foo($ab1) {}
   }
   
   class ab2 extends a {
       function foo($ab2) {}
   }
   
   class ab3 extends ab1 {
       function foo($abc1) {}
   }
   
   ?>


When refactoring a method, all the related methodcall may have to be updated too. Adding a type, a default value, or a new argument with default value won't affect the calls, but only the definitions. Otherwise, calls will also have to be updated.

IDE may help with signature refactoring, such as `Refactoring code <https://www.jetbrains.com/help/phpstorm/refactoring-source-code.html>`_.

See also `Covariance and contravariance (computer science) <https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)>`_, `extends <https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends>`_.

+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+
| Name         | Default | Type    | Description                                                                                           |
+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+
| maxOverwrite | 8       | integer | Minimal number of method overwrite to consider that any refactor on the method signature is now hard. |
+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+



Specs
^^^^^
+--------------+----------------------------+
| Short name   | Classes/ImmutableSignature |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 1.9.9                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _classes-isnotfamily:

.. _is-not-class-family:

Is Not Class Family
+++++++++++++++++++

 Mark a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call as inside the family of classes. Children are not considered here.

.. code-block:: php

   <?php
   
   class a {
       function familyMethod() {}
   }
   
   classs b {
       function foo() {
           self::familyMethod(); // This is a call to a family method
           b::notAFamilyMethod(); // This is a call to a method of a class outside the family
       }
   }
   ?>

Specs
^^^^^
+--------------+---------------------+
| Short name   | Classes/IsNotFamily |
+--------------+---------------------+
| Rulesets     | none                |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _classes-isamagicproperty:

.. _is-a-php-magic-property:

Is A PHP Magic Property
+++++++++++++++++++++++

 Mark properties usage when they are actually a magic call. 

.. code-block:: php

   <?php
   
   class magicProperty {
       public $b;
       
       function __get($name) {
           // do something with the value
       }
   
       function foo() {
           $this->a;
           $this->b;
       }
   }
   
   ?>


See also `Magic Methods <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/IsaMagicProperty |
+--------------+--------------------------+
| Rulesets     | none                     |
+--------------+--------------------------+
| Exakat since | 0.12.17                  |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-magicmethod:

.. _magic-methods:

Magic Methods
+++++++++++++

 List of PHP magic methods being used. The magic methods are 

`__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__unset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__wakeup() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.

``__construct`` and ``__destruct`` are omitted here, as they are routinely used to create and destroy objects.

.. code-block:: php

   <?php
   
   class foo{
       // PHP Magic method, called when cloning an object.
       function __clone() {}
   }
   ?>


See also `Magic Method <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Classes/MagicMethod |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _classes-multipleclassesinfile:

.. _multiple-classes-in-one-file:

Multiple Classes In One File
++++++++++++++++++++++++++++

 It is regarded as a bad practice to store several classes in the same file. This is usually done to make life of __autoload() easier. 

It is often unexpected to find class ``foo`` in the ``bar.php`` file. This is also the case for interfaces and traits.

.. code-block:: php

   <?php
   
   // three classes in the same file
   class foo {}
   class bar {}
   class foobar{}
   
   ?>


One good reason to have multiple classes in one file is to reduce include time by providing everything into one nice include. 

See also `Is it a bad practice to have multiple classes in the same file? <https://stackoverflow.com/questions/360643/is-it-a-bad-practice-to-have-multiple-classes-in-the-same-file>`_.



Suggestions
^^^^^^^^^^^

* Split the file into smaller files, one for each class

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Classes/MultipleClassesInFile |
+--------------+-------------------------------+
| Rulesets     | :ref:`Appinfo`                |
+--------------+-------------------------------+
| Exakat since | 0.8.4                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _classes-multipledeclarations:

.. _multiple-class-declarations:

Multiple Class Declarations
+++++++++++++++++++++++++++

 It is possible to declare several times the same class in the code. PHP will not mention it until execution time, since declarations may be conditional. 

.. code-block:: php

   <?php
   
   $a = 1;
   
   // Conditional declaration
   if ($a == 1) {
       class foo {
           function method() { echo 'class 1';}
       }
   } else {
       class foo {
           function method() { echo 'class 2';}
       }
   }
   
   (new foo())->method();
   ?>


It is recommended to avoid declaring several times the same class in the code. The best practice is to separate them with namespaces, they are for here for that purpose. In case those two classes are to be used interchangeably, the best is to use an abstract class or an interface.

Suggestions
^^^^^^^^^^^

* Store classes with different names in different namespaces
* Change the name of the classes and give them a common interface to allow from common behavior

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Classes/MultipleDeclarations |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _classes-multipletraitorinterface:

.. _multiple-identical-trait-or-interface:

Multiple Identical Trait Or Interface
+++++++++++++++++++++++++++++++++++++

 There is no need to use the same trait, or implements the same interface more than once.

Up to PHP 7.1 (at least), this doesn't raise any warning. Traits are only imported once, and interfaces may be implemented as many times as wanted.

.. code-block:: php

   <?php
   
   class foo {
       use t3,t3,t3;
   }
   
   class bar implements i,i,i {
   
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the duplicate trait or interfaces

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Classes/MultipleTraitOrInterface |
+--------------+----------------------------------+
| Rulesets     | :ref:`Analyze`                   |
+--------------+----------------------------------+
| Exakat since | 0.8.4                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Minor                            |
+--------------+----------------------------------+
| Time To Fix  | Instant (5 mins)                 |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _classes-nomagicwitharray:

.. _no-magic-method-with-array:

No Magic Method With Array
++++++++++++++++++++++++++

 Magic method ``__set()`` doesn't work for array syntax. 

When overloading properties, they can only be used for scalar values, excluding arrays. Under the hood, PHP uses ``__get()`` to reach for the name of the property, and doesn't recognize the following index as an array. It yields an error : Indirect modification of overloaded property.

.. code-block:: php

   <?php
   
   class c {
       private $a;
       private $o = array();
   
       function __get($name) {
           return $this->o[$name];
       }
       
       function foo() {
           // property b doesn't exists
           $this->b['a'] = 3;
           
           print_r($this);
       }
   
       // This method has no impact on the issue
       function __set($name, $value) {
           $this->o[$name] = $value;
       }
   }
   
   $c = new c();
   $c->foo();
   
   ?>


It is possible to use the array syntax with a magic property : by making the ``__get`` returns an array, the syntax will actually extract the expected item in the array.

This is not reported by linting.

In this analysis, only properties that are found to be magic are reported. For example, using the b property outside the class scope is not reported, as it would yield too many false-positives.

See also `Overload <https://www.php.net/manual/en/language.oop5.overloading.php#object.get>`_.


Suggestions
^^^^^^^^^^^

* Use a distinct method to append a new value to that property
* Assign the whole array, and not just one of its elements

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/NoMagicWithArray |
+--------------+--------------------------+
| Rulesets     | :ref:`Analyze`           |
+--------------+--------------------------+
| Exakat since | 0.12.4                   |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Major                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | Medium                   |
+--------------+--------------------------+


.. _classes-noparent:

.. _class-without-parent:

Class Without Parent
++++++++++++++++++++

 Classes should not refer to ``parent`` when it is not extending another class. 

In PHP 7.4, it is a Deprecated warning. In PHP 7.3, it was a Fatal error, when the code was finally executed.

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           parent::foo();
       }
   }
   ?>




Suggestions
^^^^^^^^^^^

* Update the class and make it extends another class
* Change the parent mention with a fully qualified name
* Remove the call to the parent altogether

Specs
^^^^^
+----------------+------------------+
| Short name     | Classes/NoParent |
+----------------+------------------+
| Rulesets       | :ref:`Analyze`   |
+----------------+------------------+
| Exakat since   | 1.9.0            |
+----------------+------------------+
| PHP Version    | 7.4-             |
+----------------+------------------+
| PHP deprecated | 7.4              |
+----------------+------------------+
| Severity       | Minor            |
+----------------+------------------+
| Time To Fix    | Quick (30 mins)  |
+----------------+------------------+
| Precision      | Very high        |
+----------------+------------------+


.. _classes-nonppp:

.. _forgotten-visibility:

Forgotten Visibility
++++++++++++++++++++

 Some classes elements (property, method, constant) are missing their explicit visibility.

By default, it is public. It should at least be mentioned as public, or may be reviewed as protected or private. 

Class constants support also visibility since PHP 7.1.

final, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and abstract are not counted as visibility. Only public, private and protected. The PHP 4 var keyword is counted as undefined.

Traits, classes and interfaces are checked. 

.. code-block:: php

   <?php
   
   // Explicit visibility
   class X {
       protected sconst NO_VISIBILITY_CONST = 1; // For PHP 7.2 and later
   
       private $noVisibilityProperty = 2; 
       
       public function Method() {}
   }
   
   // Missing visibility
   class X {
       const NO_VISIBILITY_CONST = 1; // For PHP 7.2 and later
   
       var $noVisibilityProperty = 2; // Only with var
       
       function NoVisibilityForMethod() {}
   }
   
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_ and `Understanding The Concept Of Visibility In Object Oriented PHP <https://torquemag.io/2016/05/understanding-concept-visibility-object-oriented-php/>`_.


Suggestions
^^^^^^^^^^^

* Always add explicit visibility to methods and constants in a class
* Always add explicit visibility to properties in a class, after PHP 7.4

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------+
| Short name   | Classes/NonPpp                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `always-have-visibility <https://github.com/dseguy/clearPHP/tree/master/rules/always-have-visibility.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-fuelcms-classes-nonppp`, :ref:`case-livezilla-classes-nonppp`                                    |
+--------------+-------------------------------------------------------------------------------------------------------------+


.. _classes-nonstaticmethodscalledstatic:

.. _non-static-methods-called-in-a-static:

Non Static Methods Called In A Static
+++++++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods have to be declared as such (using the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword). Then, one may call them without instantiating the object.

PHP 7.0, and more recent versions, yield a deprecated error : ``Non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method A\:\:B() should not be called statically``.

PHP 5 and older doesn't check that a method is `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not : at any point, the code may call one method statically.

.. code-block:: php

   <?php
       class x {
           static public function sm( ) { echo __METHOD__.\n; }
           public public sm( ) { echo __METHOD__.\n; }
       } 
       
       x::sm( ); // echo x::sm 
       
       // Dynamic call
       ['x', 'sm']();
       [\x::class, 'sm']();
   
       $s = 'x::sm';
       $s();
   
   ?>


It is a bad idea to call non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method statically. Such method may make use of special
variable `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_, which will be undefined. PHP will not check those calls at compile time,
nor at running time. 

It is recommended to update this situation : make the method actually `static <https://www.php.net/manual/en/language.oop5.static.php>`_, or use it only 
in object context.

Note that this analysis reports all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call made on a non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method,
even within the same class or class hierarchy. PHP silently accepts `static <https://www.php.net/manual/en/language.oop5.static.php>`_ call to any
in-family method.

.. code-block:: php

   <?php
       class x {
           public function foo( ) { self::bar() }
           public function bar( ) { echo __METHOD__.\n; }
       } 
   ?>


See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_.



Suggestions
^^^^^^^^^^^

* Call the method the correct way
* Define the method as static

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Short name   | Classes/NonStaticMethodsCalledStatic                                                                               |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                     |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                    |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Precision    | Medium                                                                                                             |
+--------------+--------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolphin-classes-nonstaticmethodscalledstatic`, :ref:`case-magento-classes-nonstaticmethodscalledstatic` |
+--------------+--------------------------------------------------------------------------------------------------------------------+


.. _classes-oldstyleconstructor:

.. _old-style-constructor:

Old Style Constructor
+++++++++++++++++++++

 PHP classes used to have the method bearing the same name as the class acts as the constructor. That was PHP 4, and early PHP 5. 

The manual issues a warning about this syntax : ``Old style constructors are DEPRECATED in PHP 7.0, and will be removed in a future version. You should always use `__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ in new code.``

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace is important
       class foo {
           function foo() {
               // This acts as the old-style constructor, and is reported by PHP
           }
       }
   
       class bar {
           function __construct() { }
           function bar() {
               // This doesn't act as constructor, as bar has a __construct() method
           }
       }
   }
   
   namespace Foo\Bar{
       class foo {
           function foo() {
               // This doesn't act as constructor, as bar is not in the global namespace
           }
       }
   }
   
   ?>


This is no more the case in PHP 5, which relies on ``__construct()`` to do so. Having this old style constructor may bring in confusion, unless you are also supporting old time PHP 4.

Note that classes with methods bearing the class name, but inside a namespace are not following this convention, as this is not breaking backward compatibility. Those are excluded from the analyze.

See also `Constructors and Destructors <https://www.php.net/manual/en/language.oop5.decon.php>`_.


Suggestions
^^^^^^^^^^^

* Remove old style constructor and make it ``__construct()``
* Remove old libraries and use a modern component

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------+
| Short name   | Classes/OldStyleConstructor                                                                             |
+--------------+---------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`, :ref:`CompatibilityPHP80`                                               |
+--------------+---------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                     |
+--------------+---------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-php4-class-syntax <https://github.com/dseguy/clearPHP/tree/master/rules/no-php4-class-syntax.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------------+


.. _classes-overwrittenconst:

.. _overwritten-class-const:

Overwritten Class Const
+++++++++++++++++++++++

 Those class constants are overwritten in a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. This may lead to confusion, as the value of the constant may change depending on the way it is called.

.. code-block:: php

   <?php
   
   class foo {
       const C = 1;
   }
   
   class bar extends foo {
       const C = 2;
       
       function x() {
           // depending on the access to C, value is different.
           print self::C.' '.static::C.' '.parent::C;
       }
   }
   
   ?>

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/OverwrittenConst |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Major                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-redefinedconstants:

.. _redefined-class-constants:

Redefined Class Constants
+++++++++++++++++++++++++

 Redefined class constants.

Class constants may be redefined, though it is prone to errors when using them, as it is now crucial to use the right class name to access the right value.

.. code-block:: php

   <?php
   
   class a {
       const A = 1;
   }
   
   class b extends a {
       const A = 2;
   }
   
   class c extends c { }
   
   echo a::A, ' ', b::A, ' ', c::A;
   // 1 2 2
   
   ?>


It is recommended to use distinct names.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Classes/RedefinedConstants |
+--------------+----------------------------+
| Rulesets     | :ref:`Analyze`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _classes-redefineddefault:

.. _redefined-default:

Redefined Default
+++++++++++++++++

 Classes allows properties to be set with a default value. When those properties get, unconditionally, another value at constructor time, then one of the default value are useless. One of those definition should go : it is better to define properties outside the constructor.

.. code-block:: php

   <?php
   
   class foo {
       public $redefined = 1;
   
       public function __construct( ) {
           $this->redefined = 2;
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Move the default assignation to the property definition
* Drop the reassignation in the constructor

Specs
^^^^^
+--------------+---------------------------------------------+
| Short name   | Classes/RedefinedDefault                    |
+--------------+---------------------------------------------+
| Rulesets     | :ref:`Analyze`                              |
+--------------+---------------------------------------------+
| Exakat since | 0.8.4                                       |
+--------------+---------------------------------------------+
| PHP Version  | All                                         |
+--------------+---------------------------------------------+
| Severity     | Major                                       |
+--------------+---------------------------------------------+
| Time To Fix  | Slow (1 hour)                               |
+--------------+---------------------------------------------+
| Precision    | High                                        |
+--------------+---------------------------------------------+
| Examples     | :ref:`case-piwigo-classes-redefineddefault` |
+--------------+---------------------------------------------+


.. _classes-redefinedmethods:

.. _redefined-methods:

Redefined Methods
+++++++++++++++++

 Redefined methods are overwritten methods. Those methods are defined in different classes that are part of the same classes hierarchy.

Protected and public redefined methods replace each other. Private methods are kept separated, and depends on the caller to be distinguished.

.. code-block:: php

   <?php
   
   class foo {
       function method() {
           return 1;
       }
   }
   
   class bar extends foo {
       function method() {
           return 2;
       }
   }
   ?>


See also `Object Inheritance <https://www.php.net/manual/en/language.oop5.inheritance.php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/RedefinedMethods |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-staticcontainsthis:

.. _static-methods-can't-contain-$this:

Static Methods Can't Contain $this
++++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are also called ``class methods`` : they may be called even if the class has no instantiated object. Thus, the local variable ``$this`` won't exist, PHP will set it to `NULL <https://www.php.net/manual/en/language.types.null.php>`_ as usual. 

.. code-block:: php

   <?php
   
   class foo {
       // Static method may access other static methods, or property, or none. 
       static function staticBar() {
           // This is not possible in a static method
           return self::otherStaticBar() . static::$staticProperty;
       }
   
       static function bar() {
           // This is not possible in a static method
           return $this->property;
       }
   }
   
   ?>


Either this is not a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method, which is fixed by removing the ``static`` keyword, or replace all `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ mention by `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties ``Class\:\:$property``.

See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_


Suggestions
^^^^^^^^^^^

* Remove any $this usage
* Turn any $this usage into a static call : $this->foo() => self\:\:foo()

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------+
| Short name   | Classes/StaticContainsThis                                                                       |
+--------------+--------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                   |
+--------------+--------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                            |
+--------------+--------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                            |
+--------------+--------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                  |
+--------------+--------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                             |
+--------------+--------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-static-this <https://github.com/dseguy/clearPHP/tree/master/rules/no-static-this.md>`__      |
+--------------+--------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-xataface-classes-staticcontainsthis`, :ref:`case-sugarcrm-classes-staticcontainsthis` |
+--------------+--------------------------------------------------------------------------------------------------+


.. _classes-staticmethods:

.. _static-methods:

Static Methods
++++++++++++++

 List of all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods.

.. code-block:: php

   <?php
   
   class foo {
       static public function staticMethod() {
           
       }
       
       public function notStaticMethod() {
       
       }
              
       private function method() {
           // This is not a property
           new static();
       }
   }
   
   ?>

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Classes/StaticMethods |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _classes-staticmethodscalledfromobject:

.. _static-methods-called-from-object:

Static Methods Called From Object
+++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods may be called without instantiating an object. As such, they never interact with the special variable '`$this <https://www.php.net/manual/en/language.oop5.basic.php>`_', as they do not depend on object existence. 

Besides this, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are normal methods that may be called directly from object context, to perform some utility task. 

To maintain code readability, it is recommended to call `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method in a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ way, rather than within object context.

.. code-block:: php

   <?php
       class x {
           static function y( ) {}
       }
       
       $z = new x( );
       
       $z->y( ); // Readability : no one knows it is a static call
       x::y( );  // Readability : here we know
   ?>




Suggestions
^^^^^^^^^^^

* Switch to static method syntax
* Remove the static option from the method

Specs
^^^^^
+--------------+---------------------------------------+
| Short name   | Classes/StaticMethodsCalledFromObject |
+--------------+---------------------------------------+
| Rulesets     | :ref:`Analyze`                        |
+--------------+---------------------------------------+
| Exakat since | 0.8.4                                 |
+--------------+---------------------------------------+
| PHP Version  | All                                   |
+--------------+---------------------------------------+
| Severity     | Minor                                 |
+--------------+---------------------------------------+
| Time To Fix  | Quick (30 mins)                       |
+--------------+---------------------------------------+
| Precision    | High                                  |
+--------------+---------------------------------------+


.. _classes-staticproperties:

.. _static-properties:

Static Properties
+++++++++++++++++

 List of all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties.
.. code-block:: php

   <?php
   
   class foo {
       static public $staticProperty = 1;
              public $notStaticProperty = 2;
              
       private function method() {
           // This is not a property
           new static();
       }
   }
   
   function bar() {
       // This is not a static property
       static $staticVariable;
       
       //....
   }
   
   ?>

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Classes/StaticProperties |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _classes-testclass:

.. _test-class:

Test Class
++++++++++

 Those are test classes, based on popular UT frameworks.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Classes/TestClass |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _classes-throwindestruct:

.. _throw-in-destruct:

Throw In Destruct
+++++++++++++++++

 According to the manual, ``Attempting to throw an exception from a destructor (called in the time of script termination) causes a fatal error.``

The destructor may be called during the lifespan of the script, but it is not certain. If the exception is thrown later, the script may end up with a fatal error. 

Thus, it is recommended to avoid throwing exceptions within the ``__destruct`` method of a class.

.. code-block:: php

   <?php
   
   // No exception thrown
   class Bar { 
       function __construct() {
           throw new Exception('__construct');
       }
   
       function __destruct() {
           $this->cleanObject();
       }
   }
   
   // Potential crash
   class Foo { 
       function __destruct() {
           throw new Exception('__destruct');
       }
   }
   
   ?>


See also `Constructors and Destructors <https://www.php.net/manual/en/language.oop5.decon.php>`_.


Suggestions
^^^^^^^^^^^

* Remove any exception thrown from a destructor

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Classes/ThrowInDestruct |
+--------------+-------------------------+
| Rulesets     | :ref:`Analyze`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Major                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _classes-undeclaredstaticproperty:

.. _wrong-access-style-to-property:

Wrong Access Style to Property
++++++++++++++++++++++++++++++

 Use the right syntax when reaching for a property. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties use the ``\:\:`` operator, and non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties use ``->``. 

Mistaking one of the other raise two different reactions from PHP : ``Access to undeclared `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property`` is a fatal error, while ``PHP Notice:  Accessing `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property aa\:\:$a as non `static <https://www.php.net/manual/en/language.oop5.static.php>`_`` is a notice.

.. code-block:: php

   <?php
   
   class a { 
       static public $a = 1;
       
       function foo() {
           echo self::$a; // right
           echo $this->a; // WRONG
       }
   }
   
   class b { 
       public $b = 1;
   
       function foo() {
           echo $this->$b;  // right
           echo b::$b;      // WRONG
       }
   }
   
   ?>


This analysis reports both `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties with a `->` access, and non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties with a `\:\:` access.

See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_.


Suggestions
^^^^^^^^^^^

* Match the property call with the definition
* Make the property static

Specs
^^^^^
+--------------+-------------------------------------------------------+
| Short name   | Classes/UndeclaredStaticProperty                      |
+--------------+-------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                        |
+--------------+-------------------------------------------------------+
| Exakat since | 1.4.9                                                 |
+--------------+-------------------------------------------------------+
| PHP Version  | All                                                   |
+--------------+-------------------------------------------------------+
| Severity     | Critical                                              |
+--------------+-------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                       |
+--------------+-------------------------------------------------------+
| Precision    | High                                                  |
+--------------+-------------------------------------------------------+
| Examples     | :ref:`case-humo-gen-classes-undeclaredstaticproperty` |
+--------------+-------------------------------------------------------+


.. _classes-undefinedconstants:

.. _undefined-class-constants:

Undefined Class Constants
+++++++++++++++++++++++++

 Class constants that are used, but never defined. This should yield a fatal error upon execution, but no feedback at compile level.

.. code-block:: php

   <?php
   
   class foo {
       const A = 1;
       define('B', 2);
   }
   
   // here, C is not defined in the code and is reported
   echo foo::A.foo::B.foo::C;
   
   ?>



Suggestions
^^^^^^^^^^^

* Fix the name of the constant
* Add the constant to the current class or one of its parent
* Update the constant's visibility

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Classes/UndefinedConstants |
+--------------+----------------------------+
| Rulesets     | :ref:`Analyze`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Major                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _classes-undefinedproperty:

.. _undefined-properties:

Undefined Properties
++++++++++++++++++++

 List of properties that are not explicitly defined in the class, its parents or traits.

.. code-block:: php

   <?php
   
   class foo {
       // property definition
       private bar = 2;
       
       function foofoo() {
           // $this->bar is defined in the class
           // $this->barbar is NOT defined in the class
           return $this->bar + $this->barbar;
       }
   }
   
   ?>


It is possible to spot unidentified properties by using the PHP's magic methods ``__get`` and ``__set``. Even if the class doesn't use magic methods, any call to an undefined property will be directed to those methods, and they can be used as a canary, warning that the code is missing a definition. 

.. code-block:: php

   <?php
   
   trait NoUnefinedProperties {
   	function __get($name) {
   		assert(false, "Attempt to read the $name property, on the class ".__CLASS__;
   	}
   
   	function __set($name, $value) {
   		assert(false, "Attempt to read the $name property, on the class ".__CLASS__;
   	}
   }
   
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Suggestions
^^^^^^^^^^^

* Add an explicit property definition, and give it ``null`` as a default value : this way, it behaves the same as undefined.
* Rename the property to one that exists already.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------------+
| Short name   | Classes/UndefinedProperty                                                                                     |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                           |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                          |
+--------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-undefined-properties <https://github.com/dseguy/clearPHP/tree/master/rules/no-undefined-properties.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-wordpress-classes-undefinedproperty`, :ref:`case-mediawiki-classes-undefinedproperty`              |
+--------------+---------------------------------------------------------------------------------------------------------------+


.. _classes-undefinedstaticclass:

.. _undefined-class:

Undefined \:\:class
+++++++++++++++++++

 ``\:\:class`` doesn't check if a corresponding class exists. 

``\:\:class`` must be checked with a call to `class_exists() <https://www.php.net/class_exists>`_. Otherwise, it may lead to a ``Class 'foo' not found`` or even silent dead code : this happens also with Catch and `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ commands with undefined classes. PHP doesn't raise an error in that case. 

.. code-block:: php

   <?php
   
   class foo() {}
   
   // prints foo
   echo foo::class; 
   
   // prints bar though bar doesn't exist.
   echo bar::class;
   
   ?>


See also `Class Constants <https://www.php.net/manual/en/language.oop5.constants.php>`_.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Classes/UndefinedStaticclass |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 1.3.5                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _classes-useclassoperator:

.. _use-class-operator:

Use \:\:Class Operator
++++++++++++++++++++++

 Use ``\:\:class`` to hardcode class names, instead of strings.

This is actually faster than strings, which are parsed at execution time, while ``\:\:class`` is compiled, making it faster to execute. 

``\:\:class`` operator is also able to handle use expressions, including aliases and local namespace. The code is easier to maintain. For example, the target class's namespace may be renamed, without changing the ``\:\:class``, while the string must be updated.

``\:\:class`` operator works with ``self`` and ``static``keywords. 

.. code-block:: php

   <?php
   
   namespace foo\bar;
   
   use foo\bar\X as B;
   
   class X {}
   
   $className = '\foo\bar\X';
   
   $className = foo\bar\X::class;
   
   $className = B\X;
   
   $object = new $className;
   
   ?>


This is not possible when building the name of the class with concatenation.

This is a micro-optimization. This also helps `static <https://www.php.net/manual/en/language.oop5.static.php>`_ analysis, as it gives more information at compile time to analyse.

See also `\:\:class <https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.class>`_.


Suggestions
^^^^^^^^^^^

* Replace strings by the \:\:class operator whenever possible

Specs
^^^^^
+--------------+--------------------------------------------+
| Short name   | Classes/UseClassOperator                   |
+--------------+--------------------------------------------+
| Rulesets     | :ref:`Analyze`                             |
+--------------+--------------------------------------------+
| Exakat since | 0.8.7                                      |
+--------------+--------------------------------------------+
| PHP Version  | All                                        |
+--------------+--------------------------------------------+
| Severity     | Minor                                      |
+--------------+--------------------------------------------+
| Time To Fix  | Instant (5 mins)                           |
+--------------+--------------------------------------------+
| Precision    | Medium                                     |
+--------------+--------------------------------------------+
| Examples     | :ref:`case-typo3-classes-useclassoperator` |
+--------------+--------------------------------------------+


.. _classes-useinstanceof:

.. _use-instanceof:

Use Instanceof
++++++++++++++

 The ``instanceof`` operator is a more precise alternative to ``is_object()``. It is also faster.

`instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ checks for an variable to be of a class or its parents or the interfaces it implements. 
Once ``instanceof`` has been used, the actual attributes available (properties, constants, methods) are known, unlike with ``is_object()``.

Last, ``instanceof`` may be upgraded to Typehint, by moving it to the method signature. 

.. code-block:: php

   <?php
   
   class Foo {
   
       // Don't use is_object
       public function bar($o) {
           if (!is_object($o)) { return false; } // Classic argument check
           return $o->method();
       }
   
       // use instanceof
       public function bar($o) {
           if ($o instanceof myClass) {  // Now, we know which methods are available
               return $o->method();
           }
           
           return false; } // Default behavior
       }
   
       // use of typehinting
       // in case $o is not of the right type, exception is raised automatically
       public function bar(myClass $o) {
           return $o->method();
       }
   }
   
   ?>


``instanceof`` and ``is_object()`` may not be always interchangeable. Consider using `isset() <https://www.www.php.net/isset>`_ on a known property for a simple check on objects. You may also consider `is_string() <https://www.php.net/is_string>`_, `is_integer() <https://www.php.net/is_integer>`_ or `is_scalar() <https://www.php.net/is_scalar>`_, in particular instead of ``!`is_object() <https://www.php.net/is_object>`_``.

The ``instanceof`` operator is also faster than the ``is_object()`` functioncall. 

See also `Type Operators <https://www.php.net/manual/en/language.operators.type.php#language.operators.type>`_ and `is_object <https://www.php.net/manual/en/function.is-object.php>`_.


Suggestions
^^^^^^^^^^^

* Use instanceof and remove is_object()
* Create a high level interface to check a whole family of classes, instead of testing them individually
* Use typehint when possible
* Avoid mixing scalar types and objects in the same variable

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------+
| Short name   | Classes/UseInstanceof                                                                 |
+--------------+---------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                        |
+--------------+---------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                 |
+--------------+---------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                   |
+--------------+---------------------------------------------------------------------------------------+
| Severity     | Major                                                                                 |
+--------------+---------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                       |
+--------------+---------------------------------------------------------------------------------------+
| Precision    | High                                                                                  |
+--------------+---------------------------------------------------------------------------------------+
| Examples     | :ref:`case-teampass-classes-useinstanceof`, :ref:`case-zencart-classes-useinstanceof` |
+--------------+---------------------------------------------------------------------------------------+


.. _classes-uselessfinal:

.. _useless-final:

Useless Final
+++++++++++++

 When a class is declared final, all of its methods are also final by default. 

There is no need to declare them individually final.

.. code-block:: php

   <?php
   
       final class foo {
           // Useless final, as the whole class is final
           final function method() { }
       }
   
       class bar {
           // Useful final, as the whole class is not final
           final function method() { }
       }
   
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_, and `When to declare final <https://ocramius.github.io/blog/when-to-declare-classes-final/>`_.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------+
| Short name   | Classes/UselessFinal                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                |
+--------------+-------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-useless-final <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-final.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------+


.. _classes-variableclasses:

.. _dynamically-called-classes:

Dynamically Called Classes
++++++++++++++++++++++++++

 Indicates if a class is called dynamically.

.. code-block:: php

   <?php
   
   // This class is called dynamically
   class X {
       const CONSTANTE = 1;
   }
   
   $classe = 'X';
   
   $x = new $classe();
   
   echo $x::CONSTANTE;
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Classes/VariableClasses |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _classes-wrongtypedpropertyinit:

.. _wrong-typed-property-default:

Wrong Typed Property Default
++++++++++++++++++++++++++++

 Property is typed with an incompatible default value type.

Init type might be a new instance, the return of a method call or an interface compatible object.

.. code-block:: php

   <?php
   
   class x {
       private A $property;
       private B $incompatible;
       
       function __construct() {
           // This is compatible
           $this->property = new A();
           
           // This is incompatible : new B() expected
           $this->incompatible = new C();
           
       }
   }
   
   ?>


PHP compiles such code, but won't execute it, as it detects the incompatibility.



Suggestions
^^^^^^^^^^^

* Remove the type hint of the property
* Fix the initialization call
* Use an interface for typehint

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Classes/WrongTypedPropertyInit |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 2.0.9                          |
+--------------+--------------------------------+
| PHP Version  | 7.4+                           |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _complete-createcompactvariables:

.. _create-compact-variables:

Create Compact Variables
++++++++++++++++++++++++

 This command creates Variable definitions, based on usage of 'compact'. 

.. code-block:: php

   <?php
   
   function foo() {
       $a = 1;
       return compact('a');
   }
   ?>


This only works when `compact() <https://www.php.net/compact>`_ is used with literal values, or with constants. Dynamic values are not reported.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Complete/CreateCompactVariables |
+--------------+---------------------------------+
| Rulesets     | none                            |
+--------------+---------------------------------+
| Exakat since | 1.9.2                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _complete-createmagicproperty:

.. _create-magic-property:

Create Magic Property
+++++++++++++++++++++

 This command creates a link DEFINITION between a ``__get`` and ``__set`` calls, and its equivalent magic method.

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           // This is linked to __set
           $this->a = 1;
           
           // This is linked to __get
           return $this->b;
       }
       
       function __get($name) {
           return 1;
       }
   
       function __set($name, $value) {
           // Store the value
       }
   }
   
   ?>


This command may not detect all possible link for the ``__get`` and ``__set`` call. It may be missing information about the nature of the object.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Complete/CreateMagicProperty |
+--------------+------------------------------+
| Rulesets     | none                         |
+--------------+------------------------------+
| Exakat since | 1.9.2                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _complete-followclosuredefinition:

.. _follow-closure-definition:

Follow Closure Definition
+++++++++++++++++++++++++

 This command adds DEFINITION link between closure definitions and their usage.

Local usage of the closure, in the same scope, are detected. Relayed closure, when they are transmitted to another method for usage, is detected, for one level.

.. code-block:: php

   <?php
   
   function foo() {
       $closure = function () {};
       // Local usage
       echo $closure();
   }
   
   function bar(Closure $x) {
       // relayed usage
       echo $x(); 
   }
   
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Complete/FollowClosureDefinition |
+--------------+----------------------------------+
| Rulesets     | none                             |
+--------------+----------------------------------+
| Exakat since | 1.9.2                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Minor                            |
+--------------+----------------------------------+
| Time To Fix  | Quick (30 mins)                  |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _complete-makeclassconstantdefinition:

.. _make-class-constant-definition:

Make Class Constant Definition
++++++++++++++++++++++++++++++

 This command adds DEFINITION link between class constant definitions and their usage.

.. code-block:: php

   <?php
   
   class x {
       public const A = 1;
   }
   
   // Link to the constant definition
   echo x::A;
   
   // Cannot find the original class
   echo $x::A;
   
   ?>



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+--------------------------------------+
| Short name   | Complete/MakeClassConstantDefinition |
+--------------+--------------------------------------+
| Rulesets     | none                                 |
+--------------+--------------------------------------+
| Exakat since | 1.9.2                                |
+--------------+--------------------------------------+
| PHP Version  | All                                  |
+--------------+--------------------------------------+
| Severity     | Minor                                |
+--------------+--------------------------------------+
| Time To Fix  | Quick (30 mins)                      |
+--------------+--------------------------------------+
| Precision    | High                                 |
+--------------+--------------------------------------+


.. _complete-makefunctioncallwithreference:

.. _make-functioncall-with-reference:

Make Functioncall With Reference
++++++++++++++++++++++++++++++++

 Mark parameters as ``isModified`` if the functioncall uses reference.

This works on PHP native functions and custom functions.

This doesn't work on dynamic calls.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------------------+
| Short name   | Complete/MakeFunctioncallWithReference |
+--------------+----------------------------------------+
| Rulesets     | none                                   |
+--------------+----------------------------------------+
| Exakat since | 1.9.7                                  |
+--------------+----------------------------------------+
| PHP Version  | All                                    |
+--------------+----------------------------------------+
| Severity     | Minor                                  |
+--------------+----------------------------------------+
| Time To Fix  | Quick (30 mins)                        |
+--------------+----------------------------------------+
| Precision    | High                                   |
+--------------+----------------------------------------+


.. _complete-overwrittenconstants:

.. _overwritten-constant:

Overwritten Constant
++++++++++++++++++++

 This command adds OVERWRITE link between class constant definitions.

.. code-block:: php

   <?php
   
   class x {
       protected const A = 1;
   }
   
   class y extends x {
       protected const A = 1;
   }
   
   ?>


The `A` constant will be linked between classes x and y, with an OVERWRITE link.

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Complete/OverwrittenConstants |
+--------------+-------------------------------+
| Rulesets     | none                          |
+--------------+-------------------------------+
| Exakat since | 1.9.2                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _complete-overwrittenproperties:

.. _overwritten-properties:

Overwritten Properties
++++++++++++++++++++++

 This command adds OVERWRITE link between property definitions of classes.

.. code-block:: php

   <?php
   
   class x {
       protected $p = 1;
   }
   
   class y extends x {
       protected $p = 1;
   }
   
   ?>


The `$p` property will be linked between classes x and y, with an OVERWRITE link.

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Complete/OverwrittenProperties |
+--------------+--------------------------------+
| Rulesets     | none                           |
+--------------+--------------------------------+
| Exakat since | 1.9.2                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _complete-setarrayclassdefinition:

.. _seta-rray-class-definition:

SetA rray Class Definition
++++++++++++++++++++++++++

 Link arrays() with their class / method definition.

PHP accepts an array structure such as ``[class, method]``, or ``[$object, method]`` as a valid method callback. This analysis build such relations, whenever they are `static <https://www.php.net/manual/en/language.oop5.static.php>`_.

.. code-block:: php

   <?php
   
   class x {
       public function foo() {}
   }
   
   // designate the foo method in the x class
   $f = [\x, 'foo'];
   
   array_
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Complete/SetArrayClassDefinition |
+--------------+----------------------------------+
| Rulesets     | none                             |
+--------------+----------------------------------+
| Exakat since | 1.9.3                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Minor                            |
+--------------+----------------------------------+
| Time To Fix  | Quick (30 mins)                  |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _complete-setparentdefinition:

.. _set-parent-definition:

Set Parent Definition
+++++++++++++++++++++

 This command creates a DEFINITION link between `parent` keyword and the actual `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. 

.. code-block:: php

   <?php
   
   class x { 
       const A = 1;
   }
   
   class y extends x {
       function foo() {
           // 'parent' needs a DEFFINITION link to the class x
           return parent::A;
       }
   }
   
   ?>

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Complete/SetParentDefinition |
+--------------+------------------------------+
| Rulesets     | none                         |
+--------------+------------------------------+
| Exakat since | 1.9.2                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _complete-setstringmethoddefinition:

.. _set-string-method-definition:

Set String Method Definition
++++++++++++++++++++++++++++

 Links a string with a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call to its definition. The link is ``DEFINITION``.

.. code-block:: php

   <?php
       class B { 
           static public function C() {}
       }
   
       $a = 'B::C';
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+------------------------------------+
| Short name   | Complete/SetStringMethodDefinition |
+--------------+------------------------------------+
| Rulesets     | none                               |
+--------------+------------------------------------+
| Exakat since | 1.9.3                              |
+--------------+------------------------------------+
| PHP Version  | All                                |
+--------------+------------------------------------+
| Severity     | Minor                              |
+--------------+------------------------------------+
| Time To Fix  | Quick (30 mins)                    |
+--------------+------------------------------------+
| Precision    | High                               |
+--------------+------------------------------------+


.. _composer-autoload:

.. _composer's-autoload:

Composer's autoload
+++++++++++++++++++

 Is this code using the autoload from Composer.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Composer/Autoload |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _composer-iscomposerclass:

.. _is-composer-class:

Is Composer Class
+++++++++++++++++

 Mark a class as part of Composer's library.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Composer/IsComposerClass |
+--------------+--------------------------+
| Rulesets     | none                     |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _composer-iscomposerinterface:

.. _is-composer-interface:

Is Composer Interface
+++++++++++++++++++++

 Mark interfaces as Composer interfaces.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Composer/IsComposerInterface |
+--------------+------------------------------+
| Rulesets     | none                         |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _composer-iscomposernsname:

.. _composer-namespace:

Composer Namespace
++++++++++++++++++

 Mark this namespace as a Composer namespace.

When the namespace is found in the composer database, it is marked as such. 

.. code-block:: php

   <?php 
   
   namespace Monolog;
   
   use Monolog\Processor\WebProcessor;
   use Monolog\Handler\TestHandler;
   
   class MyLogger extends WebProcessor {
       /**/
   }
   
   ?>


See also `Packagist <https://packagist.org/>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Composer/IsComposerNsname |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _composer-usecomposer:

.. _composer-usage:

Composer Usage
++++++++++++++

 Mark the usage of composer, mostly by having a ``composer.json`` file.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Composer/UseComposer |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _composer-usecomposerlock:

.. _use-composer-lock:

Use Composer Lock
+++++++++++++++++

 Reports if ``composer.lock`` was committed to the archive.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Composer/UseComposerLock |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.9.2                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _constants-caseinsensitiveconstants:

.. _case-insensitive-constants:

Case Insensitive Constants
++++++++++++++++++++++++++

 PHP constants may be case insensitive, when defined with `define() <https://www.php.net/define>`_ and the third argument.

This feature is deprecated since PHP 7.3 and will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
   // case sensitive
   define('A', 1);
   
   // case insensitive
   define('B', 1, true);
   
   echo A;
   // This is not possible
   //echo a;
   
   // both possible
   echo B;
   echo b;
   
   ?>


See also `define <https://www.php.net/define>`_.

Specs
^^^^^
+----------------+------------------------------------+
| Short name     | Constants/CaseInsensitiveConstants |
+----------------+------------------------------------+
| Rulesets       | :ref:`Appinfo`                     |
+----------------+------------------------------------+
| Exakat since   | 1.3.9                              |
+----------------+------------------------------------+
| PHP Version    | All                                |
+----------------+------------------------------------+
| PHP deprecated | From PHP 7.3 to 7.4                |
+----------------+------------------------------------+
| Severity       | Critical                           |
+----------------+------------------------------------+
| Time To Fix    | Slow (1 hour)                      |
+----------------+------------------------------------+
| Precision      | High                               |
+----------------+------------------------------------+


.. _constants-conditionedconstants:

.. _conditioned-constants:

Conditioned Constants
+++++++++++++++++++++

 Indicates if a constant will be defined only if a condition is met.

.. code-block:: php

   <?php
   
   if (time() > 1519629617) {
       define('MY_CONST', false);
   } else {
       define('MY_CONST', time() - 1519629617);
   }
   
   ?>

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Constants/ConditionedConstants |
+--------------+--------------------------------+
| Rulesets     | :ref:`Appinfo`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.4                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Slow (1 hour)                  |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _constants-constrecommended:

.. _use-const:

Use const
+++++++++

 The const keyword may be used to define constant, just like the `define() <https://www.php.net/define>`_ function. 

When defining a constant, it is recommended to use 'const' when the features of the constant are not dynamical (name or value are known at compile time). 
This way, constant will be defined at compile time, and not at execution time. 

.. code-block:: php

   <?php
     //Do
     const A = 1;
     // Don't 
     define('A', 1);
     
   ?>


`define() <https://www.php.net/define>`_ function is useful when the constant is not known at compile time, or when case sensitivity is necessary.

.. code-block:: php

   <?php
     // Read $a in database or config file
     define('A', $a);
   
     // Read $a in database or config file
     define('B', 1, true);
     echo b;
   ?>


See also `Syntax <https://www.php.net/manual/en/language.constants.syntax.php>`_.


Suggestions
^^^^^^^^^^^

* Use const instead of define()

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------+
| Short name   | Constants/ConstRecommended                                                                       |
+--------------+--------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                   |
+--------------+--------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                            |
+--------------+--------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                            |
+--------------+--------------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                                    |
+--------------+--------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                             |
+--------------+--------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phpmyadmin-constants-constrecommended`, :ref:`case-piwigo-constants-constrecommended` |
+--------------+--------------------------------------------------------------------------------------------------+


.. _constants-constantstrangenames:

.. _constants-with-strange-names:

Constants With Strange Names
++++++++++++++++++++++++++++

 List of constants being defined with names that are incompatible with PHP standards. 

.. code-block:: php

   <?php
   
   // Define a valid PHP constant
   define('ABC', 1); 
   const ABCD = 2; 
   
   // Define an invalid PHP constant
   define('ABC!', 1); 
   echo defined('ABC!') ? constant('ABC!') : 'Undefined';
   
   // Const doesn't allow illegal names
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Rename constants to be valid constants
* Adopt a naming conversion scheme, to translate names from an incompatible source to PHP's standard (and back).

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Constants/ConstantStrangeNames |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.4                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Slow (1 hour)                  |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _constants-constantusage:

.. _constants-usage:

Constants Usage
+++++++++++++++

 List of constants being used.

.. code-block:: php

   <?php
   
   const MY_CONST = 'Hello';
   
   // PHP_EOL (native PHP Constant)
   // MY_CONST (custom constant)
   echo PHP_EOL . MY_CONST;
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Constants/ConstantUsage |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _constants-constantnames:

.. _constants-names:

Constants Names
+++++++++++++++

 List of PHP constants being defined.

.. code-block:: php

   <?php
   
   // with const
   const X = 1;
   
   // with define()
   define ('Y', 2);
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Constants/Constantnames |
+--------------+-------------------------+
| Rulesets     | none                    |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _constants-customconstantusage:

.. _custom-constant-usage:

Custom Constant Usage
+++++++++++++++++++++

 Using constants that were not defined in PHP extensions or PHP itself.

.. code-block:: php

   <?php
   
   // display MY_CONSTANT : MY_CONSTANT is a user constant.
   echo MY_CONSTANT;
   
   // display PHP version : PHP_VERSION is a native PHP constant.
   echo PHP_VERSION;
   
   // MY_CONSTANT definition. 
   const MY_CONSTANT;
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Constants/CustomConstantUsage |
+--------------+-------------------------------+
| Rulesets     | none                          |
+--------------+-------------------------------+
| Exakat since | 0.8.4                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Slow (1 hour)                 |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _constants-dynamiccreation:

.. _constant-dynamic-creation:

Constant Dynamic Creation
+++++++++++++++++++++++++

 Registering constant with dynamic values. Dynamic values include values read in external sources (files, databases, remote API, `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ ), random sources (time, `rand() <https://www.php.net/rand>`_, `...) <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_

Dynamic constants are not possible with the ``const`` keyword, though `static <https://www.php.net/manual/en/language.oop5.static.php>`_ constant expression allows for a good range of combinations, including conditions. 

.. code-block:: php

   <?php
   
   $a = range(0, 4);
   foreach($array as $i) {
       define(A$i, $i);
       define(N$i, true);
   }
   
   define(C, 5);
   
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Constants/DynamicCreation |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 1.6.7                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _constants-isextconstant:

.. _is-an-extension-constant:

Is An Extension Constant
++++++++++++++++++++++++

 Mark a constant if it belongs to a known extension.

.. code-block:: php

   <?php
   
   // JSON_HEX_AMP is a constant from ext/json
   echo json_encode($object, JSON_HEX_AMP);
   
   // JSON_HEX_AMP is a constant from ext/json
   echo json_encode($object, JSON_HOAX_AMP);
   
   ?>


See also `Supported PHP Extensions <http://exakat.readthedocs.io/en/latest/Annex.html#supported-php-extensions>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Constants/IsExtConstant |
+--------------+-------------------------+
| Rulesets     | :ref:`First`            |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _constants-isphpconstant:

.. _is-php-constant:

Is PHP Constant
+++++++++++++++

 Mark a constant if it is a PHP constant.

.. code-block:: php

   <?php
   
   // This is an PHP constant
   $a = HTML_ENTITIES;
   
   // This is an PHP function
   $a = CMS_ORDER;
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Constants/IsPhpConstant |
+--------------+-------------------------+
| Rulesets     | none                    |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _constants-magicconstantusage:

.. _magic-constant-usage:

Magic Constant Usage
++++++++++++++++++++

 There are eight magical constants that change depending on where they are used. For example, the value of ``__LINE__`` depends on the line that it's used on in your script. These special constants are case-insensitive.

+ ``__LINE__``
+ ``__FILE__``
+ ``__DIR__``
+ ``__FUNCTION__``
+ ``__CLASS__``
+ ``__TRAIT__``
+ ``__METHOD__``
+ ``__NAMESPACE__``


.. code-block:: php

   <?php
   
   echo 'This code is in file '__FILE__.', line '.__LINE__;
   
   ?>


See also `Magic Constants <https://www.php.net/manual/en/language.constants.predefined.php>`_.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Constants/MagicConstantUsage |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _constants-multipleconstantdefinition:

.. _multiple-constant-definition:

Multiple Constant Definition
++++++++++++++++++++++++++++

 Some constants are defined several times in your code. This will lead to a fatal error, if they are defined during the same execution. 

Multiple definitions may happens at bootstrap, when the application code is collecting information about the current environment. It may also happen at inclusion time, which one set of constant being loaded, while other definition are not, avoiding conflict. Both are false positive. 

.. code-block:: php

   <?php
   
   // OS is defined twice. 
   if (PHP_OS == 'Windows') {
       define('OS', 'Win');
   } else {
       define('OS', 'Other');
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the constants to a class, and include the right class based on control flow.
* Give different names to the constants, and keep the condition close to utilisation.
* Move the constants to an external configuration file : it will be easier to identify that those constants may change.

Specs
^^^^^
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Short name   | Constants/MultipleConstantDefinition                                                                                 |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                       |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                                |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                  |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                                |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                      |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                                 |
+--------------+----------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolibarr-constants-multipleconstantdefinition`, :ref:`case-openconf-constants-multipleconstantdefinition` |
+--------------+----------------------------------------------------------------------------------------------------------------------+


.. _constants-phpconstantusage:

.. _php-constant-usage:

PHP Constant Usage
++++++++++++++++++

 List of PHP constants being used.

.. code-block:: php

   <?php
   
   const MY_CONST = 'Hello';
   
   // PHP_EOL (native PHP Constant)
   // MY_CONST (custom constant, not reported)
   echo PHP_EOL . MY_CONST;
   
   ?>


See also `Predefined Constants <https://www.php.net/manual/en/reserved.constants.php>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Constants/PhpConstantUsage |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _constants-undefinedconstants:

.. _undefined-constants:

Undefined Constants
+++++++++++++++++++

 Constants definition can't be located.

Those constants are not defined in the code, and will raise errors, or use the fallback mechanism of being treated like a string. 

.. code-block:: php

   <?php
   
   const A = 1;
   define('B', 2);
   
   // here, C is not defined in the code and is reported
   echo A.B.C;
   
   ?>


It is recommended to define them all, or to avoid using them.

See also `Constants <https://www.php.net/manual/en/language.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Define the constant
* Fix the name of the constant
* Fix the namespace of the constant (FQN or use)
* Remove the usage of the constant

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Constants/UndefinedConstants |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | Very high                    |
+--------------+------------------------------+


.. _constants-variableconstant:

.. _variable-constants:

Variable Constants
++++++++++++++++++

 Variable constants are actually constants whose value is accessed via the function `constant() <https://www.php.net/constant>`_. Otherwise, there is no way to dynamically access a constant (aka, when the developer has the name of the constant as a incoming parameter, and it requires the value of it). 

.. code-block:: php

   <?php
   
   const A = 'constant_value';
   
   $constant_name = 'A';
   
   $variableConstant = constant($constant_name);
   
   ?>


See also `constant() <https://www.php.net/constant>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Constants/VariableConstant |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _dump-callorder:

.. _call-order:

Call Order
++++++++++

 This is a representation of the code. Each node is a function or method, and each link a is call from a method to another.

The only link is the possible call from a method to the other. All control flow is omitted, including conditional calls and loops.

.. code-block:: php

   <?php
       
       function foo() {
           bar();
           foobar();
       }
       
       function bar() {
           foobar();
       }
       
       function foobar() {
       
       }
   ?>



From the above script, the resulting network will display 'foo() -> bar(), foo() -> foobar(), bar() -> foobar()' calls. 



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------+
| Short name   | Dump/CallOrder  |
+--------------+-----------------+
| Rulesets     | :ref:`Dump`     |
+--------------+-----------------+
| Exakat since | 2.1.4           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _dump-collectatomcounts:

.. _collect-atom-counts:

Collect Atom Counts
+++++++++++++++++++

Specs
^^^^^
+--------------+------------------------+
| Short name   | Dump/CollectAtomCounts |
+--------------+------------------------+
| Rulesets     | :ref:`Dump`            |
+--------------+------------------------+
| Exakat since | 2.1.8                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _dump-collectclasschanges:

.. _dump-collectclasschanges:

Dump/CollectClassChanges
++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Dump/CollectClassChanges |
+--------------+--------------------------+
| Rulesets     | :ref:`Dump`              |
+--------------+--------------------------+
| Exakat since | 2.1.5                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _dump-collectclasschildren:

.. _collect-class-children-count:

Collect Class Children Count
++++++++++++++++++++++++++++

 Count the number of class children for each class.

.. code-block:: php

   <?php
   
   // 2 children
   class a {}
   
   // 1 children
   class b extends a {}
   
   // no children
   class c extends b {}
   
   // no children
   class d extends a {}
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Dump/CollectClassChildren |
+--------------+---------------------------+
| Rulesets     | :ref:`Dump`               |
+--------------+---------------------------+
| Exakat since | 2.0.3                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _dump-collectclassconstantcounts:

.. _collect-class-constant-counts:

Collect Class Constant Counts
+++++++++++++++++++++++++++++

 This analysis collects the number of class constants per class or interface. 

The count applies to classes, anonymous classes and interfaces. They are considered distinct one from another. 

.. code-block:: php

   <?php
   
   class foo {
       // 3 constant
       const A =1, B =2;
   }
   
   interface bar {
       // 3 properties
       const A=1, B=2, C=3;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Dump/CollectClassConstantCounts |
+--------------+---------------------------------+
| Rulesets     | :ref:`Dump`                     |
+--------------+---------------------------------+
| Exakat since | 2.1.2                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _dump-collectclassdepth:

.. _collect-class-depth:

Collect Class Depth
+++++++++++++++++++

 Count the number of level of extends for classes.

.. code-block:: php

   <?php
   
   class a {}
   
   class b extends a {}
   
   class c extends b {}
   
   class d extends a {}
   ?>

Specs
^^^^^
+--------------+------------------------+
| Short name   | Dump/CollectClassDepth |
+--------------+------------------------+
| Rulesets     | :ref:`Dump`            |
+--------------+------------------------+
| Exakat since | 2.0.3                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _dump-collectclassinterfacecounts:

.. _collect-class-interface-counts:

Collect Class Interface Counts
++++++++++++++++++++++++++++++

 Collect the number of interfaces implemented per class.

.. code-block:: php

   <?php
   
   // This class implements 3 interfaces
   class x implements i, j, k {
       // Some code
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Dump/CollectClassInterfaceCounts |
+--------------+----------------------------------+
| Rulesets     | :ref:`Dump`                      |
+--------------+----------------------------------+
| Exakat since | 2.0.3                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Minor                            |
+--------------+----------------------------------+
| Time To Fix  | Quick (30 mins)                  |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _dump-collectclasstraitscounts:

.. _collect-class-traits-counts:

Collect Class Traits Counts
+++++++++++++++++++++++++++

 Counts the number of trait used in a class. 

.. code-block:: php

   <?php
   
   // Use no traits
   class x {}
   
   // Use one trait
   class y {
       use TraitT;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Dump/CollectClassTraitsCounts |
+--------------+-------------------------------+
| Rulesets     | :ref:`Dump`                   |
+--------------+-------------------------------+
| Exakat since | 2.1.7                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _dump-collectclassesdependencies:

.. _collect-classes-dependencies:

Collect Classes Dependencies
++++++++++++++++++++++++++++

 Collect Classes Dependencies

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Dump/CollectClassesDependencies |
+--------------+---------------------------------+
| Rulesets     | :ref:`Dump`                     |
+--------------+---------------------------------+
| Exakat since | 2.1.8                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _dump-collectdefinitionsstats:

.. _dump-collectdefinitionsstats:

Dump/CollectDefinitionsStats
++++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Dump/CollectDefinitionsStats |
+--------------+------------------------------+
| Rulesets     | :ref:`Dump`                  |
+--------------+------------------------------+
| Exakat since | 2.1.7                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _dump-collectfilesdependencies:

.. _collect-files-dependencies:

Collect Files Dependencies
++++++++++++++++++++++++++

 Collect all dependencies between files, based on definitions and usage.

For example, file `A.php`, which defines de class `A`, is a dependence to a file `B.php`, which makes a call to a method from `A`,  or use `A` as a typehint, etc..

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Dump/CollectFilesDependencies |
+--------------+-------------------------------+
| Rulesets     | :ref:`Dump`                   |
+--------------+-------------------------------+
| Exakat since | 2.1.8                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _dump-collectforeachfavorite:

.. _foreach()-favorite:

Foreach() Favorite
++++++++++++++++++

 Collect the name used in `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops. Then, sorts them in order of popularity.

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Dump/CollectForeachFavorite |
+--------------+-----------------------------+
| Rulesets     | :ref:`Dump`                 |
+--------------+-----------------------------+
| Exakat since | 1.9.7                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _dump-collectglobalvariables:

.. _dump-collectglobalvariables:

Dump/CollectGlobalVariables
+++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Dump/CollectGlobalVariables |
+--------------+-----------------------------+
| Rulesets     | :ref:`Dump`                 |
+--------------+-----------------------------+
| Exakat since | 2.1.7                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _dump-collectliterals:

.. _collect-literals:

Collect Literals
++++++++++++++++

 Collects all literals in the application, for inventory purposes.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Dump/CollectLiterals |
+--------------+----------------------+
| Rulesets     | :ref:`Dump`          |
+--------------+----------------------+
| Exakat since | 1.9.5                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Quick (30 mins)      |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _dump-collectlocalvariablecounts:

.. _collect-local-variable-counts:

Collect Local Variable Counts
+++++++++++++++++++++++++++++

 This analysis collects the number of local variables used in a method or a function. 

The count applies to functions, methods, closures and arrow functions. 

Arguments and global variables are not counted. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables are. 

.. code-block:: php

   <?php
   
   function foo($arg) {
       global $w;
       
       // This is a local variable
       $x = rand(1, 2);
       
       return $x + $arg + $w;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Dump/CollectLocalVariableCounts |
+--------------+---------------------------------+
| Rulesets     | :ref:`Dump`                     |
+--------------+---------------------------------+
| Exakat since | 2.1.2                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _dump-collectmbstringencodings:

.. _collect-mbstring-encodings:

Collect Mbstring Encodings
++++++++++++++++++++++++++

 This analysis collects the encoding names, used by ext/mb functions. 

.. code-block:: php

   <?php
   
   mb_stotolower('PHP', 'iso-8859-1');
   
   mb_stotolower('PHP', 'iso-8859-1');
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Dump/CollectMbstringEncodings |
+--------------+-------------------------------+
| Rulesets     | :ref:`Dump`                   |
+--------------+-------------------------------+
| Exakat since | 1.9.9                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _dump-collectmethodcounts:

.. _collect-method-counts:

Collect Method Counts
+++++++++++++++++++++

 This analysis collects the number of methods per class, trait or interface. 

The count applies to classes, anonymous classes, traits and interfaces. They are considered distinct one from another. 

.. code-block:: php

   <?php
   
   class foo {
       // 2 methods
       function __construct() {}
       function foo() {}
   }
   
   interface bar {
       // 1 method
       function a() ;
   }
   
   class barbar {
       // 3 methods
       function __construct() {}
       function foo() {}
       function a() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Dump/CollectMethodCounts |
+--------------+--------------------------+
| Rulesets     | :ref:`Dump`              |
+--------------+--------------------------+
| Exakat since | 2.1.2                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _dump-collectnativecallsperexpressions:

.. _collect-native-calls-per-expressions:

Collect Native Calls Per Expressions
++++++++++++++++++++++++++++++++++++

 Computes the number of PHP native call per expression.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------------------+
| Short name   | Dump/CollectNativeCallsPerExpressions |
+--------------+---------------------------------------+
| Rulesets     | :ref:`Dump`                           |
+--------------+---------------------------------------+
| Exakat since | 2.1.7                                 |
+--------------+---------------------------------------+
| PHP Version  | All                                   |
+--------------+---------------------------------------+
| Severity     | Minor                                 |
+--------------+---------------------------------------+
| Time To Fix  | Quick (30 mins)                       |
+--------------+---------------------------------------+
| Precision    | High                                  |
+--------------+---------------------------------------+


.. _dump-collectparametercounts:

.. _collect-parameter-counts:

Collect Parameter Counts
++++++++++++++++++++++++

 This analysis collects the number of parameter per method. 

The count applies to functions, methods, closures and arrow functions.

.. code-block:: php

   <?php
   
   // parameter count on function : 1
   function foo($a) { }
   
   // parameter count on closure : 2
   function ($b, $c = 2) {}
   
   // parameter count on method : 0 (none)
   class x {
       function moo() { }
   }
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Dump/CollectParameterCounts |
+--------------+-----------------------------+
| Rulesets     | :ref:`Dump`                 |
+--------------+-----------------------------+
| Exakat since | 1.9.6                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _dump-collectparameternames:

.. _collect-parameter-names:

Collect Parameter Names
+++++++++++++++++++++++

 This analysis collects the names of all parameters. It also counts the number of occurrences of each name.

The names are collected from functions, methods, closures and arrow functions. Compulsory and optional parameters are all processed.

.. code-block:: php

   <?php
   
   // parameter $a
   function foo($a) { }
   
   // parameter $b, $c
   function ($b, $c = 2) {}
   
   // parameters in interfaces are counted too.
   // Here, $a will be counted with the one above.
   interfaces x {
       function moo($a);
   }
   ?>

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Dump/CollectParameterNames |
+--------------+----------------------------+
| Rulesets     | :ref:`Dump`                |
+--------------+----------------------------+
| Exakat since | 2.1.5                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _dump-collectphpstructures:

.. _collect-php-structures:

Collect Php Structures
++++++++++++++++++++++

 Collect Php Structures

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Dump/CollectPhpStructures |
+--------------+---------------------------+
| Rulesets     | :ref:`Dump`               |
+--------------+---------------------------+
| Exakat since | 2.1.8                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _dump-collectpropertycounts:

.. _collect-property-counts:

Collect Property Counts
+++++++++++++++++++++++

 This analysis collects the number of properties per class or trait. 

The count applies to classes, anonymous classes and traits. They are considered distinct one from another. 

Properties may be ``static`` or not. Visibility, default values and typehints are omitted.

.. code-block:: php

   <?php
   
   class foo {
       // 3 properties
       private $p1, $p2, $p3;
   }
   
   trait foo {
       // 3 properties
       protected $p1;
       public $p2 = 1, $p3;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Dump/CollectPropertyCounts |
+--------------+----------------------------+
| Rulesets     | :ref:`Dump`                |
+--------------+----------------------------+
| Exakat since | 2.1.2                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _dump-collectreadability:

.. _collect-readability:

Collect Readability
+++++++++++++++++++

 Measure readability for methods, functions and closures, then report them.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Dump/CollectReadability |
+--------------+-------------------------+
| Rulesets     | :ref:`Dump`             |
+--------------+-------------------------+
| Exakat since | 2.1.7                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _dump-collectusecounts:

.. _collect-use-counts:

Collect Use Counts
++++++++++++++++++

 Count the number of use expression in a file. This count 4 uses. 

.. code-block:: php

   <?php
   
   use A as B;
   use F\C, F\D, F\E;
   
   ?>

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Dump/CollectUseCounts |
+--------------+-----------------------+
| Rulesets     | :ref:`Dump`           |
+--------------+-----------------------+
| Exakat since | 2.1.9                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _dump-collectvariables:

.. _collect-variables:

Collect Variables
+++++++++++++++++

 Collect all variables from the code. Their type is mentionned, as variable, object or array, depending on their usage. 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Dump/CollectVariables |
+--------------+-----------------------+
| Rulesets     | :ref:`Dump`           |
+--------------+-----------------------+
| Exakat since | 2.1.7                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _dump-constantorder:

.. _constant-order:

Constant Order
++++++++++++++

 Order of dependency of constants. 

Constants, either global or class, may be built using `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expression. In turn, this means that constants have now a build order. For example : 

.. code-block:: php

   <?php
   
   // A is an independant global constant
   const A = 1;
   // B is an dependant global constant : it is built with A
   const B = A + 1;
   
   class x {
       // x::C is an dependant class constant : it is built with A 
       const C = A + 3;
   }
   
   ?>


The code above leads to the following order : ``A`` - ``B``, ``C``. ``A`` can be built without constraints, while ``B`` and ``C`` must be build when ``A`` is available. Note that ``B`` and ``C`` are both dependant on ``A``, but are not dependant on each other.

The resulting tree displays the different relationship between the constants. 

Note : ``define``constants are not considered here. Only ``const`` constants, global or class.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Dump/ConstantOrder |
+--------------+--------------------+
| Rulesets     | :ref:`Dump`        |
+--------------+--------------------+
| Exakat since | 2.0.7              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Quick (30 mins)    |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _dump-cyclomaticcomplexity:

.. _cyclomatic-complexity:

Cyclomatic Complexity
+++++++++++++++++++++

 Calculate cyclomatic complexity for each methods, function, and closures.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Dump/CyclomaticComplexity |
+--------------+---------------------------+
| Rulesets     | :ref:`Dump`               |
+--------------+---------------------------+
| Exakat since | 1.9.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _dump-dereferencinglevels:

.. _dump-dereferencinglevels:

Dump/DereferencingLevels
++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Dump/DereferencingLevels |
+--------------+--------------------------+
| Rulesets     | :ref:`Dump`              |
+--------------+--------------------------+
| Exakat since | 1.9.6                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _dump-environnementvariables:

.. _environment-variable-usage:

Environment Variable Usage
++++++++++++++++++++++++++

 Collects all environment variables in the application, for inventory purposes.

.. code-block:: php

   <?php
   
   $implicit_global = 1;
   global $explicit_global;
   
   function foo() {
       $local_variable = 2;
   }
   
   ?>


See also `Variable scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Dump/EnvironnementVariables |
+--------------+-----------------------------+
| Rulesets     | :ref:`Dump`                 |
+--------------+-----------------------------+
| Exakat since | 1.9.5                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _dump-fossilizedmethods:

.. _dump-fossilizedmethods:

Dump/FossilizedMethods
++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+------------------------+
| Short name   | Dump/FossilizedMethods |
+--------------+------------------------+
| Rulesets     | :ref:`Dump`            |
+--------------+------------------------+
| Exakat since | 2.1.5                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _dump-inclusions:

.. _dump-inclusions:

Dump/Inclusions
+++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------+
| Short name   | Dump/Inclusions |
+--------------+-----------------+
| Rulesets     | :ref:`Dump`     |
+--------------+-----------------+
| Exakat since | 2.0.2           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _dump-indentationlevels:

.. _indentation-levels:

Indentation Levels
++++++++++++++++++

 Collect all level of nesting for methods and functions.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+------------------------+
| Short name   | Dump/IndentationLevels |
+--------------+------------------------+
| Rulesets     | :ref:`Dump`            |
+--------------+------------------------+
| Exakat since | 1.9.3                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _dump-neworder:

.. _new-order:

New Order
+++++++++

 Order in which new calls are done. 

.. code-block:: php

   <?php
   
   class x {}
   
   // class Y has precedence over class X, as it needs to be called first to get to X
   class y {
       function foo() {
           return new x();
       }
   }
   
   
   ?>

Specs
^^^^^
+--------------+-----------------+
| Short name   | Dump/NewOrder   |
+--------------+-----------------+
| Rulesets     | :ref:`Dump`     |
+--------------+-----------------+
| Exakat since | 2.0.2           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _dump-parameterargumentslinks:

.. _links-between-parameter-and-argument:

Links Between Parameter And Argument
++++++++++++++++++++++++++++++++++++

 Collect various stats about arguments and parameter usage. 

A parameter is one slot in the method definition. An argument is a slot in the method call. Both are linked by the method and their respective position in the argument list.

+ Total number of argument usage, linked to a parameter : this excludes arguments from external libraries and native PHP functions. For reference.
+ Number of identical parameter : cases where argument and parameter have the same name. 
+ Number of different parameter : cases where argument and parameter have the different name. 
+ Number of expression argument : cases where argument is an expression
+ Number of constant argument : cases where the argument is a constant

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       // some code
   }
   
   // $a is the same as the parameter
   // $c is different from the paramter $b
   foo($a, $c);
   
   const C = 1;
   
   // Foo is called with a constant (1rst argument)
   // Foo is called with a expression (2nd argument)
   foo(C, 1+3);
   
   ?>

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Dump/ParameterArgumentsLinks |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 2.0.6                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _dump-typehintingstats:

.. _typehinting-stats:

Typehinting Stats
+++++++++++++++++

 This module collects statistics about typehinting usage.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Dump/TypehintingStats |
+--------------+-----------------------+
| Rulesets     | :ref:`Dump`           |
+--------------+-----------------------+
| Exakat since | 1.9.9                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _dump-typehintorder:

.. _typehint-order:

Typehint Order
++++++++++++++

 Topological order, based on typehints. 

Each function, method that use typehint is a link between a type of data and another one. The argument typehint acts as a filter, and the returned type hint is the next step.

.. code-block:: php

   <?php
   
   // This library imposes the following order : A -> B -> C 
   function foo(A $a) : B { }
   function bar(B $b) : C { }
   
   ?>

Specs
^^^^^
+--------------+--------------------+
| Short name   | Dump/Typehintorder |
+--------------+--------------------+
| Rulesets     | :ref:`Dump`        |
+--------------+--------------------+
| Exakat since | 2.0.2              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Quick (30 mins)    |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _exceptions-definedexceptions:

.. _defined-exceptions:

Defined Exceptions
++++++++++++++++++

 This is the list of defined exceptions.

.. code-block:: php

   <?php
   
   class myException extends \Exception {}
   
   // A defined exception
   throw new myException();
   
   // not a defined exception : it is already defined. 
   throw new \RuntimeException();
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Exceptions/DefinedExceptions |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _exceptions-multiplecatch:

.. _multiple-exceptions-catch():

Multiple Exceptions Catch()
+++++++++++++++++++++++++++

 It is possible to have several distinct exceptions class caught by the same catch, preventing code repetition. 

This is a new feature since PHP 7.1.

.. code-block:: php

   <?php
   
   // PHP 7.1 and more recent
   try {  
       throw new someException(); 
   } catch (Single $s) {
       doSomething();
   } catch (oneType | anotherType $s) {
       processIdentically();
   } finally {
   
   }
   
   // PHP 7.0 and older
   try {  
       throw new someException(); 
   } catch (Single $s) {
       doSomething();
   } catch (oneType $s) {
       processIdentically();
   } catch (anotherType $s) {
       processIdentically();
   } finally {
   
   }
   
   ?>


This is a backward incompatible feature of PHP 7.1.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Exceptions/MultipleCatch |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Major                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _exceptions-overwriteexception:

.. _overwritten-exceptions:

Overwritten Exceptions
++++++++++++++++++++++

 In catch blocks, it is good practice to avoid overwriting the incoming exception, as information about the exception will be lost.

.. code-block:: php

   <?php
   
   try {
       doSomething();
   } catch (SomeException $e) { 
       // $e is overwritten 
       $e = new anotherException($e->getMessage()); 
       throw $e;
   } catch (SomeOtherException $e) { 
       // $e is chained with the next exception 
       $e = new Exception($e->getMessage(), 0, $e); 
       throw $e;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Use another variable name to create new values inside the catch
* Use anonymous catch clause (no variable caught) in PHP 8.0, to make this explicit

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Exceptions/OverwriteException |
+--------------+-------------------------------+
| Rulesets     | :ref:`Analyze`                |
+--------------+-------------------------------+
| Exakat since | 0.8.4                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Minor                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _exceptions-throwfunctioncall:

.. _throw-functioncall:

Throw Functioncall
++++++++++++++++++

 The ``throw`` keyword expects to use an exception. Calling a function to prepare that exception before throwing it is possible, but forgetting the new keyword is also possible. 

.. code-block:: php

   <?php
   
   // Forgotten new
   throw \RuntimeException('error!');
   
   // Code is OK, function returns an exception
   throw getException(ERROR_TYPE, 'error!');
   
   function getException(ERROR_TYPE, $message) {
       return new \RuntimeException($messsage);
   }
   
   ?>


When the ``new`` keyword is forgotten, then the class constructor is used as a function name, and now exception is emitted, but an ``Undefined function`` fatal error is emitted. 

See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.


Suggestions
^^^^^^^^^^^

* Add the new operator to the call
* Make sure the function is really a functioncall, not a class name
* Use return typehints for functions, so that Exception may be detected

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------+
| Short name   | Exceptions/ThrowFunctioncall                                                                      |
+--------------+---------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                  |
+--------------+---------------------------------------------------------------------------------------------------+
| Precision    | Medium                                                                                            |
+--------------+---------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-sugarcrm-exceptions-throwfunctioncall`, :ref:`case-zurmo-exceptions-throwfunctioncall` |
+--------------+---------------------------------------------------------------------------------------------------+


.. _exceptions-thrownexceptions:

.. _thrown-exceptions:

Thrown Exceptions
+++++++++++++++++

 Usage of throw keyword.

.. code-block:: php

   <?php
   
   throw new MyException('Error happened');
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Exceptions/ThrownExceptions |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Slow (1 hour)               |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _exceptions-uselesscatch:

.. _useless-catch:

Useless Catch
+++++++++++++

 Catch clause should handle the exception with some work. 

Among the task of a catch clause : log the exception, clean any mess that was introduced, fail graciously. 

.. code-block:: php

   <?php
   
   function foo($a) {
       try {
           $b = doSomething($a);
       } catch (Throwable $e) {
           // No log of the exception : no one knows it happened.
           
           // return immediately ? 
           return false;
       }
       
       $b->complete();
       
       return $b;
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_ and `Best practices for PHP exception handling <https://www.moxio.com/blog/34/best-practices-for-php-exception-handling>`_.


Suggestions
^^^^^^^^^^^

* Add a log call to the catch block
* Handle correctly the exception

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Exceptions/UselessCatch                                                                   |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 1.1.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                             |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zurmo-exceptions-uselesscatch`, :ref:`case-prestashop-exceptions-uselesscatch` |
+--------------+-------------------------------------------------------------------------------------------+


.. _extensions-extamqp:

.. _ext-amqp:

ext/amqp
++++++++

 Extension ``amqp``.

PHP AMQP Binding Library. This is an interface with the `RabbitMQ AMQP client library <https://github.com/alanxz/rabbitmq-c>`_. It is a C-language AMQP client library for use with v2.0+ of the RabbitMQ broker.


.. code-block:: php

   <?php
   $cnn = new AMQPConnection();
   $cnn->connect();
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = new AMQPChannel($cnn);
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = new AMQPChannel($cnn);
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = null;
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   ?>


See also `PHP AMQP Binding Library <https://github.com/pdezwart/php-amqp>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extamqp |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extapache:

.. _ext-apache:

ext/apache
++++++++++

 Extension Apache.

These functions are only available when running PHP as an Apache module.

.. code-block:: php

   <?php
     $ret = apache_getenv(SERVER_ADDR);
     echo $ret;
   ?>


See also `Extension Apache <https://www.php.net/manual/en/book.apache.php>`_ and `Apache server <https://www.apache.org/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extapache |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extapc:

.. _ext-apc:

ext/apc
+++++++

 Extension Alternative PHP Cache.

The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.

This extension is considered unmaintained and dead. 

.. code-block:: php

   <?php
      $bar = 'BAR';
      apc_add('foo', $bar);
      var_dump(apc_fetch('foo'));
      echo PHP_EOL;
   
      $bar = 'NEVER GETS SET';
      apc_add('foo', $bar);
      var_dump(apc_fetch('foo'));
      echo PHP_EOL;
   ?>


See also `Alternative PHP Cache <https://www.php.net/apc>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extapc |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | 7.0-              |
+--------------+-------------------+
| Severity     | Major             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extapcu:

.. _ext-apcu:

ext/apcu
++++++++

 Extension ``APCU``.

``APCu`` is ``APC`` stripped of opcode caching. The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.

.. code-block:: php

   <?php
   $bar = 'BAR';
   apcu_add('foo', $bar);
   var_dump(apcu_fetch('foo'));
   echo \n;
   $bar = 'NEVER GETS SET';
   apcu_add('foo', $bar);
   var_dump(apcu_fetch('foo'));
   echo \n;
   ?>


See also `APCU <http://www.php.net/manual/en/book.apcu.php>`_, `ext/apcu <https://pecl.php.net/package/APCu>`_ and `krakjoe/apcu <https://github.com/krakjoe/apcu>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extapcu |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extarray:

.. _ext-array:

ext/array
+++++++++

 Core functions processing arrays.

These functions manipulate arrays in various ways. Arrays are essential for storing, managing, and operating on sets of variables.

This is not a real extension : it is a documentation section, that helps classifying the functions.

.. code-block:: php

   <?php
   function odd($var)
   {
       // returns whether the input integer is odd
       return($var & 1);
   }
   
   function even($var)
   {
       // returns whether the input integer is even
       return(!($var & 1));
   }
   
   $array1 = array('a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5);
   $array2 = array(6, 7, 8, 9, 10, 11, 12);
   
   echo 'Odd :'.PHP_EOL;
   print_r(array_filter($array1, 'odd'));
   echo 'Even:'.PHP_EOL;
   print_r(array_filter($array2, 'even'));
   ?>


See also `Arrays <https://www.php.net/manual/en/book.array.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extarray |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extast:

.. _ext-php-ast:

ext/php-ast
+++++++++++

 PHP-AST extension (PHP 7.0 +).

.. code-block:: php

   <?php
   
   $code = <<<'EOC'
   <?php
   $var = 42;
   EOC;
   
   var_dump(ast\parse_code($code, $version=50));
   
   ?>


See also `ext/ast <https://pecl.php.net/package/ast>`_ and `Extension exposing PHP 7 abstract syntax tree <https://github.com/nikic/php-ast>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extast |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | 7.0+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extasync:

.. _ext-async:

ext/async
+++++++++

 Concurrent Task Extension for PHP.

This extension provides concurrent Zend VM executions using native C fibers in PHP.

.. code-block:: php

   <?php
   namespace Concurrent;
   register_shutdown_function(function () {
       echo "===> Shutdown function(s) execute here.\n";
   });
   $work = function (string $title): void {
       var_dump($title);
   };
   Task::await(Task::async(function () use ($work) {
       $defer = new Deferred();
       
       Task::await(Task::async($work, 'A'));
       Task::await(Task::async($work, 'B'));
       
       Task::async(function () {
           $defer = new Deferred();
           
           Task::async(function () use ($defer) {
               (new Timer(1000))->awaitTimeout();
               
               $defer->resolve('H :)');
           });
           
           var_dump(Task::await($defer->awaitable()));
       });
       
       Task::async(function () use ($defer) {
           var_dump(Task::await($defer->awaitable()));
       });
       
       $timer = new Timer(500);
       
       Task::async(function () use ($timer, $defer, $work) {
           $timer->awaitTimeout();
           
           $defer->resolve('F');
           
           Task::async($work, 'G');
       });
       
       var_dump('ROOT TASK DONE');
   }));
   Task::async($work, 'C');
   Task::async(function () use ($work) {
       (new Timer(0))->awaitTimeout();
       
       Task::async($work, 'E');
   });
   Task::async(function ($v) {
       var_dump(Task::await($v));
   }, Deferred::value('D'));
   var_dump('=> END OF MAIN SCRIPT');
   
   ?>


See also `ext-async repository <https://github.com/concurrent-php/ext-async>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extasync |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 1.5.6               |
+--------------+---------------------+
| PHP Version  | 7.3+                |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Quick (30 mins)     |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extbcmath:

.. _ext-bcmath:

ext/bcmath
++++++++++

 Extension BC Math.

For arbitrary precision mathematics PHP offers the Binary Calculator which supports numbers of any size and precision up to ``2147483647-1`` (or ``0x7FFFFFFF-1``) decimals, represented as strings.

.. code-block:: php

   <?php
   
   echo bcpow('2', '123'); 
   //10633823966279326983230456482242756608
   
   echo 2**123;
   //1.0633823966279E+37
   ?>


See also `BC Math Functions <http://www.php.net/bcmath>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extbcmath |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extbzip2:

.. _ext-bzip2:

ext/bzip2
+++++++++

 Extension ext/bzip2.

Bzip2 Functions for PHP.

.. code-block:: php

   <?php
   
   $file = '/tmp/foo.bz2';
   $bz = bzopen($file, 'r') or die('Couldn\'t open $file for reading');
   
   bzclose($bz);
   
   ?>


See also `Bzip2 Functions <https://www.php.net/bzip2>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extbzip2 |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extcairo:

.. _ext-cairo:

ext/cairo
+++++++++

 Extension ext/cairo.

`Cairo <https://www.php.net/Cairo>`_ is a native PHP extension to create and modify graphics using the `Cairo Graphics Library <https://cairographics.org/>`_.

.. code-block:: php

   <?php
   // Example from https://github.com/gtkforphp/cairo/blob/master/examples/big-line.php
   $width = 100;
   $height = 100;
   $sur = new CairoPSSurface(temp.ps, $width, $height);
   
   $con = new CairoContext($sur);
   $con->setSourceRgb(0,0,1);
   $con->moveTo(50,50);
   $con->lineTo(50000,50000);
   $con->stroke();
   $con->setSourceRgb(0,1,0);
   $con->moveTo(50,50);
   $con->lineTo(-50000,50000);
   $con->stroke();
   $con->setSourceRgb(1,0,0);
   $con->moveTo(50,50);
   $con->lineTo(50000,-50000);
   $con->stroke();
   $con->setSourceRgb(1,1,0);
   $con->moveTo(50,50);
   $con->lineTo(-50000,-50000);
   $con->stroke();
   
   $sur->writeToPng(dirname(__FILE__)  . /big-line-php.png);
   ?>


See also `cairo <https://www.php.net/manual/en/book.cairo.php>`_, `gtkforphp/cairo <https://github.com/gtkforphp/cairo>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extcairo |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | Very high           |
+--------------+---------------------+


.. _extensions-extcalendar:

.. _ext-calendar:

ext/calendar
++++++++++++

 Extension ext/calendar.

The calendar extension presents a series of functions to simplify converting between different calendar formats. 

.. code-block:: php

   <?php
   $number = cal_days_in_month(CAL_GREGORIAN, 8, 2003); // 31
   echo "There were {$number} days in August 2003";
   ?>


See also `Calendar Functions <http://www.php.net/manual/en/ref.calendar.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extcalendar |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extcmark:

.. _ext-cmark:

ext/cmark
+++++++++

 Extension Cmark, for Common Mark.

cmark provides access to the reference implementation of CommonMark, a rationalized version of Markdown syntax with a specification.

.. code-block:: php

   <?php
   $text = new CommonMark\Node\Text;
   $text->literal = 'Hello World';
   $document = new CommonMark\Node\Document;
   $document->appendChild(
   	(new CommonMark\Node\Paragraph)
   		->appendChild($text));
   echo CommonMark\Render\HTML($document);
   ?>


See also `Cmark <https://github.com/commonmark/cmark>`_ and `ext/cmark <https://github.com/krakjoe/cmark>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extcmark |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 1.2.7               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extcom:

.. _ext-com:

ext/com
+++++++

 Extension COM and ``.Net`` (Windows).

COM is an acronym for 'Component Object Model'; it is an object orientated layer (and associated services) on top of DCE RPC (an open standard) and defines a common calling convention that enables code written in any language to call and interoperate with code written in any other language (provided those languages are COM aware).

.. code-block:: php

   <?php 
   $domainObject = new COM(WinNT://Domain); 
   foreach ($domainObject as $obj) { 
      echo $obj->Name . <br />; 
   } 
   ?>


See also `COM and .Net (Windows) <https://www.php.net/manual/en/book.com.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extcom |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extcrypto:

.. _ext-crypto:

ext/crypto
++++++++++

 Extension ext/crypto (PECL).

Objective PHP binding of OpenSSL Crypto library.

.. code-block:: php

   <?php
   use Crypto\Cipher;
   use Crypto\AlgorihtmException;
   $algorithm = 'aes-256-cbc';
   if (!Cipher::hasAlgorithm($algorithm)) {
   	die('Algorithm $algorithm not found' . PHP_EOL);
   }
   try {
   	$cipher = new Cipher($algorithm);
   	// Algorithm method for retrieving algorithm
   	echo 'Algorithm: ' . $cipher->getAlgorithmName() . PHP_EOL;
   	// Params
   	$key_len = $cipher->getKeyLength();
   	$iv_len = $cipher->getIVLength();
   	
   	echo 'Key length: ' . $key_len . PHP_EOL;
   	echo 'IV length: '  . $iv_len . PHP_EOL;
   	echo 'Block size: ' . $cipher->getBlockSize() . PHP_EOL;
   	// This is just for this example. You should never use such key and IV!
   	$key = str_repeat('x', $key_len);
   	$iv = str_repeat('i', $iv_len);
   	// Test data
   	$data1 = 'Test';
   	$data2 = 'Data';
   	$data = $data1 . $data2;
   	// Simple encryption
   	$sim_ct = $cipher->encrypt($data, $key, $iv);
   	
   	// init/update/finish encryption
   	$cipher->encryptInit($key, $iv);
   	$iuf_ct  = $cipher->encryptUpdate($data1);
   	$iuf_ct .= $cipher->encryptUpdate($data2);
   	$iuf_ct .= $cipher->encryptFinish();
   	// Raw data output (used base64 format for printing)
   	echo 'Ciphertext (sim): ' . base64_encode($sim_ct) . PHP_EOL;
   	echo 'Ciphertext (iuf): ' . base64_encode($iuf_ct) . PHP_EOL;
   	// $iuf_out == $sim_out
   	$ct = $sim_ct;
   	// Another way how to create a new cipher object (using the same algorithm and mode)
   	$cipher = Cipher::aes(Cipher::MODE_CBC, 256);
   	// Simple decryption
   	$sim_text = $cipher->decrypt($ct, $key, $iv);
   	
   	// init/update/finish decryption
   	$cipher->decryptInit($key, $iv);
   	$iuf_text = $cipher->decryptUpdate($ct);
   	$iuf_text .= $cipher->decryptFinish();
   	// Raw data output ($iuf_out == $sim_out)
   	echo 'Text (sim): ' . $sim_text . PHP_EOL;
   	echo 'Text (iuf): ' . $iuf_text . PHP_EOL;
   }
   catch (AlgorithmException $e) {
   	echo $e->getMessage() . PHP_EOL;
   }
   
   ?>


See also `pecl crypto <https://pecl.php.net/package/crypto>`_ and `php-crypto <https://github.com/bukka/php-crypto>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extcrypto |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extcsprng:

.. _ext-csprng:

ext/csprng
++++++++++

 CSPRNG Functions : cryptographically secure pseudo-random number generator.

The CSPRNG API provides an easy and reliable way to generate crypto-strong random integers and bytes for use within cryptographic contexts.

.. code-block:: php

   <?php
   $bytes = random_bytes(5);
   var_dump(bin2hex($bytes));
   
   //string(10) 385e33f741
   ?>


See also `CSPRNG <https://www.php.net/manual/en/book.csprng.php>`_ and `Cryptographically secure pseudorandom number generator <https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extcsprng |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 1.3.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extctype:

.. _ext-ctype:

ext/ctype
+++++++++

 Extension ext/ctype.

Ext/ctype checks whether a character or string falls into a certain character class according to the current locale.

.. code-block:: php

   <?php
   $strings = array('AbCd1zyZ9', 'foo!#$bar');
   foreach ($strings as $testcase) {
       if (ctype_alnum($testcase)) {
           echo "The string $testcase consists of all letters or digits.\n";
       } else {
           echo "The string $testcase does not consist of all letters or digits.\n";
       }
   }
   ?>


See also `Ctype funtions <https://www.php.net/manual/en/ref.ctype.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extctype |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extcurl:

.. _ext-curl:

ext/curl
++++++++

 Extension curl.

PHP supports libcurl, a library created by Daniel Stenberg. It allows the connection and communication to many different types of servers with many different types of protocols.

.. code-block:: php

   <?php
   
   $ch = curl_init("http://www.example.com/");
   $fp = fopen("example_homepage.txt", "w");
   
   curl_setopt($ch, CURLOPT_FILE, $fp);
   curl_setopt($ch, CURLOPT_HEADER, 0);
   
   curl_exec($ch);
   curl_close($ch);
   fclose($fp);
   ?>


See also `Curl for PHP <https://www.php.net/manual/en/book.curl.php>`_ and `curl <https://curl.haxx.se/libcurl/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extcurl |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extcyrus:

.. _ext-cyrus:

ext/cyrus
+++++++++

 Extension ext/cyrus.

The Cyrus IMAP server is electronic mail server software developed by Carnegie Mellon University. 

.. code-block:: php

   <?php
   
   $connexion = cyrus_connect ('localhost');
   
   ?>


See also `Cyrus <https://www.php.net/manual/en/book.cyrus.php>`_ and `Cyrus IMAP server <https://en.wikipedia.org/wiki/Cyrus_IMAP_server>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extcyrus |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extdate:

.. _ext-date:

ext/date
++++++++

 Extension ext/date.

These functions allows the manipulation of date and time from the server where the PHP scripts are running. 

.. code-block:: php

   <?php
   $dt = new DateTime('2015-11-01 00:00:00', new DateTimeZone('America/New_York'));
   echo 'Start: ', $dt->format('Y-m-d H:i:s P'), PHP_EOL;
   $dt->add(new DateInterval('PT3H'));
   echo 'End:   ', $dt->format('Y-m-d H:i:s P'), PHP_EOL;
   ?>


See also `Date and Time <https://www.php.net/manual/en/book.datetime.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extdate |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extdb2:

.. _ext-db2:

ext/db2
+++++++

 Extension for IBM DB2, Cloudscape and Apache Derby.

This extension gives access to IBM DB2 Universal Database, IBM Cloudscape, and Apache Derby databases using the DB2 Call Level Interface (DB2 CLI).

.. code-block:: php

   <?php
   $conn = db2_connect($database, $user, $password);
   
   if ($conn) {
       $stmt = db2_exec($conn, 'SELECT count(*) FROM animals');
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       
       // Turn AUTOCOMMIT off
       db2_autocommit($conn, DB2_AUTOCOMMIT_OFF);
      
       // Delete all rows from ANIMALS
       db2_exec($conn, 'DELETE FROM animals');
       
       $stmt = db2_exec($conn, 'SELECT count(*) FROM animals');
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       
       // Roll back the DELETE statement
       db2_rollback( $conn );
       
       $stmt = db2_exec( $conn, 'SELECT count(*) FROM animals' );
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       db2_close($conn);
   }
   ?>


See also `IBM Db2 <https://www.php.net/manual/en/book.ibm-db2.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extdb2 |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.1.8             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extdba:

.. _ext-dba:

ext/dba
+++++++

 Extension ext/dba.

These functions build the foundation for accessing Berkeley DB style databases.

.. code-block:: php

   <?php
   
   $id = dba_open('/tmp/test.db', 'n', 'db2');
   
   if (!$id) {
       echo 'dba_open failed'.PHP_EOL;
       exit;
   }
   
   dba_replace('key', 'This is an example!', $id);
   
   if (dba_exists('key', $id)) {
       echo dba_fetch('key', $id);
       dba_delete('key', $id);
   }
   
   dba_close($id);
   ?>


See also `Database (dbm-style) Abstraction Layer <https://www.php.net/manual/en/book.dba.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extdba |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Major             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extdecimal:

.. _ext-decimal:

ext/decimal
+++++++++++

 Extension php-decimal, by ``Rudi Theunissen``.

This library provides a PHP extension that adds support for correctly-rounded, arbitrary-precision decimal floating point arithmetic. Applications that rely on accurate numbers (ie. money, measurements, or mathematics) can use Decimal instead of float or string to represent numerical values.

.. code-block:: php

   <?php
   
   use Decimal\Decimal;
   
   $op1 = new Decimal(0.1, 4);
   $op2 = 0.123456789;
   
   print_r($op1 + $op2);
   
   
   use Decimal\Decimal;
   
   /**
    * @param int $n The factorial to calculate, ie. $n!
    * @param int $p The precision to calculate the factorial to.
    *
    * @return Decimal
    */
   function factorial(int $n, int $p = Decimal::DEFAULT_PRECISION): Decimal
   {
       return $n < 2 ? new Decimal($n, $p) : $n * factorial($n - 1, $p);
   }
   
   echo factorial(10000, 32);
   
   ?>


See also `PHP Decimal <http://php-decimal.io>`_ and `libmpdec <http://www.bytereef.org/mpdecimal/quickstart.html>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extdecimal |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.5.2                 |
+--------------+-----------------------+
| PHP Version  | 7.0+                  |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extdio:

.. _ext-dio:

ext/dio
+++++++

 Extension DIO : Direct Input Output.

PHP supports the direct io functions as described in the Posix Standard (Section 6) for performing I/O functions at a lower level than the C-Language stream I/O functions

.. code-block:: php

   <?php
   
   $fd = dio_open('/dev/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);
   
   dio_close($fd);
   ?>


See also `DIO <https://www.php.net/manual/en/refs.fileprocess.file.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extdio |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extdom:

.. _ext-dom:

ext/dom
+++++++

 Extension Document Object Model.

The DOM extension allows the manipulation of XML documents through the DOM API with PHP.

.. code-block:: php

   <?php
   
   $dom = new DOMDocument('1.0', 'utf-8');
   
   $element = $dom->createElement('test', 'This is the root element!');
   
   // We insert the new element as root (child of the document)
   $dom->appendChild($element);
   
   echo $dom->saveXML();
   ?>


See also `Document Object Model <https://www.php.net/manual/en/book.dom.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extdom |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extds:

.. _ext-ds:

ext/ds
++++++

 Extension Data Structures : `Data structures <http://docs.php.net/manual/en/book.ds.php>`_.

See also : `Efficient data structures for PHP 7 <https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd#.x69w9j6ui>`_.

.. code-block:: php

   <?php
   
   $vector = new \Ds\Vector();
   
   $vector->push('a');
   $vector->push('b', 'c');
   
   $vector[] = 'd';
   
   print_r($vector);
   
   ?>

Specs
^^^^^
+--------------+------------------+
| Short name   | Extensions/Extds |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.10.4           |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _extensions-exteaccelerator:

.. _ext-eaccelerator:

ext/eaccelerator
++++++++++++++++

 Extension Eaccelerator.

eAccelerator is a free open-source PHP accelerator & optimizer. 

See also `Eaccelerator <http://eaccelerator.net/>`_ and `eaccelerator/eaccelerato <https://github.com/eaccelerator/eaccelerator>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Extensions/Exteaccelerator |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _extensions-exteio:

.. _ext-eio:

ext/eio
+++++++

 Extension EIO.

This is a PHP extension wrapping functions of the `libeio <http://software.schmorp.de/pkg/libeio.html>`_ library written by Marc Lehmann.

Libeio is a an asynchronous I/O library. Features basically include asynchronous versions of POSIX API(read, write, open, close, stat, unlink, fdatasync, mknod, readdir etc.); sendfile (native on Solaris, Linux, HP-UX, FreeBSD); readahead. libeio itself emulates the system calls, if they are not available on specific(UNIX-like) platform.

.. code-block:: php

   <?php
   $str      = str_repeat('1', 20);
   $filename = '/tmp/tmp_file' .uniqid();
   @unlink($filename);
   touch($filename);
   eio_open($filename, EIO_O_RDWR, NULL, EIO_PRI_DEFAULT, function($filename, $fd) use ($str) {
   	eio_write($fd, $str, strlen($str), 0, null, function($fd, $written) use ($str, $filename) {
   		var_dump([
   			'written'  => $written,
   			'strlen'   => strlen($str),
   			'filesize' => filesize($filename),
   			'count'    => substr_count(file_get_contents($filename), '1')
   			]);
   	}, $fd);
   }, $filename);
   eio_event_loop();
   ?>


See also `libeio <http://software.schmorp.de/pkg/libeio.html>`_, `PHP extension for libeio <https://github.com/rosmanov/pecl-eio>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Exteio |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.3.3             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extenchant:

.. _ext-enchant:

ext/enchant
+++++++++++

 Extension Enchant.

Enchant is the PHP binding for the `Enchant spelling library <https://www.php.net/manual/en/book.enchant.php>`_. Enchant steps in to provide uniformity and conformity on top of all spelling libraries, and implement certain features that may be lacking in any individual provider library. 

.. code-block:: php

   <?php
   $tag = 'en_US';
   $r = enchant_broker_init();
   $bprovides = enchant_broker_describe($r);
   echo 'Current broker provides the following backend(s):'.PHP_EOL;
   print_r($bprovides);
   
   $dicts = enchant_broker_list_dicts($r);
   print_r($dicts);
   if (enchant_broker_dict_exists($r,$tag)) {
       $d = enchant_broker_request_dict($r, $tag);
       $dprovides = enchant_dict_describe($d);
       echo 'dictionary $tag provides:'.PHP_EOL;
       $wordcorrect = enchant_dict_check($d, 'soong');
       print_r($dprovides);
       if (!$wordcorrect) {
           $suggs = enchant_dict_suggest($d, 'soong');
           echo 'Suggestions for "soong":';
           print_r($suggs);
       }
       enchant_broker_free_dict($d);
   } else {
   }
   enchant_broker_free($r);
   ?>


See also `Enchant spelling library <https://www.php.net/manual/en/book.enchant.php>`_ and `Enchant <https://www.abisource.com/projects/enchant/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extenchant |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extereg:

.. _ext-ereg:

ext/ereg
++++++++

 Extension ext/ereg.

.. code-block:: php

   <?php
   if (ereg ('([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})', $date, $regs)) {
       echo $regs[3].'.'.$regs[2].'.'.$regs[1];
   } else {
       echo 'Invalid date format: '.$date;
   }
   ?>


See also `Ereg <https://www.php.net/manual/en/function.ereg.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extereg |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Major              |
+--------------+--------------------+
| Time To Fix  | Quick (30 mins)    |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extev:

.. _ext-ev:

ext/ev
++++++

 Extension ev.

ext/ev is a high performance full-featured event loop written in C.

.. code-block:: php

   <?php
   // Create and start timer firing after 2 seconds
   $w1 = new EvTimer(2, 0, function () {
       echo '2 seconds elapsed'.PHP_EOL;
   });
   
   // Create and launch timer firing after 2 seconds repeating each second
   // until we manually stop it
   $w2 = new EvTimer(2, 1, function ($w) {
       echo 'is called every second, is launched after 2 seconds'.PHP_EOL;
       echo 'iteration = ', Ev::iteration(), PHP_EOL;
   
       // Stop the watcher after 5 iterations
       Ev::iteration() == 5 and $w->stop();
       // Stop the watcher if further calls cause more than 10 iterations
       Ev::iteration() >= 10 and $w->stop();
   });
   
   // Create stopped timer. It will be inactive until we start it ourselves
   $w_stopped = EvTimer::createStopped(10, 5, function($w) {
       echo 'Callback of a timer created as stopped'.PHP_EOL;
   
       // Stop the watcher after 2 iterations
       Ev::iteration() >= 2 and $w->stop();
   });
   
   // Loop until Ev::stop() is called or all of watchers stop
   Ev::run();
   
   // Start and look if it works
   $w_stopped->start();
   echo 'Run single iteration'.PHP_EOL;
   Ev::run(Ev::RUN_ONCE);
   
   echo 'Restart the second watcher and try to handle the same events, but don\'t block'.PHP_EOL;
   $w2->again();
   Ev::run(Ev::RUN_NOWAIT);
   
   $w = new EvTimer(10, 0, function() {});
   echo 'Running a blocking loop'.PHP_EOL;
   Ev::run();
   echo 'END'.PHP_EOL;
   ?>


See also `Ev <https://www.php.net/manual/en/book.ev.php>`_ and `libev <http://software.schmorp.de/pkg/libev.html>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Extensions/Extev |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _extensions-extevent:

.. _ext-event:

ext/event
+++++++++

 Extension event.

This is an extension to efficiently schedule I/O, time and signal based events using the best I/O notification mechanism available for specific platform. This is a port of libevent to the PHP infrastructure.

.. code-block:: php

   <?php
   // Read callback
   function readcb($bev, $base) {
       //$input = $bev->input; //$bev->getInput();
   
       //$pos = $input->search('TTP');
       $pos = $bev->input->search('TTP');
   
       while (($n = $bev->input->remove($buf, 1024)) > 0) {
           echo $buf;
       }
   }
   
   // Event callback
   function eventcb($bev, $events, $base) {
       if ($events & EventBufferEvent::CONNECTED) {
           echo 'Connected.';
       } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {
           if ($events & EventBufferEvent::ERROR) {
               echo 'DNS error: ', $bev->getDnsErrorString(), PHP_EOL;
           }
   
           echo 'Closing'.PHP_EOL;
           $base->exit();
           exit('Done'.PHP_EOL);
       }
   }
   
   if ($argc != 3) {
       echo <<<EOS
   Trivial HTTP 0.x client
   Syntax: php {$argv[0]} [hostname] [resource]
   Example: php {$argv[0]} www.google.com /
   
   EOS;
       exit();
   }
   
   $base = new EventBase();
   
   $dns_base = new EventDnsBase($base, TRUE); // We'll use async DNS resolving
   if (!$dns_base) {
       exit('Failed to init DNS Base'.PHP_EOL);
   }
   
   $bev = new EventBufferEvent($base, /* use internal socket */ NULL,
       EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,
       'readcb', /* writecb */ NULL, 'eventcb'
   );
   if (!$bev) {
       exit('Failed creating bufferevent socket'.PHP_EOL);
   }
   
   //$bev->setCallbacks('readcb', /* writecb */ NULL, 'eventcb', $base);
   $bev->enable(Event::READ | Event::WRITE);
   
   $output = $bev->output; //$bev->getOutput();
   if (!$output->add(
       'GET '.$argv[2].' HTTP/1.0'."\r\n".
       'Host: '.$argv[1]."\r\n".
       'Connection: Close'.\r\n\r\n
   )) {
       exit('Failed adding request to output buffer\n');
   }
   
   if (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {
       exit('Can\'t connect to host '.$argv[1].PHP_EOL);
   }
   
   $base->dispatch();
   ?>


See also `Event <https://www.php.net/event>`_ and `libevent <http://libevent.org/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extevent |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extexif:

.. _ext-exif:

ext/exif
++++++++

 Extension EXIF : Exchangeable image file format.

The EXIF extension manipulates image meta data.

.. code-block:: php

   <?php
   echo 'test1.jpg:<br />';
   $exif = exif_read_data('tests/test1.jpg', 'IFD0');
   echo $exif===false ? 'No header data found.<br />' : 'Image contains headers<br />';
   
   $exif = exif_read_data('tests/test2.jpg', 0, true);
   echo 'test2.jpg:<br />';
   foreach ($exif as $key => $section) {
       foreach ($section as $name => $val) {
           echo $key.$name.': '.$val.'<br />';
       }
   }
   ?>


See also `Exchangeable image information <https://www.php.net/manual/en/book.exif.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extexif |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extexpect:

.. _ext-expect:

ext/expect
++++++++++

 Extension Expect.

This extension allows to interact with processes through ``PTY``. You may consider using the ``expect://`` wrapper with the filesystem functions which provide a simpler and more intuitive interface.

.. code-block:: php

   <?php
   ini_set('expect.loguser', 'Off');
   
   $stream = fopen('expect://ssh root@remotehost uptime', 'r');
   
   $cases = array (
       array (0 => 'password:', 1 => PASSWORD)
   );
   
   switch (expect_expectl ($stream, $cases)) {
       case PASSWORD:
           fwrite ($stream, 'password'.PHP_EOL);
           break;
    
       default:
           die ('Error was occurred while connecting to the remote host!'.PHP_EOL);
   }
   
   while ($line = fgets($stream)) {
         print $line;
   }
   fclose ($stream);
   ?>


See also `expect <https://www.php.net/manual/en/book.expect.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extexpect |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extfam:

.. _ext-fam:

ext/fam
+++++++

 File Alteration Monitor extension.

`FAM <http://oss.sgi.com/projects/fam/>`_ monitors files and directories, notifying interested applications of changes.

ext/FAM is not available for Windows

.. code-block:: php

   <?php
   
   $fam = fam_open('myApplication');
   fam_monitor_directory($fam, '/tmp');
   fam_close($fam);
   
   ?>


See also `File Alteration Monitor <https://www.php.net/manual/en/book.fam.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extfam |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.12.8            |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extfann:

.. _ext-fann:

ext/fann
++++++++

 Extension ``FANN`` : Fast Artificial Neural Network.

PHP binding for ``FANN`` library which implements multi-layer artificial neural networks with support for both fully connected and sparsely connected networks.

.. code-block:: php

   <?php
   $num_input = 2;
   $num_output = 1;
   $num_layers = 3;
   $num_neurons_hidden = 3;
   $desired_error = 0.001;
   $max_epochs = 500000;
   $epochs_between_reports = 1000;
   
   $ann = fann_create_standard($num_layers, $num_input, $num_neurons_hidden, $num_output);
   
   if ($ann) {
       fann_set_activation_function_hidden($ann, FANN_SIGMOID_SYMMETRIC);
       fann_set_activation_function_output($ann, FANN_SIGMOID_SYMMETRIC);
   
       $filename = dirname(__FILE__) . '/xor.data';
       if (fann_train_on_file($ann, $filename, $max_epochs, $epochs_between_reports, $desired_error))
           fann_save($ann, dirname(__FILE__) . '/xor_float.net');
   
       fann_destroy($ann);
   }
   ?>


See also `extension FANN <https://www.php.net/manual/en/book.fann.php>`_, `PHP-ML <https://php-ml.readthedocs.io/en/latest/>`_, `Rubix ML <https://rubixml.com/>`_, and `lib FANN <http://leenissen.dk/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extfann |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Major              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extfdf:

.. _ext-fdf:

ext/fdf
+++++++

 Extension ext/fdf.

Forms Data Format (`FDF <http://www.adobe.com/devnet/acrobat/fdftoolkit.html>`_) is a format for handling forms within PDF documents.

.. code-block:: php

   <?php
   $outfdf = fdf_create();
   fdf_set_value($outfdf, 'volume', $volume, 0);
   
   fdf_set_file($outfdf, 'http:/testfdf/resultlabel.pdf');
   fdf_save($outfdf, 'outtest.fdf');
   fdf_close($outfdf);
   Header('Content-type: application/vnd.fdf');
   $fp = fopen('outtest.fdf', 'r');
   fpassthru($fp);
   unlink('outtest.fdf');
   ?>


See also `Form Data Format <https://www.php.net/manual/en/book.fdf.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extfdf |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Major             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extffi:

.. _ext-ffi:

ext/ffi
+++++++

 Extension ``FFI`` : Foreign Function Interface .

This extension allows the loading of shared libraries (.DLL or .so), calling of C functions and accessing of C data structures in pure PHP, without having to have deep knowledge of the Zend extension API, and without having to learn a third “intermediate” language. The public API is implemented as a single class FFI with several `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods (some of them may be called dynamically), and overloaded object methods, which perform the actual interaction with C data.

.. code-block:: php

   <?php
   //Example : Calling a function from shared library
   // create FFI object, loading libc and exporting function printf()
   $ffi = FFI::cdef(
       "int printf(const char *format, ...);", // this is a regular C declaration
       "libc.so.6");
   // call C's printf()
   $ffi->printf("Hello %s!\n", "world");
   ?>


See also `Foreign Function Interface <https://www.php.net/manual/en/book.ffi.php>`_, and `ext/ffi <https://github.com/dstogov/php-ffi>`_ and `A PHP Compiler, aka The FFI Rabbit Hole <https://blog.ircmaxell.com/2019/04/compilers-ffi.html>`_.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extffi |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.7.9             |
+--------------+-------------------+
| PHP Version  | 7.4+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extffmpeg:

.. _ext-ffmpeg:

ext/ffmpeg
++++++++++

 Extension ``ffmpeg`` for PHP.

``ffmpeg-php`` is an extension for PHP that adds an easy to use, object-oriented API for accessing and retrieving information from video and audio files.

.. code-block:: php

   <?php
   
   $movie = new ffmpeg_movie($path_to_media, $persistent);
   echo 'The movie lasts '.$movie->getDuration().' seconds';
   
   ?>


See also `ffmpeg-php <http://ffmpeg-php.sourceforge.net/>`_ and `FFMPEG <https://www.ffmpeg.org/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extffmpeg |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extfile:

.. _ext-file:

ext/file
++++++++

 Filesystem functions from standard.

Extension that handle access to file on the file system.

.. code-block:: php

   <?php
   $row = 1;
   if (($handle = fopen('test.csv', 'r')) !== FALSE) {
       while (($data = fgetcsv($handle, 1000, ',')) !== FALSE) {
           $num = count($data);
           echo '<p> $num fields in line $row: <br /></p>'.PHP_EOL;
           $row++;
           for ($c=0; $c < $num; $c++) {
               echo $data[$c] . '<br />'.PHP_EOL;
           }
       }
       fclose($handle);
   }
   ?>


See also `filesystem <http://www.php.net/manual/en/book.filesystem.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extfile |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extfileinfo:

.. _ext-fileinfo:

ext/fileinfo
++++++++++++

 Extension ext/fileinfo.

This module guesses the content type and encoding of a file by looking for certain magic byte sequences at specific positions within the file.

.. code-block:: php

   <?php
   $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
   foreach (glob('*') as $filename) {
       echo finfo_file($finfo, $filename) . PHP_EOL;
   }
   finfo_close($finfo);
   ?>



See also `Filinfo <https://www.php.net/manual/en/book.fileinfo.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extfileinfo |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extfilter:

.. _ext-filter:

ext/filter
++++++++++

 Extension filter.

This extension filters data by either validating or sanitizing it.

.. code-block:: php

   <?php
   $email_a = 'joe@example.com';
   $email_b = 'bogus';
   
   if (filter_var($email_a, FILTER_VALIDATE_EMAIL)) {
       echo 'This ($email_a) email address is considered valid.'.PHP_EOL;
   }
   if (filter_var($email_b, FILTER_VALIDATE_EMAIL)) {
       echo 'This ($email_b) email address is considered valid.'.PHP_EOL;
   } else {
       echo 'This ($email_b) email address is considered invalid.'.PHP_EOL;
   }
   ?>


See also `Data filtering <https://www.php.net/manual/en/book.filter.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extfilter |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extfpm:

.. _ext-fpm:

ext/fpm
+++++++

 Extension FPM, FastCGI Process Manager.

FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features (mostly) useful for heavy-loaded sites.
.. code-block:: php

   <?php
       echo $text;
       fastcgi_finish_request( );
   ?>


See also `FastCGI Process Manager <https://www.php.net/fpm>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extfpm |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extftp:

.. _ext-ftp:

ext/ftp
+++++++

 Extension FTP.

The functions in this extension implement client access to files servers speaking the File Transfer Protocol (FTP) as defined in `RFC 959 <http://www.faqs.org/rfcs/rfc959>`_.

.. code-block:: php

   <?php
   // set up basic connection
   $conn_id = ftp_connect($ftp_server); 
   
   // login with username and password
   $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass); 
   
   // check connection
   if ((!$conn_id) || (!$login_result)) { 
       echo 'FTP connection has failed!';
       echo 'Attempted to connect to $ftp_server for user $ftp_user_name'; 
       exit; 
   } else {
       echo 'Connected to $ftp_server, for user $ftp_user_name';
   }
   
   // upload the file
   $upload = ftp_put($conn_id, $destination_file, $source_file, FTP_BINARY); 
   
   // check upload status
   if (!$upload) { 
       echo 'FTP upload has failed!';
   } else {
       echo 'Uploaded $source_file to $ftp_server as $destination_file';
   }
   
   // close the FTP stream 
   ftp_close($conn_id); 
   ?>


See also `FTP <https://www.php.net/manual/en/book.ftp.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extftp |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extgd:

.. _ext-gd:

ext/gd
++++++

 Extension GD for PHP.

This extension allows PHP to create and manipulate image files in a variety of different image formats, including GIF, PNG, JPEG, WBMP, and XPM.
 
.. code-block:: php

   <?php
   
   header("Content-type: image/png");
   $string = $_GET['text'];
   $im     = imagecreatefrompng("images/button1.png");
   $orange = imagecolorallocate($im, 220, 210, 60);
   $px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
   imagestring($im, 3, $px, 9, $string, $orange);
   imagepng($im);
   imagedestroy($im);
   
   ?>


See also `Image Processing and GD <https://www.php.net/manual/en/book.image.php>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Extensions/Extgd |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _extensions-extgearman:

.. _ext-gearman:

ext/gearman
+++++++++++

 Extension Gearman.

Gearman is a generic application framework for farming out work to multiple machines or processes. 

.. code-block:: php

   <?php
   
   # Create our client object.
   $gmclient= new GearmanClient();
   
   # Add default server (localhost).
   $gmclient->addServer();
   
   echo 'Sending job'.PHP_EOL;
   
   # Send reverse job
   do
   {
     $result = $gmclient->doNormal('reverse', 'Hello!');
   
     # Check for various return packets and errors.
     switch($gmclient->returnCode())
     {
       case GEARMAN_WORK_DATA:
         echo 'Data: '.$result . PHP_EOL;;
         break;
       case GEARMAN_WORK_STATUS:
         list($numerator, $denominator)= $gmclient->doStatus();
         echo 'Status: '.$numerator.'/'.$denominator.' complete'. PHP_EOL;
         break;
       case GEARMAN_WORK_FAIL:
         echo 'Failed\n';
         exit;
       case GEARMAN_SUCCESS:
         echo 'Success: $result\n';
         break;
       default:
         echo 'RET: ' . $gmclient->returnCode() . PHP_EOL;
         exit;
     }
   }
   while($gmclient->returnCode() != GEARMAN_SUCCESS);
   
   ?>


See also `Gearman on PHP <https://www.php.net/manual/en/book.gearman.php>`_ and `Gearman <http://gearman.org/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extgearman |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extgender:

.. _ext-gender:

ext/gender
++++++++++

 Gender extension.

The Gender PHP extension is a port of the gender.c program originally written by Joerg Michael. Its main purpose is to find out the gender of firstnames, based on a database of over 40000 firstnames from 54 countries.

.. code-block:: php

   <?php
   
   namespace Gender;
   
   $gender = new Gender;
   
    
   $name = 'Milene';
   $country = Gender::FRANCE;
    
   $result = $gender->get($name, $country);
   
   $data = $gender->country($country);
   
   switch($result) {
       case Gender::IS_FEMALE:
           printf('The name %s is female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MOSTLY_FEMALE:
           printf('The name %s is mostly female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MALE:
           printf('The name %s is male in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MOSTLY_MALE:
           printf('The name %s is mostly male in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_UNISEX_NAME:
           printf('The name %s is unisex in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_A_COUPLE:
           printf('The name %s is both male and female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::NAME_NOT_FOUND:
           printf('The name %s was not found for %s\n', $name, $data['country']);
       break;
   
    
       case Gender::ERROR_IN_NAME:
           echo 'There is an error in the given name!'.PHP_EOL;
       break;
    
       default:
           echo 'An error occurred!'.PHP_EOL;
       break;
   
   }
   
   ?>


See also `ext/gender manual <https://www.php.net/manual/en/book.gender.php>`_ and `genderReader <https://github.com/cstuder/genderReader>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extgender |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.11.6               |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extgeoip:

.. _ext-geoip:

ext/geoip
+++++++++

 Extension geoip for PHP.

The GeoIP extension allows the localisation of an IP address. 

.. code-block:: php

   <?php
   $org = geoip_org_by_name('www.example.com');
   if ($org) {
       echo 'This host IP is allocated to: ' . $org;
   }
   ?>


See also `GeoIP <https://www.php.net/manual/en/book.geoip.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extgeoip |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extgettext:

.. _ext-gettext:

ext/gettext
+++++++++++

 Extension Gettext.

The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications.

.. code-block:: php

   <?php
   // Set language to German
   putenv('LC_ALL=de_DE');
   setlocale(LC_ALL, 'de_DE');
   
   // Specify location of translation tables
   bindtextdomain('myPHPApp', './locale');
   
   // Choose domain
   textdomain('myPHPApp');
   
   // Translation is looking for in ./locale/de_DE/LC_MESSAGES/myPHPApp.mo now
   
   // Print a test message
   echo gettext('Welcome to My PHP Application');
   
   // Or use the alias _() for gettext()
   echo _('Have a nice day');
   ?>


See also `Gettext <https://www.gnu.org/software/gettext/manual/gettext.html>`_ and `ext/gettext <https://www.php.net/manual/en/book.gettext.php>`_

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extgettext |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extgmagick:

.. _ext-gmagick:

ext/gmagick
+++++++++++

 Extension gmagick.

Gmagick is a php extension to create, modify and obtain meta information of images using the GraphicsMagick API.

.. code-block:: php

   <?php
   //Instantiate a new Gmagick object
   $image = new Gmagick('example.jpg');
   
   //Make thumbnail from image loaded. 0 for either axes preserves aspect ratio
   $image->thumbnailImage(100, 0);
   
   //Create a border around the image, then simulate how the image will look like as an oil painting
   //Note the chaining of mutator methods which is supported in gmagick
   $image->borderImage(yellow, 8, 8)->oilPaintImage(0.3);
   
   //Write the current image at the current state to a file
   $image->write('example_thumbnail.jpg');
   ?>


See also `PHP gmagick <http://www.php.net/manual/en/book.gmagick.php>`_ and `gmagick <http://www.graphicsmagick.org/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extgmagick |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extgmp:

.. _ext-gmp:

ext/gmp
+++++++

 Extension ext/gmp.

These functions allow for arbitrary-length integers to be worked with using the GNU MP library.

.. code-block:: php

   <?php
   $pow1 = gmp_pow('2', 131);
   echo gmp_strval($pow1) . PHP_EOL;
   $pow2 = gmp_pow('0', 0);
   echo gmp_strval($pow2) . PHP_EOL;
   $pow3 = gmp_pow('2', -1); // Negative exp, generates warning
   echo gmp_strval($pow3) . PHP_EOL;
   ?>


See also `GMP <https://www.php.net/manual/en/book.gmp.php>`_ and `GNU MP library <https://gmplib.org/>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extgmp |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extgnupg:

.. _ext-gnupgp:

ext/gnupgp
++++++++++

 Extension `GnuPG <https://www.php.net/gnupg>`_.

This module allows you to interact with `gnupg <https://www.php.net/gnupg>`_.

.. code-block:: php

   <?php
   // init gnupg
   $res = gnupg_init();
   // not really needed. Clearsign is default
   gnupg_setsignmode($res,GNUPG_SIG_MODE_CLEAR);
   // add key with passphrase 'test' for signing
   gnupg_addsignkey($res,"8660281B6051D071D94B5B230549F9DC851566DC","test");
   // sign
   $signed = gnupg_sign($res,"just a test");
   echo $signed;
   ?>


See also `Gnupg Function for PHP <http://www.php.net/manual/en/book.`gnupg <https://www.php.net/gnupg>`_.php>`_ and 
         `GnuPG <https://www.`gnupg <https://www.php.net/gnupg>`_.org/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extgnupg |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extgrpc:

.. _ext-grpc:

ext/grpc
++++++++

 Extension for GRPC : A high performance, open-source universal RPC framework.

.. code-block:: php

   <?php
   
   //https://github.com/grpc/grpc/blob/master/examples/php/greeter_client.php
   
   require dirname(__FILE__).'/vendor/autoload.php';
   // The following includes are needed when using protobuf 3.1.0
   // and will suppress warnings when using protobuf 3.2.0+
   @include_once dirname(__FILE__).'/helloworld.pb.php';
   @include_once dirname(__FILE__).'/helloworld_grpc_pb.php';
   function greet($name)
   {
       $client = new Helloworld\GreeterClient('localhost:50051', [
           'credentials' => Grpc\ChannelCredentials::createInsecure(),
       ]);
       $request = new Helloworld\HelloRequest();
       $request->setName($name);
       list($reply, $status) = $client->SayHello($request)->wait();
       $message = $reply->getMessage();
       return $message;
   }
   $name = !empty($argv[1]) ? $argv[1] : 'world';
   echo greet($name).\n;
   
   ?>


See also `GRPC <http://www.grpc.io/>`_ and `GRPC on PECL <https://pecl.php.net/package/gRPC>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extgrpc |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.11.3             |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-exthash:

.. _ext-hash:

ext/hash
++++++++

 Extension for HASH Message Digest Framework.

Message Digest (hash) engine. Allows direct or incremental processing of arbitrary length messages using a variety of hashing algorithms.

.. code-block:: php

   <?php
   /* Create a file to calculate hash of */
   file_put_contents('example.txt', 'The quick brown fox jumped over the lazy dog.');
   
   echo hash_file('md5', 'example.txt');
   ?>


See also `HASH Message Digest Framework <http://www.php.net/manual/en/book.hash.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Exthash |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-exthrtime:

.. _ext-hrtime:

ext/hrtime
++++++++++

 High resolution timing Extension.

The HRTime extension implements a high resolution `StopWatch` class. It uses the best possible API on different platforms which brings resolution up to nanoseconds. It also makes possible to implement a custom stopwatch using low level ticks delivered by the underlaying system.

.. code-block:: php

   <?php
   
   $c = new HRTime\StopWatch;
   
   $c->start();
   /* measure this code block execution */
   for ($i = 0; $i < 1024*1024; $i++);
   $c->stop();
   $elapsed0 = $c->getLastElapsedTime(HRTime\Unit::NANOSECOND);
   
   /* measurement is not running here*/
   for ($i = 0; $i < 1024*1024; $i++);
   
   $c->start();
   /* measure this code block execution */
   for ($i = 0; $i < 1024*1024; $i++);
   $c->stop();
   $elapsed1 = $c->getLastElapsedTime(HRTime\Unit::NANOSECOND);
   
   $elapsed_total = $c->getElapsedTime(HRTime\Unit::NANOSECOND);
   
   ?>


See also `ext/hrtime manual <https://www.php.net/manual/en/intro.hrtime.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Exthrtime |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 1.1.5                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-exthttp:

.. _ext-pecl\_http:

ext/pecl_http
+++++++++++++

 Extension HTTP.

This HTTP extension aims to provide a convenient and powerful set of functionalities for one of PHP major applications.

It eases handling of HTTP URL, headers and messages, provides means for negotiation of a client's preferred content type, language and charset, as well as a convenient way to send any arbitrary data with caching and resuming capabilities.

It provides powerful request functionality with support for parallel requests.

.. code-block:: php

   <?php 
   
   $client = new http\Client;
   $client->setSslOptions(array("verifypeer" => true));
   $client->addSslOptions(array("verifyhost" => 2));
   
   $client->enqueue($req = new http\Client\Request("GET", "https://twitter.com/"));
   $client->send();
   $ti = (array) $client->getTransferInfo($req);
   var_dump($ti);
   
   ?>


See also `ext-http <https://github.com/m6w6/ext-http>`_ and `pecl_http <https://pecl.php.net/package/pecl_http>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Exthttp |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extibase:

.. _ext-ibase:

ext/ibase
+++++++++

 Extensions ``Interbase`` and ``Firebird``.

``Firebird`` is a relational database offering many ISO SQL-2003 features that runs on Linux, Windows, and a variety of Unix platforms. 

.. code-block:: php

   <?php
   
   $host = 'localhost:/path/to/your.gdb';
   
   $dbh = ibase_connect($host, $username, $password);
   $stmt = 'SELECT * FROM tblname';
   
   $sth = ibase_query($dbh, $stmt) or die(ibase_errmsg());
   
   ?>


See also `Firebase / Interbase <https://www.php.net/manual/en/book.ibase.php>`_ and `Firebird <http://www.firebirdsql.org/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extibase |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-exticonv:

.. _ext-iconv:

ext/iconv
+++++++++

 Extension ext/iconv.

 With this module, you can turn a string represented by a local character set into the one represented by another character set, which may be the Unicode character set.

.. code-block:: php

   <?php
   $text = "This is the Euro symbol '€'.";
   
   echo 'Original : ', $text, PHP_EOL;
   echo 'TRANSLIT : ', iconv("UTF-8", "ISO-8859-1//TRANSLIT", $text), PHP_EOL;
   echo 'IGNORE   : ', iconv("UTF-8", "ISO-8859-1//IGNORE", $text), PHP_EOL;
   echo 'Plain    : ', iconv("UTF-8", "ISO-8859-1", $text), PHP_EOL;
   
   ?>


See also `Iconv <https://www.php.net/iconv>`_, and `libiconv <https://www.gnu.org/software/libiconv/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Exticonv |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extigbinary:

.. _ext-igbinary:

ext/igbinary
++++++++++++

 Extension igbinary. 

igbinary is a drop in replacement for the standard php serializer. Instead of time and space consuming textual representation, igbinary stores php data structures in compact binary form. 

.. code-block:: php

   <?php
   	$serialized = igbinary_serialize($variable);
   	$unserialized = igbinary_unserialize($serialized);
   ?>


See also `igbinary <https://github.com/igbinary/igbinary/>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extigbinary |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 1.0.6                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extiis:

.. _ext-iis:

ext/iis
+++++++

 Extension IIS Administration.

It provides functions to administrate Microsoft Internet Information Server (IIS).

.. code-block:: php

   <?php
     $path = iis_get_server_by_path('/path/to/root/folder/')
   ?>


This extension is available for Windows only. 

See also `IIS Administration <http://www.php.net/manual/en/book.iisfunc.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extiis |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extimagick:

.. _ext-imagick:

ext/imagick
+++++++++++

 Extension Imagick for PHP.

Imagick is a native php extension to create and modify images using the ImageMagick API.

.. code-block:: php

   <?php
   
   header('Content-type: image/jpeg');
   
   $image = new Imagick('image.jpg');
   
   // If 0 is provided as a width or height parameter,
   // aspect ratio is maintained
   $image->thumbnailImage(100, 0);
   
   echo $image;
   
   ?>


See also `Imagick for PHP <https://www.php.net/manual/en/book.imagick.php>`_ and `Imagick <https://www.imagemagick.org/script/index.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extimagick |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extimap:

.. _ext-imap:

ext/imap
++++++++

 Extension ext/imap.

This extension operate with the IMAP protocol, as well as the NNTP, POP3 and local mailbox access methods.

.. code-block:: php

   <?php
   $mbox = imap_open('{imap.example.org}', 'username', 'password', OP_HALFOPEN)
         or die('can't connect: ' . imap_last_error());
   
   $list = imap_list($mbox, '{imap.example.org}', '*');
   if (is_array($list)) {
       foreach ($list as $val) {
           echo imap_utf7_decode($val) . PHP_EOL;
       }
   } else {
       echo 'imap_list failed: ' . imap_last_error() . PHP_EOL;
   }
   
   imap_close($mbox);
   ?>


See also `IMAP <http://www.php.net/imap>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extimap |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extinfo:

.. _ext-info:

ext/info
++++++++

 PHP Options and Information.

These functions enable you to get a lot of information about PHP itself, e.g. runtime configuration, loaded extensions, version and much more. 

.. code-block:: php

   <?php
   /*
   Our php.ini contains the following settings:
   
   display_errors = On
   register_globals = Off
   post_max_size = 8M
   */
   
   echo 'display_errors = ' . ini_get('display_errors') . "\n";
   echo 'register_globals = ' . ini_get('register_globals') . "\n";
   echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
   echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . "\n";
   echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));
   
   function return_bytes($val) {
       $val = trim($val);
       $last = strtolower($val[strlen($val)-1]);
       switch($last) {
           // The 'G' modifier is available since PHP 5.1.0
           case 'g':
               $val *= 1024;
           case 'm':
               $val *= 1024;
           case 'k':
               $val *= 1024;
       }
   
       return $val;
   }
   
   ?>


See also `PHP Options And Information <https://www.php.net/manual/en/book.info.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extinfo |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extinotify:

.. _ext-inotify:

ext/inotify
+++++++++++

 Extension inotify.

The Inotify extension gives access to the Linux kernel subsystem that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications.

.. code-block:: php

   <?php
   // Open an inotify instance
   $fd = inotify_init();
   
   // Watch __FILE__ for metadata changes (e.g. mtime)
   $watch_descriptor = inotify_add_watch($fd, __FILE__, IN_ATTRIB);
   
   // generate an event
   touch(__FILE__);
   
   // Read events
   $events = inotify_read($fd);
   print_r($events);
   
   // The following methods allows to use inotify functions without blocking on inotify_read():
   
   // - Using stream_select() on $fd:
   $read = array($fd);
   $write = null;
   $except = null;
   stream_select($read,$write,$except,0);
   
   // - Using stream_set_blocking() on $fd
   stream_set_blocking($fd, 0);
   inotify_read($fd); // Does no block, and return false if no events are pending
   
   // - Using inotify_queue_len() to check if event queue is not empty
   $queue_len = inotify_queue_len($fd); // If > 0, inotify_read() will not block
   
   // Stop watching __FILE__ for metadata changes
   inotify_rm_watch($fd, $watch_descriptor);
   
   // Close the inotify instance
   // This may have closed all watches if this was not already done
   fclose($fd);
   
   ?>


See also `ext/inotify manual <https://www.php.net/manual/en/book.inotify.php>`_ and `inotify <https://en.wikipedia.org/wiki/Inotify>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extinotify |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extintl:

.. _ext-intl:

ext/intl
++++++++

 Extension international.

Internationalization extension (further is referred as Intl) is a wrapper for `ICU <http://site.icu-project.org/>`_ library, enabling PHP programmers to perform various locale-aware operations including but not limited to formatting, transliteration, encoding conversion, calendar operations, `UCA <http://www.unicode.org/reports/tr10/>`_-conformant collation, locating text boundaries and working with locale identifiers, timezones and graphemes.

.. code-block:: php

   <?php
   $coll = new Collator('en_US');
   $al   = $coll->getLocale(Locale::ACTUAL_LOCALE);
   echo Actual locale: $al\n;
   
   $formatter = new NumberFormatter('en_US', NumberFormatter::DECIMAL);
   echo $formatter->format(1234567);
   ?>


See also `Internationalization Functions <https://www.php.net/manual/en/book.intl.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extintl |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extjson:

.. _ext-json:

ext/json
++++++++

 Extension JSON.

This extension implements the JavaScript Object Notation (JSON) data-interchange format. PHP implements a superset of JSON as specified in the original `RFC 7159 <http://www.faqs.org/rfcs/rfc7159>`_.

.. code-block:: php

   <?php
   $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);
   
   echo json_encode($arr);
   ?>


See also `JavaScript Object Notation <https://www.php.net/manual/en/book.json.php>`_ and `JSON <http://www.json.org/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extjson |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extjudy:

.. _ext-judy:

ext/judy
++++++++

 The `Judy <https://www.php.net/Judy>`_ extension. 

PHP `Judy <https://www.php.net/Judy>`_ is a PECL extension for the `Judy C library <http://judy.sourceforge.net/>`_ implementing dynamic sparse arrays.

.. code-block:: php

   <?php 
   $judy = new Judy(Judy::BITSET);
   if ($judy->getType() === judy_type($judy) &&
       $judy->getType() === Judy::BITSET) {
       echo 'Judy BITSET type OK'.PHP_EOL;
   } else {
       echo 'Judy BITSET type check fail'.PHP_EOL;
   }
   unset($judy);
   ?>


See also `php-judy <https://github.com/orieg/php-judy>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extjudy |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.11.6             |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extkdm5:

.. _ext-kdm5:

ext/kdm5
++++++++

 Extension kdm5 : Kerberos V .

These package allows you to access Kerberos V administration servers. You can create, modify, and delete Kerberos V principals and policies.

.. code-block:: php

   <?php
       // Extracted from the PHP Manual
     $handle = kadm5_init_with_password(afs-1, GONICUS.LOCAL, admin/admin, password);
   
     print <h1>get_principals</h1>\n;
     $principals = kadm5_get_principals($handle);
     for( $i=0; $i<count($principals); $i++)
         print $principals[$i]<br>\n;
   
     print <h1>get_policies</h1>\n;
     $policies = kadm5_get_policies($handle);
     for( $i=0; $i<count($policies); $i++)
         print $policies[$i]<br>\n;
   
     print <h1>get_principal burbach@GONICUS.LOCAL</h1>\n;
   
     $options = kadm5_get_principal($handle, burbach@GONICUS.LOCAL );
     $keys = array_keys($options);
     for( $i=0; $i<count($keys); $i++) {
       $value = $options[$keys[$i]];
       print $keys[$i]: $value<br>\n;
     }
   
     $options = array(KADM5_PRINC_EXPIRE_TIME => 0);
     kadm5_modify_principal($handle, burbach@GONICUS.LOCAL, $options);
   
     kadm5_destroy($handle);
   ?>


See also `Kerberos V <https://www.php.net/manual/en/book.kadm5.php>`_ and `Kerberos: The Network Authentication Protocol <http://web.mit.edu/kerberos/www/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extkdm5 |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extlapack:

.. _ext-lapack:

ext/lapack
++++++++++

 Extension Lapack. LAPACK provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems. 

.. code-block:: php

   <?php
   
   $a = array(
       array( 1.44,  -7.84,  -4.39,   4.53),
       array(-9.96,  -0.28,  -3.24,   3.83),
       array(-7.55,   3.24,   6.27,  -6.64),
       array( 8.34,   8.09,   5.28,   2.06),
       array( 7.08,   2.52,   0.74,  -2.47),
       array(-5.45,  -5.70,  -1.19,   4.70),
   );
   
   $b = array(
       array( 8.58,   9.35),
       array( 8.26,  -4.43),
       array( 8.48,  -0.70),
       array(-5.28,  -0.26),
       array( 5.72,  -7.36),
       array( 8.93,  -2.52),
   );
   
   $result = Lapack::leastSquaresByFactorisation($a, $b);
   ?>

 
See also `Lapack <https://www.php.net/manual/en/book.lapack.php>`_ and `php-lapack <https://github.com/ianbarber/php-lapack>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extlapack |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.12.2               |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extldap:

.. _ext-ldap:

ext/ldap
++++++++

 Extension ext/ldap.

LDAP is the Lightweight `Directory <https://www.php.net/Directory>`_ Access Protocol, and is a protocol used to access '`Directory <https://www.php.net/Directory>`_ Servers'. The `Directory <https://www.php.net/Directory>`_ is a special kind of database that holds information in a tree structure.

.. code-block:: php

   <?php
   // basic sequence with LDAP is connect, bind, search, interpret search
   // result, close connection
   
   echo '<h3>LDAP query test</h3>';
   echo 'Connecting ...';
   $ds=ldap_connect('localhost');  // must be a valid LDAP server!
   echo 'connect result is ' . $ds . '<br />';
   
   if ($ds) { 
       echo 'Binding ...'; 
       $r=ldap_bind($ds);     // this is an 'anonymous' bind, typically
                              // read-only access
       echo 'Bind result is ' . $r . '<br />';
   
       echo 'Searching for (sn=S*) ...';
       // Search surname entry
       $sr=ldap_search($ds, 'o=My Company, c=US', 'sn=S*');  
       echo 'Search result is ' . $sr . '<br />';
   
       echo 'Number of entries returned is ' . ldap_count_entries($ds, $sr) . '<br />';
   
       echo 'Getting entries ...<p>';
       $info = ldap_get_entries($ds, $sr);
       echo 'Data for ' . $info['count'] . ' items returned:<p>';
   
       for ($i=0; $i<$info['count']; $i++) {
           echo 'dn is: ' . $info[$i]['dn'] . '<br />';
           echo 'first cn entry is: ' . $info[$i]['cn'][0] . '<br />';
           echo 'first email entry is: ' . $info[$i]['mail'][0] . '<br /><hr />';
       }
   
       echo 'Closing connection';
       ldap_close($ds);
   
   } else {
       echo '<h4>Unable to connect to LDAP server</h4>';
   }
   ?>


See also `Lightweight `Directory <https://www.php.net/Directory>`_ Access Protocol <https://www.php.net/manual/en/book.ldap.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extldap |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extleveldb:

.. _ext-leveldb:

ext/leveldb
+++++++++++

 PHP Binding for LevelDB.

LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.

.. code-block:: php

   <?php
   
   $db = new LevelDB($leveldb_path);
   
   $batch = new LevelDBWriteBatch();
   $batch->set('batch_foo', 'batch_bar');
   $batch->put('batch_foo2', 'batch_bar2');
   $batch->delete('batch_foo');
   
   $db->write($batch);
   
   $batch->clear();
   $batch->delete('batch_foo2');
   $batch->set('batch_foo', 'batch again');
   
   ?>


See also `ext/leveldb on Github <https://github.com/reeze/php-leveldb>`_ and `Leveldb <https://github.com/google/leveldb>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extleveldb |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.1.7                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extlibevent:

.. _ext-libevent:

ext/libevent
++++++++++++

 Extension libevent.

Libevent is a library that provides a mechanism to execute a callback function when a specific event occurs on a file descriptor or after a timeout has been reached.

.. code-block:: php

   <?php
   
   function print_line($fd, $events, $arg)
   {
       static $max_requests = 0;
   
       $max_requests++;
   
       if ($max_requests == 10) {
           // exit loop after 10 writes
           event_base_loopexit($arg[1]);
       }
   
       // print the line
       echo  fgets($fd);
   }
   
   // create base and event
   $base = event_base_new();
   $event = event_new();
   
   $fd = STDIN;
   
   // set event flags
   event_set($event, $fd, EV_READ | EV_PERSIST, 'print_line', array($event, $base));
   // set event base
   event_base_set($event, $base);
   
   // enable event
   event_add($event);
   // start event loop
   event_base_loop($base);
   
   ?>


See also `libevent <http://libevent.org/>`_ and `Libevent ext <https://www.php.net/manual/en/book.libevent.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extlibevent |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | Very high              |
+--------------+------------------------+


.. _extensions-extlibsodium:

.. _ext-libsodium:

ext/libsodium
+++++++++++++

 Extension for libsodium : in PECL until PHP 7.2, and in core ever since. 

The Sodium crypto library (libsodium) is a modern, easy-to-use software library for encryption, decryption, signatures, password hashing and more.

Sodium supports a variety of compilers and operating systems, including Windows (with MinGW or Visual Studio, x86 and x64), iOS and Android.

The design choices emphasize security, and "magic constants" have clear rationales.

.. code-block:: php

   <?php
   // Example from the docs : https://paragonie.com/book/pecl-libsodium/read/06-hashing.md#crypto-generichash
   
   // Fast, unkeyed hash function.
   // Can be used as a secure replacement for MD5
   $h = \Sodium\crypto_generichash('msg');
   
   // Fast, keyed hash function.
   // The key can be of any length between \Sodium\CRYPTO_GENERICHASH_KEYBYTES_MIN
   // and \Sodium\CRYPTO_GENERICHASH_KEYBYTES_MAX, in bytes.
   // \Sodium\CRYPTO_GENERICHASH_KEYBYTES is the recommended length.
   $h = \Sodium\crypto_generichash('msg', $key);
   
   // Fast, keyed hash function, with user-chosen output length, in bytes.
   // Output length can be between \Sodium\CRYPTO_GENERICHASH_BYTES_MIN and
   // \Sodium\CRYPTO_GENERICHASH_BYTES_MAX.
   // \Sodium\CRYPTO_GENERICHASH_BYTES is the default length.
   $h = \Sodium\crypto_generichash('msg', $key, 64);
   
   ?>


See also `PHP extension for libsodium <https://github.com/jedisct1/libsodium-php>`_ and `Using Libsodium in PHP Projects <https://paragonie.com/book/pecl-libsodium/read/00-intro.md>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extlibsodium |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.10.2                  |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extlibxml:

.. _ext-libxml:

ext/libxml
++++++++++

 Extension libxml.

These functions/constants are available as of PHP 5.1.0, and the following core extensions rely on this libxml extension: DOM, libxml, SimpleXML, SOAP, WDDX, XSL, XML, XMLReader, XMLRPC and XMLWriter.

.. code-block:: php

   <?php
   
   // $xmlstr is a string, containing a XML document. 
   
   $doc = simplexml_load_string($xmlstr);
   $xml = explode(PHP_EOL, $xmlstr);
   
   if ($doc === false) {
       $errors = libxml_get_errors();
   
       foreach ($errors as $error) {
           echo display_xml_error($error, $xml);
       }
   
       libxml_clear_errors();
   }
   
   
   function display_xml_error($error, $xml)
   {
       $return  = $xml[$error->line - 1] . PHP_EOL;
       $return .= str_repeat('-', $error->column) . '^'.PHP_EOL;
   
       switch ($error->level) {
           case LIBXML_ERR_WARNING:
               $return .= 'Warning ',$error->code.': ';
               break;
            case LIBXML_ERR_ERROR:
               $return .= 'Error '.$error->code.': ';
               break;
           case LIBXML_ERR_FATAL:
               $return .= 'Fatal Error '.$error->code.': ';
               break;
       }
   
       $return .= trim($error->message) .
                  PHP_EOL.'  Line: '.$error->line .
                  PHP_EOL.'  Column: '.$error->column;
   
       if ($error->file) {
           $return .= "\n  File: $error->file";
       }
   
       return $return.PHP_EOL.PHP_EOL.'--------------------------------------------'.PHP_EOL.PHP_EOL;
   }
   
   ?>


See also `libxml <http://www.php.net/manual/en/book.libxml.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extlibxml |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extlua:

.. _ext-lua:

ext/lua
+++++++

 Extension Lua.

'Lua is a powerful, fast, light-weight, embeddable scripting language.' This extension embeds the lua interpreter and offers an OO-API to lua variables and functions.

.. code-block:: php

   <?php
   $lua = new Lua();
   $lua->eval(<<<CODE
       print(2);
   CODE
   );
   ?>


See also `ext/lua manual <https://www.php.net/manual/en/book.lua.php>`_ and 
         `LUA <https://www.lua.org/>`_

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extlua |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extlzf:

.. _ext-lzf:

ext/lzf
+++++++

 Extension LZF.

LZF is a very fast compression algorithm, ideal for saving space with only slight speed cost. It can be optimized for speed or space at the time of compilation.

.. code-block:: php

   <?php
   $compressed = lzf_compress(This is test of LZF extension);
   
   echo base64_encode($compressed);
   ?>


See also `lzf <https://www.php.net/lzf>`_ and `liblzf <http://oldhome.schmorp.de/marc/liblzf.html>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extlzf |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.3.5             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extmail:

.. _ext-mail:

ext/mail
++++++++

 Extension for mail.

The `mail() <https://www.php.net/mail>`_ function allows you to send mail.

.. code-block:: php

   <?php
   // The message
   $message = "Line 1\r\nLine 2\r\nLine 3";
   
   // In case any of our lines are larger than 70 characters, we should use wordwrap()
   $message = wordwrap($message, 70, "\r\n");
   
   // Send
   mail('caffeinated@example.com', 'My Subject', $message);
   ?>


See also `Mail related functions <http://www.php.net/manual/en/book.mail.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extmail |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extmailparse:

.. _ext-mailparse:

ext/mailparse
+++++++++++++

 Extension mailparse.

Mailparse is an extension for parsing and working with email messages. It can deal with `RFC 822 (MIME) <http://www.faqs.org/rfcs/rfc822.html>`_ and `RFC 2045 (MIME) <http://www.faqs.org/rfcs/rfc2045.html>`_ compliant messages.

.. code-block:: php

   <?php
   
   $mail = mailparse_msg_create();
   mailparse_msg_parse($mail, $mailInString);
   $parts = mailparse_msg_get_structure($mail); 
   
   foreach($parts as $part) { 
       $section = mailparse_msg_get_part($mail, $part); 
       $info = mailparse_msg_get_part_data($section); 
   }
   
   ?>


See also `Mailparse <https://www.php.net/manual/en/book.mailparse.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extmailparse |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extmath:

.. _ext-math:

ext/math
++++++++

 Core functions that provides math standard functions.

This is not a real extension : it is a documentation section, that helps sorting the functions. 

.. code-block:: php

   <?php
   echo decbin(12) . PHP_EOL;
   echo decbin(26);
   ?>


See also `Mathematical Functions <https://www.php.net/manual/en/book.math.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extmath |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extmbstring:

.. _ext-mbstring:

ext/mbstring
++++++++++++

 Extension ``ext/mbstring``.

``mbstring`` provides multibyte specific string functions that help you deal with multibyte encodings in PHP.

.. code-block:: php

   <?php
   /* Convert internal character encoding to SJIS */
   $str = mb_convert_encoding($str, "SJIS");
   
   /* Convert EUC-JP to UTF-7 */
   $str = mb_convert_encoding($str, "UTF-7", "EUC-JP");
   
   /* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */
   $str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");
   
   /* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
   $str = mb_convert_encoding($str, "EUC-JP", "auto");
   ?>


See also `Mbstring <http://www.php.net/manual/en/book.mbstring.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extmbstring |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extmcrypt:

.. _ext-mcrypt:

ext/mcrypt
++++++++++

 Extension for mcrypt.

This extension has been deprecated as of PHP 7.1.0 and moved to PECL as of PHP 7.2.0.

This is an interface to the mcrypt library, which supports a wide variety of block algorithms such as DES, TripleDES, Blowfish (default), 3-WAY, SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 and GOST in CBC, OFB, CFB and ECB cipher modes. Additionally, it supports RC6 and IDEA which are considered 'non-free'. CFB/OFB are 8bit by default.

.. code-block:: php

   <?php
       # --- ENCRYPTION ---
   
       # the key should be random binary, use scrypt, bcrypt or PBKDF2 to
       # convert a string into a key
       # key is specified using hexadecimal
       $key = pack('H*', 'bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3');
       
       # show key size use either 16, 24 or 32 byte keys for AES-128, 192
       # and 256 respectively
       $key_size =  strlen($key);
       echo 'Key size: ' . $key_size . PHP_EOL;
       
       $plaintext = 'This string was AES-256 / CBC / ZeroBytePadding encrypted.';
   
       # create a random IV to use with CBC encoding
       $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
       $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
       
       # creates a cipher text compatible with AES (Rijndael block size = 128)
       # to keep the text confidential 
       # only suitable for encoded input that never ends with value 00h
       # (because of default zero padding)
       $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
                                    $plaintext, MCRYPT_MODE_CBC, $iv);
   
       # prepend the IV for it to be available for decryption
       $ciphertext = $iv . $ciphertext;
       
       # encode the resulting cipher text so it can be represented by a string
       $ciphertext_base64 = base64_encode($ciphertext);
   
       echo  $ciphertext_base64 . PHP_EOL;
   
       # === WARNING ===
   
       # Resulting cipher text has no integrity or authenticity added
       # and is not protected against padding oracle attacks.
       
       # --- DECRYPTION ---
       
       $ciphertext_dec = base64_decode($ciphertext_base64);
       
       # retrieves the IV, iv_size should be created using mcrypt_get_iv_size()
       $iv_dec = substr($ciphertext_dec, 0, $iv_size);
       
       # retrieves the cipher text (everything except the $iv_size in the front)
       $ciphertext_dec = substr($ciphertext_dec, $iv_size);
   
       # may remove 00h valued characters from end of plain text
       $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,
                                       $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
       
       echo  $plaintext_dec . PHP_EOL;
   ?>


See also `extension mcrypt <http://www.php.net/manual/en/book.mcrypt.php>`_ and `mcrypt <http://mcrypt.sourceforge.net/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extmcrypt |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extmemcache:

.. _ext-memcache:

ext/memcache
++++++++++++

 Extension `Memcache <https://www.php.net/Memcache>`_.

`Memcache <https://www.php.net/Memcache>`_ module provides handy procedural and object oriented interface to memcached, highly effective caching daemon, which was especially designed to decrease database load in dynamic web applications.

.. code-block:: php

   <?php
   
   $memcache = new Memcache;
   $memcache->connect('localhost', 11211) or die ('Could not connect');
   
   $version = $memcache->getVersion();
   echo 'Server\'s version: '.$version.'<br/>';
   
   $tmp_object = new stdClass;
   $tmp_object->str_attr = 'test';
   $tmp_object->int_attr = 123;
   
   $memcache->set('key', $tmp_object, false, 10) or die ('Failed to save data at the server');
   echo 'Store data in the cache (data will expire in 10 seconds)<br/>';
   
   $get_result = $memcache->get('key');
   echo 'Data from the cache:<br/>';
   
   var_dump($get_result);
   
   ?>


See also `Memcache on PHP <http://www.php.net/manual/en/book.memcache.php>`_ and `memcached <http://www.memcached.org/>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extmemcache |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extmemcached:

.. _ext-memcached:

ext/memcached
+++++++++++++

 Extension ext-memcached.

This extension uses the libmemcached library to provide an API for communicating with memcached servers. It also provides a session handler (`memcached`).

.. code-block:: php

   <?php
   $m = new Memcached();
   $m->addServer('localhost', 11211);
   
   $m->set('foo', 100);
   var_dump($m->get('foo'));
   ?>


See also `ext/memcached manual <https://www.php.net/manual/en/book.memcached.php>`_ and `memcached <http://www.memcached.org/>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extmemcached |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | Very high               |
+--------------+-------------------------+


.. _extensions-extmhash:

.. _ext-mhash:

ext/mhash
+++++++++

 Extension mhash (obsolete since PHP 5.3.0).

This extension provides functions, intended to work with `mhash <http://mhash.sourceforge.net/>`_.

.. code-block:: php

   <?php
   $input = 'what do ya want for nothing?';
   $hash = mhash(MHASH_MD5, $input);
   echo 'The hash is ' . bin2hex($hash) . '<br />'.PHP_EOL;
   $hash = mhash(MHASH_MD5, $input, 'Jefe');
   echo 'The hmac is ' . bin2hex($hash) . '<br />'.PHP_EOL;
   ?>


See also `Extension mhash <https://www.php.net/manual/en/book.mhash.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extmhash |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.9.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Major               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extming:

.. _ext-ming:

ext/ming
++++++++

 Extension ext/ming, to create swf files with PHP.

Ming is an open-source (LGPL) library which allows you to create SWF ('Flash') format movies. 

.. code-block:: php

   <?php
     $s = new SWFShape();
     $f = $s->addFill(0xff, 0, 0);
     $s->setRightFill($f);
   
     $s->movePenTo(-500, -500);
     $s->drawLineTo(500, -500);
     $s->drawLineTo(500, 500);
     $s->drawLineTo(-500, 500);
     $s->drawLineTo(-500, -500);
   
     $p = new SWFSprite();
     $i = $p->add($s);
     $i->setDepth(1);
     $p->nextFrame();
   
     for ($n=0; $n<5; ++$n) {
       $i->rotate(-15);
       $p->nextFrame();
     }
   
     $m = new SWFMovie();
     $m->setBackground(0xff, 0xff, 0xff);
     $m->setDimension(6000, 4000);
   
     $i = $m->add($p);
     $i->setDepth(1);
     $i->moveTo(-500,2000);
     $i->setName('box');
   
     $m->add(new SWFAction('/box.x += 3;'));
     $m->nextFrame();
     $m->add(new SWFAction('gotoFrame(0); play();'));
     $m->nextFrame();
   
     header('Content-type: application/x-shockwave-flash');
     $m->output();
   ?>


See also `Ming (flash) <http://www.libming.org/>`_ and `Ming <http://www.libming.org/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extming |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Major              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extmongo:

.. _ext-mongo:

ext/mongo
+++++++++

 Extension `MongoDB <https://www.php.net/MongoDB>`_ driver (legacy).

.. code-block:: php

   <?php
   
   // connect
   $m = new MongoClient();
   
   // select a database
   $db = $m->comedy;
   
   // select a collection (analogous to a relational database\'s table)
   $collection = $db->cartoons;
   
   // add a record
   $document = array( 'title' => 'Calvin and Hobbes', 'author' => 'Bill Watterson' );
   $collection->insert($document);
   
   // add another record, with a different 'shape'
   $document = array( 'title' => 'XKCD', 'online' => true );
   $collection->insert($document);
   
   // find everything in the collection
   $cursor = $collection->find();
   
   // iterate through the results
   foreach ($cursor as $document) {
       echo $document['title'] . PHP_EOL;
   }
   
   ?>


Note : this is not the `MongoDB driver <https://www.php.net/mongo>`_. This is the legacy extension.

See also `ext/mongo manual <https://www.php.net/manual/en/book.mongo.php>`_ and `MongdDb <https://www.mongodb.com/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extmongo |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extmongodb:

.. _ext-mongodb:

ext/mongodb
+++++++++++

 Extension MongoDb.

Do not mistake with extension `Mongo <https://www.php.net/Mongo>`_, the previous version.

Mongodb driver supports both PHP and HHVM and is developed atop the `libmongoc <https://github.com/mongodb/mongo-c-driver>`_ and `libbson <https://github.com/mongodb/libbson>`_ libraries. 

.. code-block:: php

   <?php
   require 'vendor/autoload.php'; // include Composer's autoloader
   
   $client = new MongoDB\Client(mongodb://localhost:27017);
   $collection = $client->demo->beers;
   
   $result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );
   
   echo Inserted with Object ID {$result->getInsertedId()};
   ?>

 
See also `MongoDB driver <https://www.php.net/manual/en/set.mongodb.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extmongodb |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.9.5                 |
+--------------+-----------------------+
| PHP Version  | 7.0+                  |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extmsgpack:

.. _ext-msgpack:

ext/msgpack
+++++++++++

 Extension msgPack.

This extension provide API for communicating with `MessagePack <https://www.php.net/MessagePack>`_ serialization.

.. code-block:: php

   <?php
   
       $serialized = msgpack_serialize(array('a' => true, 'b' => 4));
       $unserialized = msgpack_unserialize($serialized);
   
   ?>


See also `msgpack for PHP <https://github.com/msgpack/msgpack-php>`_ and `MessagePack <https://msgpack.org/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extmsgpack |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.3.5                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extmssql:

.. _ext-mssql:

ext/mssql
+++++++++

 Extension MSSQL, Microsoft SQL Server.

These functions allow you to access MS SQL Server database.

.. code-block:: php

   <?php
   // Connect to MSSQL
   $link = mssql_connect('KALLESPC\SQLEXPRESS', 'sa', 'phpfi');
   
   if (!$link || !mssql_select_db('php', $link)) {
       die('Unable to connect or select database!');
   }
   
   // Do a simple query, select the version of 
   // MSSQL and print it.
   $version = mssql_query('SELECT @@VERSION');
   $row = mssql_fetch_array($version);
   
   echo $row[0];
   
   // Clean up
   mssql_free_result($version);
   ?>


See also `Microsoft SQL Server <http://www.php.net/manual/en/book.mssql.php>`_ and `Microsoft PHP Driver for SQL Server <https://docs.microsoft.com/en-us/sql/connect/php/microsoft-php-driver-for-sql-server>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extmssql |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extmysql:

.. _ext-mysql:

ext/mysql
+++++++++

 Extension for MySQL (Original MySQL API).

This extension is deprecated as of PHP 5.5.0, and has been removed as of PHP 7.0.0. Instead, either the `mysqli <https://www.php.net/mysqli>`_ or PDO_MySQL extension should be used. See also the MySQL API Overview for further help while choosing a MySQL API. .. code-block:: php <?php $result = mysql_query('SELECT * WHERE 1=1'); if (!$result) { die('Invalid query: ' . mysql_error()); } ?> See also `Original MySQL API <http://www.php.net/manual/en/book.mysql.php>`_ and `MySQL <http://www.mysql.com/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extmysql |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | 7.0-                |
+--------------+---------------------+
| Severity     | Major               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extmysqli:

.. _ext-mysqli:

ext/mysqli
++++++++++

 Extension `mysqli <https://www.php.net/mysqli>`_ for MySQL.

The `mysqli <https://www.php.net/mysqli>`_ extension allows you to access the functionality provided by MySQL 4.1 and above.

.. code-block:: php

   <?php
   $mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');
   
   /* check connection */
   if (mysqli_connect_errno()) {
       printf('Connect failed: %s\n', mysqli_connect_error());
       exit();
   }
   
   $city = 'Amersfoort';
   
   /* create a prepared statement */
   if ($stmt = $mysqli->prepare('SELECT District FROM City WHERE Name=?')) {
   
       /* bind parameters for markers */
       $stmt->bind_param('s', $city);
   
       /* execute query */
       $stmt->execute();
   
       /* bind result variables */
       $stmt->bind_result($district);
   
       /* fetch value */
       $stmt->fetch();
   
       printf('%s is in district %s\n', $city, $district);
   
       /* close statement */
       $stmt->close();
   }
   
   /* close connection */
   $mysqli->close();
   ?>


See also `MySQL Improved Extension <https://www.php.net/manual/en/book.`mysqli <https://www.php.net/mysqli>`_.php>`_ and `MySQL <http://www.mysql.com/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extmysqli |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extncurses:

.. _ext-ncurses:

ext/ncurses
+++++++++++

 Extension ncurses (CLI).

ncurses (new curses) is a free software emulation of curses in System V Rel 4.0 (and above). 

.. code-block:: php

   <?php
   ncurses_init();
   ncurses_start_color();
   ncurses_init_pair(1, NCURSES_COLOR_GREEN, NCURSES_COLOR_BLACK);
   ncurses_init_pair(2, NCURSES_COLOR_RED,   NCURSES_COLOR_BLACK);
   ncurses_init_pair(3, NCURSES_COLOR_WHITE, NCURSES_COLOR_BLACK);
   ncurses_color_set(1);
   ncurses_addstr('OK   ');
   ncurses_color_set(3);
   ncurses_addstr('Success!'.PHP_EOL);
   ncurses_color_set(2);
   ncurses_addstr('FAIL ');
   ncurses_color_set(3);
   ncurses_addstr('Success!'.PHP_EOL);
   ?>


See also `Ncurses Terminal Screen Control <https://www.php.net/manual/en/book.ncurses.php>`_ and `Ncurses <https://www.gnu.org/software/ncurses/ncurses.html>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extncurses |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.9.2                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extnewt:

.. _ext-newt:

ext/newt
++++++++

 Newt PHP CLI extension.

This is a PHP language extension for RedHat Newt library, a terminal-based window and widget library for writing applications with user friendly interface.

.. code-block:: php

   <?php
   newt_init ();
   newt_cls ();
   
   newt_draw_root_text (0, 0, Test Mode Setup Utility 1.12);
   newt_push_help_line (null);
   
   newt_get_screen_size ($rows, $cols);
   
   newt_open_window ($rows/2-17, $cols/2-10, 34, 17, Choose a Tool);
   
   $form = newt_form ();
   
   $list = newt_listbox (3, 2, 10);
   
   foreach (array (
       Authentication configuration,
       Firewall configuration,
       Mouse configuration,
       Network configuration,
       Printer configuration,
       System services) as $l_item)
   {
       newt_listbox_add_entry ($list, $l_item, $l_item);
   }
   
   $b1 = newt_button (5, 12, Run Tool);
   $b2 = newt_button (21, 12, Quit);
   
   newt_form_add_component ($form, $list);
   newt_form_add_components ($form, array($b1, $b2));
   
   newt_refresh ();
   newt_run_form ($form);
   
   newt_pop_window ();
   newt_pop_help_line ();
   newt_finished ();
   newt_form_destroy ($form);
   ?>


See also `Newt <http://people.redhat.com/rjones/ocaml-newt/html/Newt.html>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extnewt |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.9.2              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extnsapi:

.. _ext-nsapi:

ext/nsapi
+++++++++

 NSAPI specific functions calls. 

These functions are only available when running PHP as a NSAPI module in Netscape/iPlanet/Sun webservers.

.. code-block:: php

   <?php
   
   // This scripts depends on ext/nsapi
   if (ini_get('nsapi.read_timeout') < 60) {
       doSomething();
   }
   
   ?>


See also `Sun, iPlanet and Netscape servers on Sun Solaris <https://www.php.net/manual/en/install.unix.sun.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extnsapi |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.9.2               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extob:

.. _ext-ob:

ext/ob
++++++

 Extension Output Buffering Control.

The Output Control functions allow you to control when output is sent from the script.

.. code-block:: php

   <?php
   
   ob_start();
   echo Hello\n;
   
   setcookie(cookiename, cookiedata);
   
   ob_end_flush();
   
   ?>



See also `Output Buffering Control <https://www.php.net/manual/en/book.outcontrol.php>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Extensions/Extob |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _extensions-extoci8:

.. _ext-oci8:

ext/oci8
++++++++

 Extension ext/oci8.

OCI8 gives access Oracle Database 12c, 11g, 10g, 9i and 8i. 

.. code-block:: php

   <?php
   
   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
   if (!$conn) {
       $e = oci_error();
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Prepare the statement
   $stid = oci_parse($conn, 'SELECT * FROM departments');
   if (!$stid) {
       $e = oci_error($conn);
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Perform the logic of the query
   $r = oci_execute($stid);
   if (!$r) {
       $e = oci_error($stid);
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Fetch the results of the query
   print '<table border='1'>' . PHP_EOL;
   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
       print '<tr>' . PHP_EOL;
       foreach ($row as $item) {
           print '    <td>' . ($item !== null ? htmlentities($item, ENT_QUOTES) : '&nbsp;') . '</td>' . PHP_EOL;
       }
       print '</tr>' . PHP_EOL;
   }
   print '</table>' . PHP_EOL;
   
   oci_free_statement($stid);
   oci_close($conn);
   
   ?>


See also `Oracle OCI8 <https://www.php.net/manual/en/book.oci8.php>`_ and `Oracle <https://www.oracle.com/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extoci8 |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extodbc:

.. _ext-odbc:

ext/odbc
++++++++

 Extension ODBC.

In addition to normal ODBC support, the Unified ODBC functions in PHP allow you to access several databases that have borrowed the semantics of the ODBC API to implement their own API. Instead of maintaining multiple database drivers that were all nearly identical, these drivers have been unified into a single set of ODBC functions.

.. code-block:: php

   <?php
   $a = 1;
   $b = 2;
   $c = 3;
   $stmt    = odbc_prepare($conn, 'CALL myproc(?,?,?)');
   $success = odbc_execute($stmt, array($a, $b, $c));
   ?>


See also `ODBC (Unified) <http://www.php.net/manual/en/book.uodbc.php>`_, `Unixodbc <http://www.unixodbc.org/>`_ and `IODBC <http://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/WelcomeVisitors>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extodbc |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extopcache:

.. _ext-opcache:

ext/opcache
+++++++++++

 Extension opcache.

OPcache improves PHP performance by storing precompiled script bytecode in shared memory, thereby removing the need for PHP to load and parse scripts on each request.

.. code-block:: php

   <?php
   
   echo opcache_compile_file('/var/www/index.php');
   
   print_r(opcache_get_status());
   
   ?>


See also `OPcache functions <http://www.php.net/manual/en/book.opcache.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extopcache |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extopencensus:

.. _ext-opencensus:

ext/opencensus
++++++++++++++

 Extension PHP for OpenCensus : 

A stats collection and distributed tracing framework.

.. code-block:: php

   <?php
   opencensus_trace_begin('root', ['spanId' => '1234']);
   opencensus_trace_add_annotation('foo');
   opencensus_trace_begin('inner', []);
   opencensus_trace_add_annotation('asdf', ['spanId' => '1234']);
   opencensus_trace_add_annotation('abc');
   opencensus_trace_finish();
   opencensus_trace_finish();
   $traces = opencensus_trace_list();
   echo Number of traces: . count($traces) . \n;
   $span = $traces[0];
   print_r($span->timeEvents());
   $span2 = $traces[1];
   print_r($span2->timeEvents());
   ?>



See also `opencensus <https://github.com/census-instrumentation/opencensus-php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Extensions/Extopencensus |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 1.1.7                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _extensions-extopenssl:

.. _ext-openssl:

ext/openssl
+++++++++++

 Extension Openssl.

This extension binds functions of ``OpenSSL`` library for symmetric and asymmetric encryption and decryption, ``PBKDF2``, ``PKCS7``, ``PKCS12``, ``X509`` and other cryptographic operations. In addition to that it provides implementation of ``TLS`` streams.

.. code-block:: php

   <?php
   // $data and $signature are assumed to contain the data and the signature
   
   // fetch public key from certificate and ready it
   $pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");
   
   // state whether signature is okay or not
   $ok = openssl_verify($data, $signature, $pubkeyid);
   if ($ok == 1) {
       echo "good";
   } elseif ($ok == 0) {
       echo "bad";
   } else {
       echo "ugly, error checking signature";
   }
   // free the key from memory
   openssl_free_key($pubkeyid);
   ?>


See also `ext/OpenSSL <https://www.php.net/manual/en/book.openssl.php>`_ and `OpenSSL <https://www.openssl.org/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extopenssl |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extparle:

.. _ext-parle:

ext/parle
+++++++++

 Extension Parser and Lexer.

The parle extension provides lexing and parsing facilities. The implementation is based on » Ben Hanson's libraries and requires a » C++14 capable compiler. 

.. code-block:: php

   <?php
   
   use Parle\{Token, Lexer, LexerException};
   
   /* name => id */
   $token = array(
           'EOI' => 0,
           'COMMA' => 1,
           'CRLF' => 2,
           'DECIMAL' => 3,
   );
   /* id => name */
   $token_rev = array_flip($token);
   
   $lex = new Lexer;
   $lex->push("[\x2c]", $token['COMMA']);
   $lex->push("[\r][\n]", $token['CRLF']);
   $lex->push("[\d]+", $token['DECIMAL']);
   $lex->build();
   
   $in = 0,1,2\r\n3,42,5\r\n6,77,8\r\n;
   
   $lex->consume($in);
   
   do {
           $lex->advance();
           $tok = $lex->getToken();
   
           if (Token::UNKNOWN == $tok->id) {
                   throw new LexerException('Unknown token "'.$tok->value.'" at offset '.$tok->offset.'.');
           }
   
           echo 'TOKEN: ', $token_rev[$tok->id], PHP_EOL;
   } while (Token::EOI != $tok->id);
   
   ?>


See also `Parsing and Lexing <https://www.php.net/manual/en/book.parle.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extparle |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.12.12             |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extparsekit:

.. _ext-parsekit:

ext/parsekit
++++++++++++

 Extension Parsekit.

These functions allow runtime analysis of opcodes compiled from PHP scripts.

.. code-block:: php

   <?php
   var_dump(parsekit_compile_file('hello_world.php', $errors, PARSEKIT_SIMPLE));
   ?>


See also `Parsekit <http://www.php.net/manual/en/book.parsekit.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extparsekit |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extpassword:

.. _ext-password:

ext/password
++++++++++++

 Extension password.

The password hashing API provides an easy to use wrapper around `crypt() <https://www.php.net/crypt>`_ and some other password hashing algorithms, to make it easy to create and manage passwords in a secure manner.

.. code-block:: php

   <?php
   // See the password_hash() example to see where this came from.
   $hash = '\$2y\$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';
   
   if (password_verify('rasmuslerdorf', $hash)) {
       echo 'Password is valid!';
   } else {
       echo 'Invalid password.';
   }
   ?>


See also `Password Hashing <https://www.php.net/manual/en/book.password.php>`_ and `crypt man page <http://man7.org/linux/man-pages/man3/crypt.3.html>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extpassword |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extpcntl:

.. _ext-pcntl:

ext/pcntl
+++++++++

 Extension for process control.

Process Control support in PHP implements the Unix style of process creation, program execution, signal handling and process termination. Process Control should not be enabled within a web server environment and unexpected results may happen if any Process Control functions are used within a web server environment.

.. code-block:: php

   <?php
   declare(ticks=1);
   
   $pid = pcntl_fork();
   if ($pid == -1) {
        die('could not fork'); 
   } else if ($pid) {
        exit(); // we are the parent 
   } else {
        // we are the child
   }
   
   // detatch from the controlling terminal
   if (posix_setsid() == -1) {
       die('could not detach from terminal');
   }
   
   // setup signal handlers
   pcntl_signal(SIGTERM, 'sig_handler');
   pcntl_signal(SIGHUP, 'sig_handler');
   
   // loop forever performing tasks
   while (1) {
   
       // do something interesting here
   
   }
   
   function sig_handler($signo) 
   {
   
        switch ($signo) {
            case SIGTERM:
                // handle shutdown tasks
                exit;
                break;
            case SIGHUP:
                // handle restart tasks
                break;
            default:
                // handle all other signals
        }
   
   }
   
   ?>


See also `Process Control <https://www.php.net/manual/en/book.pcntl.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extpcntl |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extpcov:

.. _ext-pcov:

ext/pcov
++++++++

 CodeCoverage compatible driver for PHP

A `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ contained CodeCoverage compatible driver for PHP7

.. code-block:: php

   <?php
   \pcov\start();
   $d = [];
   for ($i = 0; $i < 10; $i++) {
   	$d[] = $i * 42;
   }
   \pcov\stop();
   var_dump(\pcov\collect());
   ?>


See also `PCOV <https://github.com/krakjoe/pcov>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extpcov |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.6.5              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Quick (30 mins)    |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extpcre:

.. _ext-pcre:

ext/pcre
++++++++

 Extension ext/pcre. PCRE stands for Perl Compatible Regular Expression. It is a standard PHP extension.

.. code-block:: php

   <?php
   
   $zip_code = $_GET['zip'];
   
   // Canadian Zip code H2M 3J1
   $zip_ca = '/^([a-zA-Z]\d[a-zA-Z])\ {0,1}(\d[a-zA-Z]\d)$/';
   
   // French Zip code  75017
   $zip_fr = '/^\d{5}$/';
   
   // Chinese Zip code  590615
   $zip_cn = '/^\d{6}$/';
   
   var_dump(preg_match($_GET['zip']));
   
   ?>


See also `Regular Expressions (Perl-Compatible) <https://www.php.net/manual/en/book.pcre.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extpcre |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extpdo:

.. _ext-pdo:

ext/pdo
+++++++

 Generic extension PDO.

The PHP Data Objects (PDO) extension defines a lightweight, consistent interface for accessing databases in PHP. 

.. code-block:: php

   <?php
   /* Execute a prepared statement by passing an array of values */
   $sql = 'SELECT name, colour, calories
       FROM fruit
       WHERE calories < :calories AND colour = :colour';
   $sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
   $sth->execute(array(':calories' => 150, ':colour' => 'red'));
   $red = $sth->fetchAll();
   $sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
   $yellow = $sth->fetchAll();
   ?>


See also `PHP Data Object <https://www.php.net/manual/en/book.pdo.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extpdo |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extpgsql:

.. _ext-pgsql:

ext/pgsql
+++++++++

 Extension PostGreSQL.

PostgreSQL is an open source descendant of this original Berkeley code.  It provides SQL92/SQL99 language support, transactions, referential integrity, stored procedures and type extensibility. 

.. code-block:: php

   <?php
   // Connect to a database named 'mary'
   $dbconn = pg_connect('dbname=mary');
   
   // Prepare a query for execution
   $result = pg_prepare($dbconn, 'my_query', 'SELECT * FROM shops WHERE name = \$1');
   
   // Execute the prepared query.  Note that it is not necessary to escape
   // the string 'Joe's Widgets' in any way
   $result = pg_execute($dbconn, 'my_query', array('Joe\'s Widgets'));
   
   // Execute the same prepared query, this time with a different parameter
   $result = pg_execute($dbconn, 'my_query', array('Clothes Clothes Clothes'));
   
   ?>


See also `PostgreSQL <https://www.php.net/manual/en/book.pgsql.php>`_ and `PostgreSQL: The world's most advanced open source database <https://www.postgresql.org/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extpgsql |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extphalcon:

.. _ext-phalcon:

ext/phalcon
+++++++++++

 Extension Phalcon : High Performance PHP Framework.

Phalcon's autoload examples from the docs :  `Tutorial 1: Let’s learn by example <https://docs.phalconphp.com/en/latest/reference/tutorial.html>`_

.. code-block:: php

   <?php
   
   use Phalcon\Loader;
   
   // ...
   
   $loader = new Loader();
   
   $loader->registerDirs(
       [
           ../app/controllers/,
           ../app/models/,
       ]
   );
   
   $loader->register();
   
   ?>


See also `PhalconPHP <https://phalconphp.com/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extphalcon |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extphar:

.. _ext-phar:

ext/phar
++++++++

 Extension phar.

The phar extension provides a way to put entire PHP applications into a single file called a ``phar`` (PHP Archive) for easy distribution and installation. 

.. code-block:: php

   <?php
   try {
       $p = new Phar('/path/to/my.phar', 0, 'my.phar');
       $p['myfile.txt'] = 'hi';
       $file = $p['myfile.txt'];
       var_dump($file->isCompressed(Phar::BZ2));
       $p['myfile.txt']->compress(Phar::BZ2);
       var_dump($file->isCompressed(Phar::BZ2));
   } catch (Exception $e) {
       echo 'Create/modify operations on my.phar failed: ', $e;
   }
   ?>


See also `phar <http://www.php.net/manual/en/book.phar.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extphar |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extposix:

.. _ext-posix:

ext/posix
+++++++++

 Extension POSIX.

Ext/posix contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.

.. code-block:: php

   <?php
   posix_kill(999459,SIGKILL);
   echo 'Your error returned was '.posix_get_last_error(); //Your error was ___
   ?>


See also `1003.1-2008 - IEEE Standard for Information Technology - Portable Operating System Interface (POSIX(R)) <https://standards.ieee.org/findstds/standard/1003.1-2008.html>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extposix |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extproctitle:

.. _ext-proctitle:

ext/proctitle
+++++++++++++

 Extension proctitle.

This extension allows changing the current process', and thread, name on Linux and *BSD systems. This is useful when using `pcntl_fork() <https://www.php.net/pcntl_fork>`_ to identify running processes in process list

.. code-block:: php

   <?php
   setproctitle('myscript');
   ?>


See also `proctitle <https://www.php.net/manual/en/book.proctitle.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extproctitle |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extpspell:

.. _ext-pspell:

ext/pspell
++++++++++

 Extension pspell.

These functions allow you to check the spelling of a word and offer suggestions.

.. code-block:: php

   <?php
   $pspell_link = pspell_new('en');
   
   if (pspell_check($pspell_link, 'testt')) {
       echo 'This is a valid spelling';
   } else {
       echo 'Sorry, wrong spelling';
   }
   ?>


See also `Pspell <https://www.php.net/manual/en/book.pspell.php>`_ and `pspell <https://en.wikipedia.org/wiki/Pspell>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extpspell |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extpsr:

.. _ext-psr:

ext/psr
+++++++

 Extension PSR : PHP Standards Recommendations.

This PHP extension provides the interfaces from the PSR standards as established by the PHP-FIG group. You can use interfaces provided by this extension in another extension easily - see this example.

Currently supported PSR : 

* `PSR-3 <https://www.php-fig.org/psr/psr-3>`_ - `psr/http-message`
* `PSR-11 <https://www.php-fig.org/psr/psr-11>`_ - `psr/container`
* `PSR-13 <https://www.php-fig.org/psr/psr-13>`_ - `psr/link`
* `PSR-15 <https://www.php-fig.org/psr/psr-15>`_ - `psr/http-server`
* `PSR-16 <https://www.php-fig.org/psr/psr-16>`_ - `psr/simple-cache`
* `PSR-17 <https://www.php-fig.org/psr/psr-17>`_ - `psr/http-factory`


.. code-block:: php

   <?php
   // Example from the tests, for Cache (PSR-6)
   use Psr\Cache\CacheException;
   class MyCacheException extends Exception implements CacheException {}
   $ex = new MyCacheException('test');
   var_dump($ex instanceof CacheException);
   var_dump($ex instanceof Exception);
   try {
       throw $ex;
   } catch( CacheException $e ) {
       var_dump($e->getMessage());
   }
   ?>


See also `php-psr <https://github.com/jbboehr/php-psr>`_ and `PHP-FIG <https://www.php-fig.org/>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extpsr |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.5.2             |
+--------------+-------------------+
| PHP Version  | 7.0+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extrar:

.. _ext-rar:

ext/rar
+++++++

 Extension RAR. 

Rar is a powerful and effective archiver created by Eugene Roshal. This extension gives you possibility to read Rar archives but doesn't support writing Rar archives, because this is not supported by the UnRar library and is directly prohibited by its license.

.. code-block:: php

   <?php
   
   $arch = RarArchive::open(example.rar);
   if ($arch === FALSE)
       die(Cannot open example.rar);
   
   $entries = $arch->getEntries();
   if ($entries === FALSE)
       die(Cannot retrieve entries);
   
   
   ?>


See also `Rar archiving <https://www.php.net/manual/en/book.rar.php>`_ and `rarlabs <http://www.rarlabs.com/>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extrar |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.7             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extrdkafka:

.. _ext-rdkafka:

ext/rdkafka
+++++++++++

 Extension for RDkafka.

PHP-rdkafka is a thin librdkafka binding providing a working PHP 5 / PHP 7 Kafka 0.8 / 0.9 / 0.10 client.

.. code-block:: php

   <?php
   
   $rk = new RdKafka\Producer();
   $rk->setLogLevel(LOG_DEBUG);
   $rk->addBrokers(10.0.0.1,10.0.0.2);
   
   ?>


See also `Kafka client for PHP <https://github.com/arnaud-lb/php-rdkafka>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extrdkafka |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.12.8                |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extreadline:

.. _ext-readline:

ext/readline
++++++++++++

 Extension readline.

The readline functions implement an interface to the GNU Readline library. These are functions that provide editable command lines.

.. code-block:: php

   <?php
   //get 3 commands from user
   for ($i=0; $i < 3; $i++) {
           $line = readline("Command: ");
           readline_add_history($line);
   }
   
   //dump history
   print_r(readline_list_history());
   
   //dump variables
   print_r(readline_info());
   ?>


See also `ext/readline <https://www.php.net/manual/en/book.readline.php>`_ and `The GNU Readline Library <https://tiswww.case.edu/php/chet/readline/rltop.html>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extreadline |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extrecode:

.. _ext-recode:

ext/recode
++++++++++

 Extension GNU Recode.

This module contains an interface to the GNU Recode library. The GNU Recode library converts files between various coded character sets and surface encodings.

.. code-block:: php

   <?php
   echo recode_string('us..flat', 'The following character has a diacritical mark: á');
   ?>


This extension is not available on Windows.

See also `ext/recode <http://www.php.net/manual/en/book.recode.php>`_ and `Recode <https://github.com/pinard/Recode>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extrecode |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extredis:

.. _ext-redis:

ext/redis
+++++++++

 Extension ext/redis.

The phpredis extension provides an API for communicating with the Redis key-value store. 

.. code-block:: php

   <?php
   
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE);	// don't serialize data
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);	// use built-in serialize/unserialize
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY);	// use igBinary serialize/unserialize
   
   $redis->setOption(Redis::OPT_PREFIX, 'myAppName:');	// use custom prefix on all keys
   
   /* Options for the SCAN family of commands, indicating whether to abstract
      empty results from the user.  If set to SCAN_NORETRY (the default), phpredis
      will just issue one SCAN command at a time, sometimes returning an empty
      array of results.  If set to SCAN_RETRY, phpredis will retry the scan command
      until keys come back OR Redis returns an iterator of zero
   */
   $redis->setOption(Redis::OPT_SCAN, Redis::SCAN_NORETRY);
   $redis->setOption(Redis::OPT_SCAN, Redis::SCAN_RETRY);
   ?>


See also `A PHP extension for Redis <https://github.com/phpredis/phpredis/>`_ and `Redis <https://redis.io/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extredis |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extreflection:

.. _ext-reflection:

ext/reflection
++++++++++++++

 Extension Reflection.

PHP comes with a complete reflection API that adds the ability to reverse-engineer classes, interfaces, functions, methods and extensions. Additionally, the reflection API offers ways to retrieve doc comments for functions, classes and methods.

.. code-block:: php

   <?php
   /**
    * A simple counter
    *
    * @return    int
    */
   function counter1()
   {
       static $c = 0;
       return ++$c;
   }
   
   /**
    * Another simple counter
    *
    * @return    int
    */
   $counter2 = function()
   {
       static $d = 0;
       return ++$d;
   
   };
   
   function dumpReflectionFunction($func)
   {
       // Print out basic information
       printf(
           PHP_EOL.'===> The %s function '%s''.PHP_EOL.
           '     declared in %s'.PHP_EOL.
           '     lines %d to %d'.PHP_EOL,
           $func->isInternal() ? 'internal' : 'user-defined',
           $func->getName(),
           $func->getFileName(),
           $func->getStartLine(),
           $func->getEndline()
       );
   
       // Print documentation comment
       printf('---> Documentation:'.PHP_EOL.' %s',PHP_EOL, var_export($func->getDocComment(), 1));
   
       // Print static variables if existant
       if ($statics = $func->getStaticVariables())
       {
           printf('---> Static variables: %s',PHP_EOL, var_export($statics, 1));
       }
   }
   
   // Create an instance of the ReflectionFunction class
   dumpReflectionFunction(new ReflectionFunction('counter1'));
   dumpReflectionFunction(new ReflectionFunction($counter2));
   ?>


See also `Reflection <https://www.php.net/manual/en/book.reflection.php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Extensions/Extreflection |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _extensions-extrunkit:

.. _ext-runkit:

ext/runkit
++++++++++

 Extension Runkit.

The runkit extension provides means to modify constants, user-defined functions, and user-defined classes. It also provides for custom superglobal variables and embeddable sub-interpreters via sandboxing.

.. code-block:: php

   <?php
   class Example {
       function foo() {
           echo 'foo!'.PHP_EOL;
       }
   }
   
   // create an Example object
   $e = new Example();
   
   // Add a new public method
   runkit_method_add(
       'Example',
       'add',
       '$num1, $num2',
       'return $num1 + $num2;',
       RUNKIT_ACC_PUBLIC
   );
   
   // add 12 + 4
   echo $e->add(12, 4);
   ?>


See also `runkit <https://www.php.net/manual/en/book.runkit.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extrunkit |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extsdl:

.. _ext-sdl:

ext/sdl
+++++++

 Extensions ext/sdl.

Simple DirectMedia Layer (SDL) is a cross-platform software development library designed to provide a hardware abstraction layer for computer multimedia hardware components. 

.. code-block:: php

   <?php
   /**
    * Example of how to change screen properties such as title, icon or state using the PHP-SDL extension.
    *
    * @author Santiago Lizardo <santiagolizardo@php.net>
    */
   require 'common.php';
   SDL_Init( SDL_INIT_VIDEO );
   $screen = SDL_SetVideoMode( 640, 480, 16, SDL_HWSURFACE );
   if( null == $screen )
   {
   	fprintf( STDERR, 'Error: %s' . PHP_EOL, SDL_GetError() );
   }
   for( $i = 3; $i > 0; $i-- )
   {
   	SDL_WM_SetCaption( Switching to fullscreen mode in $i seconds..., null );
   	SDL_Delay( 1000 );
   }
   SDL_WM_ToggleFullscreen( $screen );
   SDL_Delay( 3000 );
   SDL_WM_ToggleFullscreen( $screen );
   SDL_WM_SetCaption( Back from fullscreen mode. Quitting in 2 seconds..., null );
   SDL_Delay( 2000 );
   SDL_FreeSurface( $screen );
   SDL_Quit();
   
   ?>


See also `phpsdl <https://github.com/Ponup/phpsdl>`_, `Simple DirectMedia Layer <https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer>`_ and `About SDL <https://www.libsdl.org/>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extsdl |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.5.6             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extseaslog:

.. _ext-seaslog:

ext/seaslog
+++++++++++

 Extension `Seaslog <https://www.php.net/Seaslog>`_.

An effective,fast,stable log extension for PHP.

.. code-block:: php

   <?php
   $basePath_1 = SeasLog::getBasePath();
   
   SeasLog::setBasePath('/log/base_test');
   $basePath_2 = SeasLog::getBasePath();
   
   var_dump($basePath_1,$basePath_2);
   
   /*
   string(19) /log/seaslog-ciogao
   string(14) /log/base_test
   */
   
   $lastLogger_1 = SeasLog::getLastLogger();
   
   SeasLog::setLogger('testModule/app1');
   $lastLogger_2 = SeasLog::getLastLogger();
   
   var_dump($lastLogger_1,$lastLogger_2);
   /*
   string(7) default
   string(15) testModule/app1
   */
   ?>


See also `ext/SeasLog on Github <https://github.com/SeasX/SeasLog>`_, and `SeasLog <http://seasx.github.io/SeasLog/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extseaslog |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.4.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extsem:

.. _ext-sem:

ext/sem
+++++++

 Extension Semaphore, Shared Memory and IPC.

This module provides wrappers for the System V IPC family of functions. It includes semaphores, shared memory and inter-process messaging (IPC).

.. code-block:: php

   <?php
   
   $key         = ftok(__FILE__,'a');
   $semaphore   = sem_get($key);
   sem_acquire($semaphore);
   sem_release($semaphore);
   sem_remove($semaphore);
   
   ?>


See also `Semaphore, Shared Memory and IPC <https://www.php.net/manual/en/book.sem.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extsem |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extsession:

.. _ext-session:

ext/session
+++++++++++

 Extension ext/session.

Session support in PHP consists of a way to preserve certain data across subsequent accesses.

.. code-block:: php

   <?php
   session_start();
   if (!isset($_SESSION['count'])) {
     $_SESSION['count'] = 0;
   } else {
     $_SESSION['count']++;
   }
   ?>


See also `Session <https://www.php.net/manual/en/book.session.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extsession |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extshmop:

.. _ext-shmop:

ext/shmop
+++++++++

 Extension ext/shmop.

Shmop is an easy to use set of functions that allows PHP to read, write, create and delete Unix shared memory segments.

.. code-block:: php

   <?php
   // Create a temporary file and return its path
   $tmp = tempnam('/tmp', 'PHP');
   
   // Get the file token key
   $key = ftok($tmp, 'a');
   
   // Attach the SHM resource, notice the cast afterwards
   $id = shm_attach($key);
   
   if ($id === false) {
       die('Unable to create the shared memory segment');
   }
   
   // Cast to integer, since prior to PHP 5.3.0 the resource id 
   // is returned which can be exposed when casting a resource
   // to an integer
   $id = (integer) $id;
   ?>


See also `Semaphore, Shared Memory and IPC <https://www.php.net/manual/en/book.sem.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extshmop |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extsimplexml:

.. _ext-simplexml:

ext/simplexml
+++++++++++++

 Extension ``SimpleXML``.

The ``SimpleXML`` extension provides a very simple and easily usable toolset to convert XML to an object that can be processed with normal property selectors and array iterators.

.. code-block:: php

   <?php
   
   $xml = <<<'XML'
   <?xml version='1.0' standalone='yes' ? >
   <movies>
    <movie>
     <title>PHP: Behind the Parser</title>
     <characters>
      <character>
       <name>Ms. Coder</name>
       <actor>Onlivia Actora</actor>
      </character>
      <character>
       <name>Mr. Coder</name>
       <actor>El Act&#211;r</actor>
      </character>
     </characters>
     <plot>
      So, this language. It's like, a programming language. Or is it a
      scripting language? All is revealed in this thrilling horror spoof
      of a documentary.
     </plot>
     <great-lines>
      <line>PHP solves all my web problems</line>
     </great-lines>
     <rating type="thumbs">7</rating>
     <rating type="stars">5</rating>
    </movie>
   </movies>
   XML;
   
   $movies = new SimpleXMLElement($xml);
   
   echo $movies->movie[0]->plot;
   ?>


See also `SimpleXML <https://www.php.net/manual/en/book.simplexml.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extsimplexml |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extsnmp:

.. _ext-snmp:

ext/snmp
++++++++

 Extension `SNMP <https://www.php.net/SNMP>`_.

The `SNMP <https://www.php.net/SNMP>`_ extension provides a very simple and easily usable toolset for managing remote devices via the Simple Network Management Protocol.

.. code-block:: php

   <?php
   $nameOfSecondInterface = snmp3_get('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName.2');
   ?>


See also `Net `SNMP <https://www.php.net/SNMP>`_ <http://www.net-snmp.org/>`_ and `SNMP <https://www.php.net/manual/en/book.snmp.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extsnmp |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extsoap:

.. _ext-soap:

ext/soap
++++++++

 Extension SOAP.

The SOAP extension can be used to write SOAP Servers and Clients. It supports subsets of » SOAP 1.1, » SOAP 1.2 and » WSDL 1.1 specifications.

.. code-block:: php

   <?php
   
   $client = new SoapClient("some.wsdl");
   
   $client = new SoapClient("some.wsdl", array('soap_version'   => SOAP_1_2));
   
   $client = new SoapClient("some.wsdl", array('login'          => "some_name",
                                               'password'       => "some_password"));
   
   ?>


See also `SOAP <https://www.php.net/manual/en/book.soap.php>`_ and `SOAP specifications <https://www.w3.org/TR/soap/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extsoap |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extsockets:

.. _ext-sockets:

ext/sockets
+++++++++++

 Extension socket.

The socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.

.. code-block:: php

   <?php
   
   //Example #2 Socket example: Simple TCP/IP client
   //From the PHP manual
   
   error_reporting(E_ALL);
   
   echo "<h2>TCP/IP Connection</h2>\n";
   
   /* Get the port for the WWW service. */
   $service_port = getservbyname('www', 'tcp');
   
   /* Get the IP address for the target host. */
   $address = gethostbyname('www.example.com');
   
   /* Create a TCP/IP socket. */
   $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
   if ($socket === false) {
       echo 'socket_create() failed: reason: ' . socket_strerror(socket_last_error()) . PHP_EOL;
   } else {
       echo 'OK.'.PHP_EOL;
   }
   
   echo 'Attempting to connect to '$address' on port '$service_port'...';
   $result = socket_connect($socket, $address, $service_port);
   if ($result === false) {
       echo 'socket_connect() failed.\nReason: ($result) ' . socket_strerror(socket_last_error($socket)) . '\n';
   } else {
       echo 'OK.'.PHP_EOL;
   }
   
   $in = ""HEAD / HTTP/1.1\r\n"";
   $in .= ""Host: www.example.com\r\n"";
   $in .= ""Connection: Close\r\n\r\n"";
   $out = '';
   
   echo 'Sending HTTP HEAD request...';
   socket_write($socket, $in, strlen($in));
   echo "OK.\n";
   
   echo 'Reading response:\n\n';
   while ($out = socket_read($socket, 2048)) {
       echo $out;
   }
   
   echo 'Closing socket...';
   socket_close($socket);
   echo 'OK.\n\n';
   ?>


See also `Sockets <https://www.php.net/manual/en/book.sockets.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extsockets |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extsphinx:

.. _ext-sphinx:

ext/sphinx
++++++++++

 Extension for the Sphinx search server.

This extension provides bindings for Sphinx search client library. 

.. code-block:: php

   <?php
   
   $s = new SphinxClient;
   $s->setServer(localhost, 6712);
   $s->setMatchMode(SPH_MATCH_ANY);
   $s->setMaxQueryTime(3);
   
   $result = $s->query(test);
   
   var_dump($result);
   
   ?>


See also `Sphinx Client <https://www.php.net/manual/en/book.sphinx.php>`_ and `Sphinx Search <http://sphinxsearch.com/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extsphinx |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.11.3               |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extspl:

.. _ext-spl:

ext/spl
+++++++

 SPL extension.

The Standard PHP Library (SPL) is a collection of interfaces and classes that are meant to solve common problems.

.. code-block:: php

   <?php
   
   // Example with FilesystemIterator
   $files = new FilesystemIterator('/path/to/dir');
   foreach($files as $file) {
       echo $file->getFilename() . PHP_EOL;
   }
   
   ?>


See also `Standard PHP Library (SPL) <http://www.php.net/manual/en/book.spl.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extspl |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extsqlite:

.. _ext-sqlite:

ext/sqlite
++++++++++

 Extension Sqlite 2.

Support for SQLite version 2 databases. The support for this version of Sqlite is not maintained anymore. It is recommended to use ``SQLite3``.

.. code-block:: php

   <?php
   
   if ($db = sqlite_open('mysqlitedb', 0666, $sqliteerror)) { 
       sqlite_query($db, 'CREATE TABLE foo (bar varchar(10))');
       sqlite_query($db, 'INSERT INTO foo VALUES ("fnord")');
       $result = sqlite_query($db, 'select bar from foo');
       var_dump(sqlite_fetch_array($result)); 
   } else {
       die($sqliteerror);
   }
   
   ?>


See also `ext/sqlite <https://www.php.net/manual/en/book.sqlite.php>`_ and `SQLite <http://sqlite.org/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extsqlite |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extsqlite3:

.. _ext-sqlite3:

ext/sqlite3
+++++++++++

 Extension Sqlite3.

Support for SQLite version 3 databases.

.. code-block:: php

   <?php
   $db = new SQLite3('mysqlitedb.db');
   
   $results = $db->query('SELECT bar FROM foo');
   while ($row = $results->fetchArray()) {
       var_dump($row);
   }
   ?>


See also `ext/sqlite3 <https://www.php.net/manual/en/book.sqlite3.php>`_ and `Sqlite <http://sqlite.org/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extsqlite3 |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extsqlsrv:

.. _ext-sqlsrv:

ext/sqlsrv
++++++++++

 Extension for Microsoft SQL Server Driver.

The SQLSRV extension allows you to access Microsoft SQL Server and SQL Azure databases when running PHP on Windows. 

.. code-block:: php

   <?php
   $serverName = 'serverName\sqlexpress';
   $connectionInfo = array( 'Database'=>'dbName', 'UID'=>'username', 'PWD'=>'password' );
   $conn = sqlsrv_connect( $serverName, $connectionInfo);
   if( $conn === false ) {
        die( print_r( sqlsrv_errors(), true));
   }
   
   $sql = 'INSERT INTO Table_1 (id, data) VALUES (?, ?)';
   $params = array(1, 'some data');
   
   $stmt = sqlsrv_query( $conn, $sql, $params);
   if( $stmt === false ) {
        die( print_r( sqlsrv_errors(), true));
   }
   ?>


See also `Microsoft SQL Server Driver <https://www.php.net/sqlsrv>`_ and `PHP Driver for SQL Server Support for LocalDB <http://msdn.microsoft.com/en-us/library/hh487161.aspx>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extsqlsrv |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extssh2:

.. _ext-ssh2:

ext/ssh2
++++++++

 Extension ext/ssh2.

.. code-block:: php

   <?php
   /* Notify the user if the server terminates the connection */
   function my_ssh_disconnect($reason, $message, $language) {
     printf("Server disconnected with reason code [%d] and message: %s\n",
            $reason, $message);
   }
   
   $methods = array(
     'kex' => 'diffie-hellman-group1-sha1',
     'client_to_server' => array(
       'crypt' => '3des-cbc',
       'comp' => 'none'),
     'server_to_client' => array(
       'crypt' => 'aes256-cbc,aes192-cbc,aes128-cbc',
       'comp' => 'none'));
   
   $callbacks = array('disconnect' => 'my_ssh_disconnect');
   
   $connection = ssh2_connect('shell.example.com', 22, $methods, $callbacks);
   if (!$connection) die('Connection failed');
   ?>


See also `SSH2 functions <https://www.php.net/manual/en/book.ssh2.php>`_ and `ext/ssh2 on PECL <http://pecl.php.net/package/ssh2>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extssh2 |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extstandard:

.. _ext-standard:

ext/standard
++++++++++++

 Standards PHP functions.

This is not a real PHP extension : it covers the core functions.

.. code-block:: php

   <?php
   /*
   Our php.ini contains the following settings:
   
   display_errors = On
   register_globals = Off
   post_max_size = 8M
   */
   
   echo 'display_errors = ' . ini_get('display_errors') . PHP_EOL;
   echo 'register_globals = ' . ini_get('register_globals') . PHP_EOL;
   echo 'post_max_size = ' . ini_get('post_max_size') . PHP_EOL;
   echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . PHP_EOL;
   echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));
   
   function return_bytes($val) {
       $val = trim($val);
       $last = strtolower($val[strlen($val)-1]);
       switch($last) {
           // The 'G' modifier is available since PHP 5.1.0
           case 'g':
               $val *= 1024;
           case 'm':
               $val *= 1024;
           case 'k':
               $val *= 1024;
       }
   
       return $val;
   }
   
   ?>


See also `PHP Options/Info Functions <https://www.php.net/manual/en/ref.info.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extstandard |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extstats:

.. _ext-stats:

ext/stats
+++++++++

 Statistics extension.

This extension contains few dozens of functions useful for statistical computations. It is a wrapper around 2 scientific libraries, namely `DCDFLIB <https://people.sc.fsu.edu/~jburkardt/c_src/cdflib/cdflib.html>`_ (Library of C routines for Cumulative Distributions Functions, Inverses, and Other parameters) by B. Brown & J. Lavato and `RANDLIB <http://people.sc.fsu.edu/~jburkardt/f77_src/ranlib/ranlib.html>`_ by Barry Brown, James Lavato & Kathy Russell. 

.. code-block:: php

   <?php
   
   $x = [ 15, 16, 8, 6, 15, 12, 12, 18, 12, 20, 12, 14, ];
   $y = [ 17.24, 15, 14.91, 4.5, 18, 6.29, 19.23, 18.69, 7.21, 42.06, 7.5, 8,];
   
   sprintf(%2.9f, stats_covariance($a_1, $a_2));
   
   ?>


See also `Statistics <https://www.php.net/manual/en/book.stats.php>`_ and `ext/stats <https://pecl.php.net/package/stats>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extstats |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.11.5              |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extstring:

.. _string:

String
++++++

 Strings in PHP. Strings are part of the core of PHP, and are not a separate extension.

.. code-block:: php

   <?php
   $str = Mary Had A Little Lamb and She LOVED It So;
   $str = strtolower($str);
   
   echo $str; // Prints mary had a little lamb and she loved it so
   ?>


See also `String functions <https://www.php.net/manual/en/ref.strings.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extstring |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.9.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extsuhosin:

.. _ext-suhosin:

ext/suhosin
+++++++++++

 Suhosin extension.

Suhosin (pronounced 'su-ho-shin') is an advanced protection system for PHP installations. It was designed to protect servers and users from known and unknown flaws in PHP applications and the PHP core.

.. code-block:: php

   <?php
   
   // sha256 is a ext/suhosin specific function
   $sha256 = sha256($string);
   
   ?>


See also `Suhosin.org <https://suhosin.org/>`_

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extsuhosin |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extsvm:

.. _ext-svm:

ext/svm
+++++++

 Extension ``SVM``.

``SVM`` is in interface with the ``libsvm``, from . ``libsvm``is a library for Support Vector Machines, a classification tool for machine learning.

.. code-block:: php

   <?php
      $data = array(
          array(-1, 1 => 0.43, 3 => 0.12, 9284 => 0.2),
          array(1, 1 => 0.22, 5 => 0.01, 94 => 0.11),
      );
      
      $svm = new SVM();
      $model = $svm->train($data);
      
      $data = array(1 => 0.43, 3 => 0.12, 9284 => 0.2);
      $result = $model->predict($data);
      var_dump($result);
      $model->save('model.svm');
   ?>


See also `SVM <http://www.php.net/svm>`_, `LIBSVM -- A Library for Support Vector Machines <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_, `ext/svm <https://pecl.php.net/package/svm>`_ and `ianbarber/php-svm <https://github.com/ianbarber/php-svm>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extsvm |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.7.8             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extswoole:

.. _ext-swoole:

ext/swoole
++++++++++

 Swoole : Production-Grade Async programming Framework for PHP.

Swoole is an event-driven asynchronous & concurrent networking communication framework with high performance written only in C for PHP.

.. code-block:: php

   <?php
   for($i = 0; $i < 100; $i++) {
       Swoole\Coroutine::create(function() use ($i) {
           $redis = new Swoole\Coroutine\Redis();
           $res = $redis->connect('127.0.0.1', 6379);
           $ret = $redis->incr('coroutine');
           $redis->close();
           if ($i == 50) {
               Swoole\Coroutine::create(function() use ($i) {
                   $redis = new Swoole\Coroutine\Redis();
                   $res = $redis->connect('127.0.0.1', 6379);
                   $ret = $redis->set('coroutine_i', 50);
                   $redis->close();
               });
           }
       });
   }
   
   ?>


See also `Swoole <https://www.swoole.com/>`_ and `Swoole src <https://github.com/swoole/swoole-src>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extswoole |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.12.0               |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-exttidy:

.. _ext-tidy:

ext/tidy
++++++++

 Extension `Tidy <https://www.php.net/tidy>`_.

`Tidy <https://www.php.net/tidy>`_ is a binding for the `Tidy <https://www.php.net/tidy>`_ HTML clean and repair utility which allows you to not only clean and otherwise manipulate HTML documents, but also traverse the document tree.

.. code-block:: php

   <?php
   ob_start();
   ?>

<html>a html document</html>
.. code-block:: php

   <?php
   $html = ob_get_clean();
   
   // Specify configuration
   $config = array(
              'indent'         => true,
              'output-xhtml'   => true,
              'wrap'           => 200);
   
   // Tidy
   $tidy = new tidy;
   $tidy->parseString($html, $config, 'utf8');
   $tidy->cleanRepair();
   
   // Output
   echo $tidy;
   ?>


See also `Tidy <https://www.php.net/manual/en/book.`tidy <https://www.php.net/tidy>`_.php>`_ and 
         `HTML-`tidy <https://www.php.net/tidy>`_ <http://www.html-`tidy <https://www.php.net/tidy>`_.org/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Exttidy |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-exttokenizer:

.. _ext-tokenizer:

ext/tokenizer
+++++++++++++

 Extension Tokenizer.

The Tokenizer functions provide an interface to the PHP tokenizer embedded in the Zend Engine.

.. code-block:: php

   <?php
   /*
   * T_ML_COMMENT does not exist in PHP 5.
   * The following three lines define it in order to
   * preserve backwards compatibility.
   *
   * The next two lines define the PHP 5 only T_DOC_COMMENT,
   * which we will mask as T_ML_COMMENT for PHP 4.
   */
   if (!defined('T_ML_COMMENT')) {
      define('T_ML_COMMENT', T_COMMENT);
   } else {
      define('T_DOC_COMMENT', T_ML_COMMENT);
   }
   
   $source = file_get_contents('example.php');
   $tokens = token_get_all($source);
   
   foreach ($tokens as $token) {
      if (is_string($token)) {
          // simple 1-character token
          echo $token;
      } else {
          // token array
          list($id, $text) = $token;
   
          switch ($id) { 
              case T_COMMENT: 
              case T_ML_COMMENT: // we\'ve defined this
              case T_DOC_COMMENT: // and this
                  // no action on comments
                  break;
   
              default:
                  // anything else -> output 'as is'
                  echo $text;
                  break;
          }
      }
   }
   ?>


See also `tokenizer <http://www.php.net/tokenizer>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Exttokenizer |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-exttokyotyrant:

.. _ext-tokyotyrant:

ext/tokyotyrant
+++++++++++++++

 Extension for Tokyo Tyrant.

tokyo_tyrant extension provides a wrapper for Tokyo Tyrant client libraries. 

.. code-block:: php

   <?php
   $tt = new TokyoTyrant("localhost");
   $tt->put("key", "value");
   echo $tt->get("key");
   ?>


See also `tokyo_tyrant <https://www.php.net/manual/en/book.tokyo-tyrant.php>`_ and `Tokyo cabinet <http://fallabs.com/tokyocabinet/>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Extensions/Exttokyotyrant |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _extensions-exttrader:

.. _ext-trader:

ext/trader
++++++++++

 Extension trader.

The trader extension is a free open source stock library based on TA-Lib. It's dedicated to trading software developers requiring to perform technical analysis of financial market data. 

.. code-block:: php

   <?php
   
   // get_data() reads the data from a source 
   var_dump(trader_avgprice(
   	get_data(open, $data0),
   	get_data(high, $data0),
   	get_data(low, $data0),
   	get_data(close, $data0)
   ));
   
   ?>


See also `trader (PECL) <https://pecl.php.net/package/trader>`_, 'TA-lib <http://www.ta-lib.org/>`_ and `ext/trader <https://www.php.net/manual/en/book.trader.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Exttrader |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extuopz:

.. _ext-uopz:

ext/uopz
++++++++

 Extension UOPZ : User Operations for Zend.

The uopz extension is focused on providing utilities to aid with unit testing PHP code.

It supports the following activities: Intercepting function execution, Intercepting object creation, Hooking into function execution, Manipulation of function statics, Manipulation of function flags, Redefinition of constants, Deletion of constants, Runtime creation of functions and methods, 

.. code-block:: php

   <?php
   // The example is extracted from the UOPZ extension test suite : tests/001.phpt
   class Foo {
   	public function bar(int $arg) : int {
   		return $arg;
   	}
   }
   var_dump(uopz_set_return(Foo::class, 'bar', true));
   $foo = new Foo();
   var_dump($foo->bar(1));
   uopz_set_return(Foo::class, 'bar', function(int $arg) : int {
   	return $arg * 2;
   }, true);
   var_dump($foo->bar(2));
   try {
   	uopz_set_return(Foo::class, 'nope', 1);
   } catch(Throwable $t) {
   	var_dump($t->getMessage());
   }
   class Bar extends Foo {}
   try {
   	uopz_set_return(Bar::class, 'bar', null);
   } catch (Throwable $t) {
   	var_dump($t->getMessage());
   }
   
   	uopz_set_something(Bar::class, 'bar', null);
   
   ?>


See also `ext/uopz <https://pecl.php.net/package/uopz>`_ and `User Operations for Zend <https://github.com/krakjoe/uopz>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extuopz |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.1.7              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extuuid:

.. _ext-uuid:

ext/uuid
++++++++

 Extension ``UUID``. A universally unique identifier (UUID) is a 128-bit number used to identify information in computer systems.

An interface to the libuuid system library. The libuuid library is used to generate unique identifiers for objects that may be accessible beyond the local system. The Linux implementation was created to uniquely identify ext2 filesystems created by a machine. This library generates UUIDs compatible with those created by the Open Software Foundation (OSF) Distributed Computing Environment (DCE) utility uuidgen.

.. code-block:: php

   <?php
       // example from the test suitee of the extension.
       
       // check basic format of generated UUIDs
       $uuid = uuid_create();
       if (preg_match("/[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}/", $uuid)) {
               echo "basic format ok\n";
       } else {
               echo "basic UUID format check failed, generated UUID was $uuid\n";
       }
       
   ?>


See also `libuuid <https://linux.`die <https://www.php.net/die>`_.net/man/3/libuuid>`_ and 
        `ext/uuid <https://github.com/php/pecl-networking-uuid>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extuuid |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.7.9              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extv8js:

.. _ext-v8js:

ext/v8js
++++++++

 Extension v8js.

This extension embeds the `V8 Javascript Engine <https://bugs.chromium.org/p/v8/issues/list>`_ into PHP.

.. code-block:: php

   <?php
   
   $v8 = new V8Js();
   
   /* basic.js */
   $JS = <<< EOT
   len = print('Hello' + ' ' + 'World!' + '\n');
   len;
   EOT;
   
   try {
     var_dump($v8->executeString($JS, 'basic.js'));
   } catch (V8JsException $e) {
     var_dump($e);
   }
   
   ?>


See also `V8 Javascript Engine Integration <https://www.php.net/manual/en/book.v8js.php>`_, `V8 Javascript Engine for PHP <https://github.com/phpv8/v8js>`_ and `pecl v8js <https://pecl.php.net/package/v8js>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extv8js |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extvarnish:

.. _ext-varnish:

ext/varnish
+++++++++++

 Extension PHP for varnish.

Varnish Cache is an open source, state of the art web application accelerator. The extension makes it possible to interact with a running varnish instance through TCP socket or shared memory.

.. code-block:: php

   <?php
       $args = array(
           VARNISH_CONFIG_HOST => '::1',
           VARNISH_CONFIG_PORT => 6082,
           VARNISH_CONFIG_SECRET => '5174826b-8595-4958-aa7a-0609632ad7ca',
           VARNISH_CONFIG_TIMEOUT => 300,
       );
       $va = new VarnishAdmin($args);
   ?>


See also `ext/varnish <https://www.php.net/manual/en/book.varnish.php>`_ and `pecl/Varnish <http://svn.php.net/viewvc/pecl/varnish/trunk/tests/>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extvarnish |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.1.7                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extvips:

.. _ext-vips:

ext/vips
++++++++

 Extension VIPS.

The VIPS image processing system is a very fast, multi-threaded image processing library with low memory needs.

.. code-block:: php

   <?php
   	dl('vips.' . PHP_SHLIB_SUFFIX);
   	$x = vips_image_new_from_file($argv[1])[out];
   	vips_image_write_to_file($x, $argv[2]);
   ?>


See also `php-vips-ext <https://github.com/jcupitt/php-vips-ext>`_, `libvips <https://jcupitt.github.io/libvips/>`_ and `libvips adapter for PHP Imagine <https://www.liip.ch/en/blog/libvips-adapter-for-php-imagine>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extvips |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.0.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extwasm:

.. _ext-wasm:

ext/wasm
++++++++

 Extension WASM.

The goal of the project is to be able to run WebAssembly binaries from PHP directly. So much fun coming!

From the php-ext-wasm documentation : 

.. code-block:: php

   <?php
   
   //There is a toy program in examples/simple.rs, written in Rust (or any other language that compiles to WASM):
   // Stored in file __DIR__ . '/simple.wasm'
   /*
   #[no_mangle]
   pub extern C fn sum(x: i32, y: i32) -> i32 {
       x + y
   }
   */
   
   $instance = new WASM\Instance(__DIR__ . '/simple.wasm');
   
   var_dump(
       $instance->sum(5, 37) // 42!
   );
   
   ?>


See also `php-ext-wasm <https://github.com/Hywan/php-ext-wasm>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extwasm |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.5.7              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Quick (30 mins)    |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extwddx:

.. _ext-wddx:

ext/wddx
++++++++

 Extension WDDX.

The Web Distributed Data Exchange, or WDDX, is a free, open XML-based technology that allows Web applications created with any platform to easily exchange data with one another over the Web.

.. code-block:: php

   <?php
     echo wddx_serialize_value("PHP to WDDX packet example", "PHP packet");
   ?>


See also `Wddx on PHP <https://www.php.net/manual/en/intro.wddx.php>`_ and `WDDX <http://www.openwddx.org/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extwddx |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extweakref:

.. _ext-weakref:

ext/weakref
+++++++++++

 Weak References for PHP.

Weak references provide a non-intrusive gateway to ephemeral objects. Unlike normal (strong) references, weak references do not prevent the garbage collector from freeing that object. For this reason, an object may be destroyed even though a weak reference to that object still exists. In such conditions, the weak reference seamlessly becomes invalid.

.. code-block:: php

   <?php
   class MyClass {
       public function __destruct() {
           echo Destroying object!\n;
       }
   }
   
   $o1 = new MyClass;
   
   $r1 = new WeakRef($o1);
   
   if ($r1->valid()) {
       echo Object still exists!\n;
       var_dump($r1->get());
   } else {
       echo Object is dead!\n;
   }
   
   unset($o1);
   
   if ($r1->valid()) {
       echo Object still exists!\n;
       var_dump($r1->get());
   } else {
       echo Object is dead!\n;
   }
   ?>


See also `Weak references <https://www.php.net/manual/en/book.weakref.php>`_ and `PECL extension that implements weak references and weak maps in PHP <https://github.com/colder/php-weakref>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Extensions/Extweakref |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.6.5                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _extensions-extwikidiff2:

.. _ext-wikidiff2:

ext/wikidiff2
+++++++++++++

 Extension wikidiff2.

Wikidiff2 is a PHP and HHVM module that provides the external diff engine for MediaWiki. 

.. code-block:: php

   <?php
   $x = <<<EOT
   foo bar
   baz
   quux
   bang
   EOT;
   
   $y = <<<EOT
   foo test
   baz
   test
   bang
   EOT;
   
   print wikidiff2_inline_diff( $x, $y, 2 );
   ?>


See also `wikidiff2 <https://www.mediawiki.org/wiki/Extension:Wikidiff2>`_ and `wikidiff2 (C ext) <https://github.com/Seb35/wikidiff2>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extwikidiff2 |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extwincache:

.. _ext-wincache:

ext/wincache
++++++++++++

 Extension Wincache.

The `Wincache extension for PHP <http://www.php.net/wincache>`_ is a PHP accelerator that is used to increase the speed of PHP applications running on Windows and Windows Server.

.. code-block:: php

   <?php
   $fp = fopen('/tmp/lock.txt', 'r+');
   if (wincache_lock(“lock_txt_lock”)) { // do an exclusive lock
       ftruncate($fp, 0); // truncate file
       fwrite($fp, 'Write something here\n');
       wincache_unlock(“lock_txt_lock”); // release the lock
   } else {
       echo 'Couldn't get the lock!';
   }
   fclose($fp);
   ?>


See also `WinCache Homepage <https://www.iis.net/downloads/microsoft/wincache-extension>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extwincache |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extxattr:

.. _ext-xattr:

ext/xattr
+++++++++

 Extensions xattr.

The xattr extension allows for the manipulation of extended attributes on a filesystem.

.. code-block:: php

   <?php
   $file = 'my_favourite_song.wav';
   xattr_set($file, 'Artist', 'Someone');
   xattr_set($file, 'My ranking', 'Good');
   xattr_set($file, 'Listen count', '34');
   
   /* ... other code ... */
   
   printf('You\'ve played this song %d times', xattr_get($file, 'Listen count')); 
   ?>


See also `xattr <https://www.php.net/manual/en/book.xattr.php>`_ and `Extended attributres <https://en.wikipedia.org/wiki/Extended_file_attributes>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extxattr |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.12.4              |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extxcache:

.. _ext-xcache:

ext/xcache
++++++++++

 Extension Xcache.

XCache is a open-source opcode cacher, which means that it accelerates the performance of PHP on servers. 

.. code-block:: php

   <?php
   if (!xcache_isset(count)) {
     xcache_set(count, load_count_from_mysql());
   }
   ?>

This guest book has been visited .. code-block:: php

   <?php echo $count = xcache_inc(count); ?>
 times.
.. code-block:: php

   <?php
   // save every 100 hits
   if (($count % 100) == 0) {
     save_count_to_mysql($count);
   }
   ?>


See also `xcache <https://xcache.lighttpd.net/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extxcache |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extxdebug:

.. _ext-xdebug:

ext/xdebug
++++++++++

 Xdebug extension.

The Xdebug is a extension PHP which provides debugging and profiling capabilities.

.. code-block:: php

   <?php
   class Strings
   {
       static function fix_string($a)
       {
           echo
               xdebug_call_class().
               "::".
               xdebug_call_function().
               " is called at ".
               xdebug_call_file().
               ":".
               xdebug_call_line();
       }
   }
   
   $ret = Strings::fix_string( 'Derick' );
   ?>


See also `Xdebug <https://xdebug.org/>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extxdebug |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extxdiff:

.. _ext-xdiff:

ext/xdiff
+++++++++

 Extension xdiff.

xdiff extension enables you to create and apply patch files containing differences between different revisions of files.

.. code-block:: php

   <?php
   $old_version = 'my_script-1.0.php';
   $patch = 'my_script.patch';
   
   $errors = xdiff_file_patch($old_version, $patch, 'my_script-1.1.php');
   if (is_string($errors)) {
      echo 'Rejects:'.PHP_EOL;
      echo $errors;
   }
   
   ?>


See also `xdiff <https://www.php.net/manual/en/book.xdiff.php>`_ and `libxdiff <http://www.xmailserver.org/xdiff-lib.html>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extxdiff |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extxhprof:

.. _ext-xhprof:

ext/xhprof
++++++++++

 Extension xhprof.

XHProf is a light-weight hierarchical and instrumentation based profiler. 

.. code-block:: php

   <?php
   xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);
   
   for ($i = 0; $i <= 1000; $i++) {
       $a = $i * $i;
   }
   
   $xhprof_data = xhprof_disable();
   
   $XHPROF_ROOT = '/tools/xhprof/';
   include_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_lib.php';
   include_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_runs.php';
   
   $xhprof_runs = new XHProfRuns_Default();
   $run_id = $xhprof_runs->save_run($xhprof_data, 'xhprof_testing');
   
   echo 'http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&source=xhprof_testing'.PHP_EOL;
   
   ?>


See also `XHprof Documentation <http://web.archive.org/web/20110514095512/http://mirror.facebook.net/facebook/xhprof/doc.html>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extxhprof |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extxml:

.. _ext-xml:

ext/xml
+++++++

 Extension xml (Parser).

This PHP extension implements support for James Clark's expat in PHP. This toolkit lets you parse, but not validate, XML documents. 

.. code-block:: php

   <?php
   $file = data.xml;
   $depth = array();
   
   function startElement($parser, $name, $attrs)
   {
       global $depth;
   
       if (!isset($depth[$parser])) {
           $depth[$parser] = 0;
       }
   
       for ($i = 0; $i < $depth[$parser]; $i++) {
           echo ;
       }
       echo $name\n;
       $depth[$parser]++;
   }
   
   function endElement($parser, $name)
   {
       global $depth;
       $depth[$parser]--;
   }
   
   $xml_parser = xml_parser_create();
   xml_set_element_handler($xml_parser, startElement, endElement);
   if (!($fp = fopen($file, r))) {
       die(could not open XML input);
   }
   
   while ($data = fread($fp, 4096)) {
       if (!xml_parse($xml_parser, $data, feof($fp))) {
           die(sprintf(XML error: %s at line %d,
                       xml_error_string(xml_get_error_code($xml_parser)),
                       xml_get_current_line_number($xml_parser)));
       }
   }
   xml_parser_free($xml_parser);
   ?>


See also `XML Parser <http://www.php.net/manual/en/book.xml.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extxml |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extxmlreader:

.. _ext-xmlreader:

ext/xmlreader
+++++++++++++

 Extension XMLReader.

The XMLReader extension is an XML Pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way.

.. code-block:: php

   <?php
   
       $xmlreader = new XMLReader();
       $xmlreader->xml("<xml><div>Content</div></xml>");
       $xmlreader->read();
       $xmlreader->read();
       $xmlreader->readString();
   
   ?>


See also `xmlreader <http://www.php.net/manual/en/book.xmlreader.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extxmlreader |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extxmlrpc:

.. _ext-xmlrpc:

ext/xmlrpc
++++++++++

 Extension ext/xmlrpc.

This extension can be used to write XML-RPC servers and clients.

.. code-block:: php

   <?php
   $request = xmlrpc_encode_request('method', array(1, 2, 3));
   $context = stream_context_create(array('http' => array(
       'method' => 'POST',
       'header' => 'Content-Type: text/xml',
       'content' => $request
   )));
   $file = file_get_contents('http://www.example.com/xmlrpc', false, $context);
   $response = xmlrpc_decode($file);
   if ($response && xmlrpc_is_fault($response)) {
       trigger_error('xmlrpc: '.$response['faultString'].' ('.$response['faultCode']));
   } else {
       print_r($response);
   }
   ?>


See also `XML-RPC <http://www.php.net/manual/en/book.xmlrpc.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Extensions/Extxmlrpc |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _extensions-extxmlwriter:

.. _ext-xmlwriter:

ext/xmlwriter
+++++++++++++

 Extension ext/xmlwriter.

The XMLWriter extension wraps the libxml xmlWriter API inside PHP.

.. code-block:: php

   <?php
   $xw = xmlwriter_open_memory();
   xmlwriter_set_indent($xw, TRUE);
   xmlwriter_start_document($xw, NULL, 'UTF-8');
   xmlwriter_start_element($xw, 'root');
   xmlwriter_write_attribute_ns($xw, 'prefix', '', 'http://www.php.net/uri');
   xmlwriter_start_element($xw, 'elem1');
   xmlwriter_write_attribute($xw, 'attr1', 'first');
   xmlwriter_end_element($xw);
   xmlwriter_full_end_element($xw);
   xmlwriter_end_document($xw);
   $output = xmlwriter_flush($xw, true);
   print $output;
   // write attribute_ns without start_element first
   $xw = xmlwriter_open_memory();
   var_dump(xmlwriter_write_attribute_ns($xw, 'prefix', 'id', 'http://www.php.net/uri', 'elem1'));
   print xmlwriter_output_memory($xw);
   ?>


See also `XMLWriter <https://www.php.net/manual/en/book.xmlwriter.php>`_ and `Module xmlwriter from libxml2 <http://xmlsoft.org/html/libxml-xmlwriter.html>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extxmlwriter |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _extensions-extxsl:

.. _ext-xsl:

ext/xsl
+++++++

 Extension XSL.

The XSL extension implements the XSL standard, performing XSLT transformations using the libxslt library.

.. code-block:: php

   <?php
   
   // Example from the PHP manual
   
   $xmldoc = new DOMDocument();
   $xsldoc = new DOMDocument();
   $xsl = new XSLTProcessor();
   
   $xmldoc->loadXML('fruits.xml');
   $xsldoc->loadXML('fruits.xsl');
   
   libxml_use_internal_errors(true);
   $result = $xsl->importStyleSheet($xsldoc);
   if (!$result) {
       foreach (libxml_get_errors() as $error) {
           echo "Libxml error: {$error->message}\n";
       }
   }
   libxml_use_internal_errors(false);
   
   if ($result) {
       echo $xsl->transformToXML($xmldoc);
   }
   
   ?>


See also `XSL extension <https://www.php.net/manual/en/intro.xsl.php>`_;

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extxsl |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extxxtea:

.. _ext-xxtea:

ext/xxtea
+++++++++

 Extension xxtea : XXTEA encryption algorithm extension for PHP.

XXTEA is a fast and secure encryption algorithm. This is a XXTEA extension for PHP.
It is different from the original XXTEA encryption algorithm. It encrypts and decrypts string instead of uint32 array, and the key is also string.

.. code-block:: php

   <?php
   // Example is extracted from the xxtea repository on github : tests/xxtea.phpt
   
   $str = 'Hello World! 你好，中国🇨🇳！';
   $key = '1234567890';
   $base64 = 'D4t0rVXUDl3bnWdERhqJmFIanfn/6zAxAY9jD6n9MSMQNoD8TOS4rHHcGuE=';
   $encrypt_data = xxtea_encrypt($str, $key);
   $decrypt_data = xxtea_decrypt($encrypt_data, $key);
   if ($str == $decrypt_data && base64_encode($encrypt_data) == $base64) {
       echo 'success!';
   } else {
       echo base64_encode($encrypt_data);
       echo 'fail!';
   }
   ?>


See also `PECL ext/xxtea <https://pecl.php.net/package/xxtea>`_ and `ext/xxtea on Github <https://github.com/xxtea/xxtea-pecl>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Extensions/Extxxtea |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 1.1.7               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _extensions-extyaml:

.. _ext-yaml:

ext/yaml
++++++++

 Extension YAML.

This extension implements the `YAML Ain't Markup Language <http://www.yaml.org/>`_ (YAML) data serialization standard. Parsing and emitting are handled by the `LibYAML <http://pyyaml.org/wiki/LibYAML>`_ library.

.. code-block:: php

   <?php
   $addr = array(
       'given' => 'Chris',
       'family'=> 'Dumars',
       'address'=> array(
           'lines'=> '458 Walkman Dr.
           Suite #292',
           'city'=> 'Royal Oak',
           'state'=> 'MI',
           'postal'=> 48046,
         ),
     );
   $invoice = array (
       'invoice'=> 34843,
       'date'=> '2001-01-23',
       'bill-to'=> $addr,
       'ship-to'=> $addr,
       'product'=> array(
           array(
               'sku'=> 'BL394D',
               'quantity'=> 4,
               'description'=> 'Basketball',
               'price'=> 450,
             ),
           array(
               'sku'=> 'BL4438H',
               'quantity'=> 1,
               'description'=> 'Super Hoop',
               'price'=> 2392,
             ),
         ),
       'tax'=> 251.42,
       'total'=> 4443.52,
       'comments'=> 'Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.',
       );
   
   // generate a YAML representation of the invoice
   $yaml = yaml_emit($invoice);
   var_dump($yaml);
   
   // convert the YAML back into a PHP variable
   $parsed = yaml_parse($yaml);
   
   // check that roundtrip conversion produced an equivalent structure
   var_dump($parsed == $invoice);
   ?>



See also `YAML <https://www.php.net/manual/en/book.yaml.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extyaml |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extyis:

.. _ext-yis:

ext/yis
+++++++

 Yellow Pages extensions (NIS).

NIS (formerly called Yellow Pages) allows network management of important administrative files (e.g. the password file).

.. code-block:: php

   <?php
   $entry = yp_first($domain, 'passwd.byname');
   
   $key = key($entry);
   $value = $entry[$key];
   
   echo 'First entry in this map has key ' . $key . ' and value ' . $value;
   ?>


See also `The Linux NIS(YP)/NYS/NIS+ HOWTO <http://www.tldp.org/HOWTO/NIS-HOWTO/index.html>`_ and `YP/NIS <https://www.php.net/manual/en/book.nis.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extyis |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extzbarcode:

.. _ext-zbarcode:

ext/zbarcode
++++++++++++

 Extension Zbarcode. 

PHP extension for reading barcodes.

.. code-block:: php

   <?php
   /* Create new image object */
   $image = new ZBarCodeImage('test.jpg');
   
   /* Create a barcode scanner */
   $scanner = new ZBarCodeScanner();
   
   /* Scan the image */
   $barcode = $scanner->scan($image);
   
   /* Loop through possible barcodes */
   if (!empty($barcode)) {
   	foreach ($barcode as $code) {
   		printf('Found type %s barcode with data %s\n', $code['type'], $code['data']);
   	}
   }
   ?>


See also `php-zbarcode <https://github.com/mkoppanen/php-zbarcode>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Extensions/Extzbarcode |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.9.5                  |
+--------------+------------------------+
| PHP Version  | 7.0+                   |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _extensions-extzendmonitor:

.. _ext-zend\_monitor:

ext/zend_monitor
++++++++++++++++

 Extension ``zend_monitor``. 

See also `Zend Monitor - PHP API <http://files.zend.com/help/Zend-Server/content/zendserverapi/zend_monitor-php_api.htm>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Extensions/Extzendmonitor |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 1.7.9                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _extensions-extzip:

.. _ext-zip:

ext/zip
+++++++

 Extension ext/zip.

This extension enables you to transparently read or write ZIP compressed archives and the files inside them.

.. code-block:: php

   <?php
   
   $zip = new ZipArchive();
   $filename = './test112.zip';
   
   if ($zip->open($filename, ZipArchive::CREATE)!==TRUE) {
       exit('cannot open <$filename>');
   }
   
   $zip->addFromString('testfilephp.txt' . time(), '#1 This is a test string added as testfilephp.txt.'.PHP_EOL);
   $zip->addFromString('testfilephp2.txt' . time(), '#2 This is a test string added as testfilephp2.txt.'.PHP_EOL);
   $zip->addFile($thisdir . '/too.php','/testfromfile.php');
   echo 'numfiles: ' . $zip->numFiles . PHP_EOL;
   echo 'status:' . $zip->status . PHP_EOL;
   $zip->close();
   ?>


See also `Zip <https://www.php.net/manual/en/book.zip.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extzip |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | Very high         |
+--------------+-------------------+


.. _extensions-extzlib:

.. _ext-zlib:

ext/zlib
++++++++

 Extension ext/zlib.

.. code-block:: php

   <?php
   
   $filename = tempnam('/tmp', 'zlibtest') . '.gz';
   echo "<html>\n<head></head>\n<body>\n<pre>\n";
   $s = "Only a test, test, test, test, test, test, test, test!\n";
   
   // open file for writing with maximum compression
   $zp = gzopen($filename, 'w9');
   
   // write string to file
   gzwrite($zp, $s);
   
   // close file
   gzclose($zp);
   
   ?>


See also `Zlib <https://www.php.net/manual/en/book.zlib.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Extensions/Extzlib |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _extensions-extzmq:

.. _ext-0mq:

ext/0mq
+++++++

 Extension ext/zmq for ``0mq``.

``ØMQ is a software library that lets you quickly design and implement a fast message-based application.`` 

.. code-block:: php

   <?php
   
   // Example from https://github.com/kuying/ZeroMQ/blob/d80dcc3dc1c14a343ca90bbd656b98fd55366548/zguide/examples/PHP/msgqueue.php
       /*
        *  Simple message queuing broker
        *  Same as request-reply broker but using QUEUE device
        * @author Ian Barber <ian(dot)barber(at)gmail(dot)com>
        */
       $context = new ZMQContext();
       //  Socket facing clients
       $frontend = $context->getSocket(ZMQ::SOCKET_ROUTER);
       $frontend->bind(tcp://*:5559);
       //  Socket facing services
       $backend = $context->getSocket(ZMQ::SOCKET_DEALER);
       $backend->bind(tcp://*:5560);
       //  Start built-in device
       new ZMQDevice($frontend, $backend);
   
   ?>


See also `ZeroMQ <http://zeromq.org/>`_ and `ZMQ <https://www.php.net/manual/en/book.zmq.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Extensions/Extzmq |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _extensions-extzookeeper:

.. _ext-zookeeper:

ext/zookeeper
+++++++++++++

 Extension for Apache `Zookeeper <https://www.php.net/Zookeeper>`_. 

ZooKeeper is an Apache project that enables centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.

.. code-block:: php

   <?php
   $zookeeper = new Zookeeper('locahost:2181');
   $path = '/path/to/node';
   $value = 'nodevalue';
   $zookeeper->set($path, $value);
   
   $r = $zookeeper->get($path);
   if ($r)
     echo $r;
   else
     echo 'ERR';
   ?>


See also `ext/zookeeper <https://www.php.net/zookeeper>`_, 
         `Install `Zookeeper <https://www.php.net/Zookeeper>`_ PHP Extension <https://blog.programster.org/install-zookeeper-php-extension>`_
         `Zookeeper <https://zookeeper.apache.org/>`_ and .

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Extensions/Extzookeeper |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 1.2.5                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _files-iscliscript:

.. _is-cli-script:

Is CLI Script
+++++++++++++

 Mark a file as a CLI script, based on the usage of #!.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Files/IsCliScript |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _files-notdefinitionsonly:

.. _not-definitions-only:

Not Definitions Only
++++++++++++++++++++

 Files should only include definitions (class, functions, traits, interfaces, constants), or global instructions, but not both. 

.. code-block:: php

   <?php
   // This whole script is a file
   
   // It contains definitions and global code
   class foo {
       static public $foo = null;
   }
   //This can be a singleton creation
   foo::$foo = new foo();
   
   trait t {}
   
   class bar {}
   
   ?>


Within this context, globals, use, and namespaces instructions are not considered a warning.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Files/NotDefinitionsOnly |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _functions-aliasesusage:

.. _aliases-usage:

Aliases Usage
+++++++++++++

 PHP manual recommends to avoid function aliases.

Some functions have several names, and both may be used the same way. However, one of the names is the main name, and the others are aliases. Aliases may be removed or change or dropped in the future. Even if this is not forecast, it is good practice to use the main name, instead of the aliases. 

.. code-block:: php

   <?php
   
   // official way to count an array
   $n = count($array);
   
   // official way to count an array
   $n = sizeof($array);
   
   ?>


Aliases are compiled in PHP, and do not provide any performances over the normal function. 

Aliases are more likely to be removed later, but they have been around for a long time.

See documentation : `List of function aliases <https://www.php.net/manual/en/aliases.php>`_.


Suggestions
^^^^^^^^^^^

* Always use PHP recommended functions

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Functions/AliasesUsage                                                                        |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                               |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| ClearPHP     | `no-aliases <https://github.com/dseguy/clearPHP/tree/master/rules/no-aliases.md>`__           |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-cleverstyle-functions-aliasesusage`, :ref:`case-phpmyadmin-functions-aliasesusage` |
+--------------+-----------------------------------------------------------------------------------------------+


.. _functions-callbackneedsreturn:

.. _callback-function-needs-return:

Callback Function Needs Return
++++++++++++++++++++++++++++++

 When used with `array_map() <https://www.php.net/array_map>`_ functions, the callback must return something. This return may be in the form of a ``return`` statement, a global variable or a parameter with a reference. All those solutions extract information from the callback. 

.. code-block:: php

   <?php
   
   // This filters each element
   $filtered = array_filter($array, function ($x) {return $x == 2; });
   
   // This return void for every element
   $filtered = array_filter($array, function ($x) {return ; });
   
   // costly array_sum()
   $sum = 0;
   $filtered = array_filter($array, function ($x) use (&$sum) {$sum += $x; });
   
   // costly array_sum()
   global $sum = 0;
   $filtered = array_filter($array, function () {global $sum; $sum += $x; });
   
   // register_shutown_function() doesn't require any return
   register_shutown_function(my_shutdown);
   
   ?>


The following functions are omitted, as they don't require the return : 

+ `forward_static_call_array() <https://www.php.net/forward_static_call_array>`_
+ `forward_static_call() <https://www.php.net/forward_static_call>`_
+ `register_shutdown_function() <https://www.php.net/register_shutdown_function>`_
+ `register_tick_function() <https://www.php.net/register_tick_function>`_

See also `array_map <https://www.php.net/array_map>`_.


Suggestions
^^^^^^^^^^^

* Add an explicit return to the callback
* Use `null` to unset elements in an array without destroying the index

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------+
| Short name   | Functions/CallbackNeedsReturn                                                                             |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Exakat since | 1.2.6                                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                       |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-contao-functions-callbackneedsreturn`, :ref:`case-phpdocumentor-functions-callbackneedsreturn` |
+--------------+-----------------------------------------------------------------------------------------------------------+


.. _functions-cantuse:

.. _cant-use-function:

Cant Use Function
+++++++++++++++++

 Those functions only contains an error or an exception. As such, they are a warning that such function or method shouldn't be used. 

.. code-block:: php

   <?php
   
   function obsoleteFoo() {
       throw new exception('Don\'t use obsoleteFoo() but rather the new version of foo().');
   }
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------+
| Short name   | Functions/CantUse |
+--------------+-------------------+
| Rulesets     | none              |
+--------------+-------------------+
| Exakat since | 1.8.7             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _functions-closures:

.. _closures-glossary:

Closures Glossary
+++++++++++++++++

 List of all the closures in the code.

.. code-block:: php

   <?php
   
   // A closure is also a unnamed function
   $closure = function ($arg) { return 'A'.strtolower($arg); }
   
   ?>


See also `The `Closure <https://www.php.net/manual/en/class.closure.php>`_ Class <https://www.php.net/manual/en/class.closure.php>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Functions/Closures |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | Very high          |
+--------------+--------------------+


.. _functions-conditionedfunctions:

.. _conditioned-function:

Conditioned Function
++++++++++++++++++++

 Indicates if a function is defined only if a condition is met.

<?php

// This is a conditioned function. 
// it only exists if the PHP binary doesn't have it already.
if (!function_exists('join')) {
    function join($glue, $array) {
        return implode($glue, $array);
    }

}

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/ConditionedFunctions |
+--------------+--------------------------------+
| Rulesets     | :ref:`Appinfo`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.4                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Slow (1 hour)                  |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-deepdefinitions:

.. _deep-definitions:

Deep Definitions
++++++++++++++++

 Structures, such as functions, classes, interfaces, traits, etc. may be defined anywhere in the code, including inside functions. This is legit code for PHP. 

Since the availability of autoload, with spl_register_autoload(), there is no need for that kind of code. Structures should be defined, and accessible to the autoloading. Inclusions and deep definitions should be avoided, as they compel code to load some definitions, while autoloading will only load them if needed. 

.. code-block:: php

   <?php
   
   class X {
       function init() {
           // myFunction is defined when and only if X::init() is called.
           if (!function_exists('myFunction'){
               function myFunction($a) {
                   return $a + 1;
               }
           })
       }
   }
   
   ?>


Functions are excluded from autoload, but shall be gathered in libraries, and not hidden inside other code.

Constants definitions are tolerated inside functions : they may be used for avoiding repeat, or noting the usage of such function. 

Definitions inside a if/then statement, that include PHP version check are accepted here.

See also `Autoloading Classes <https://www.php.net/manual/en/language.oop5.autoload.php>`_.


Suggestions
^^^^^^^^^^^

* Move function definitions to the global space : outside structures, and method.

Specs
^^^^^
+--------------+-----------------------------------------------+
| Short name   | Functions/DeepDefinitions                     |
+--------------+-----------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                |
+--------------+-----------------------------------------------+
| Exakat since | 0.8.4                                         |
+--------------+-----------------------------------------------+
| PHP Version  | All                                           |
+--------------+-----------------------------------------------+
| Severity     | Major                                         |
+--------------+-----------------------------------------------+
| Time To Fix  | Slow (1 hour)                                 |
+--------------+-----------------------------------------------+
| Precision    | High                                          |
+--------------+-----------------------------------------------+
| Examples     | :ref:`case-dolphin-functions-deepdefinitions` |
+--------------+-----------------------------------------------+


.. _functions-dynamiccode:

.. _function-with-dynamic-code:

Function With Dynamic Code
++++++++++++++++++++++++++

 Mark a method, function, closure, arrow function that includes dynamic code. 

Dynamic code is based on usage of include() and co, `extract() <https://www.php.net/extract>`_ and `eval() <https://www.php.net/eval>`_. 

.. code-block:: php

   <?php
   
   // Function with dynamic code
   function foo($x) {
       include $x;
       return $y;
   }
   
   // Static coe Function
   function foo($x) {
       return $y + $x;
   }
   
   ?>


This is a support rule, to help omits some special cases in other rules.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Functions/DynamicCode |
+--------------+-----------------------+
| Rulesets     | none                  |
+--------------+-----------------------+
| Exakat since | 2.1.8                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _functions-dynamiccall:

.. _dynamic-function-call:

Dynamic Function Call
+++++++++++++++++++++

 Mark a functioncall made with a variable name.

.. code-block:: php

   <?php
   
   // function definition
   function foo() {}
   
   // function name is in a variable, as a string.
   $var = 'foo'; 
   
   // dynamic call of a function
   $var();
   
   call_user_func($var);
   
   ?>

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Functions/Dynamiccall |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _functions-fallbackfunction:

.. _fallback-function:

Fallback Function
+++++++++++++++++

 A function that is called with its name alone, and whose definition is in the global scope.

.. code-block:: php

   <?php
   
   namespace {
       // global definition
       function foo() {}
   }
   
   namespace Bar {
       // local definition
       function foo2() {}
       
       foo(); // definition is in the global namespace
       foo2(); // definition is in the Bar namespace
   }
   
   ?>


See also `Using namespaces: fallback to global function/constant <https://www.php.net/manual/en/language.namespaces.fallback.php>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Functions/FallbackFunction |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 1.1.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _functions-functionnames:

.. _functions-glossary:

Functions Glossary
++++++++++++++++++

 List of all the defined functions in the code.

.. code-block:: php

   <?php
   
   // A function
   function aFunction() {}
   
   // Closures (not reported)
   $closure = function ($arg) {  }
   
   // Methods
   class foo {
       function aMethod() {}
   }
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Functions/Functionnames |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _functions-functionsusingreference:

.. _functions-using-reference:

Functions Using Reference
+++++++++++++++++++++++++

 Functions and methods using references in their signature.

.. code-block:: php

   <?php
   
   function usingReferences( &$a) {}
   
   class foo {
       public function methodUsingReferences($b, &$c = 1) {}
   }
   ?>

Specs
^^^^^
+--------------+-----------------------------------+
| Short name   | Functions/FunctionsUsingReference |
+--------------+-----------------------------------+
| Rulesets     | :ref:`Appinfo`                    |
+--------------+-----------------------------------+
| Exakat since | 0.8.4                             |
+--------------+-----------------------------------+
| PHP Version  | All                               |
+--------------+-----------------------------------+
| Severity     | Minor                             |
+--------------+-----------------------------------+
| Time To Fix  | Slow (1 hour)                     |
+--------------+-----------------------------------+
| Precision    | High                              |
+--------------+-----------------------------------+


.. _functions-isextfunction:

.. _is-an-extension-function:

Is An Extension Function
++++++++++++++++++++++++

 This is an extension function. 

.. code-block:: php

   <?php
   
   // range is a native PHP function. It is always available
   $array = range(0, 100);
   
   // json_encode is an extension function : it requires that PHP was compile with ext/json
   echo json_encode($array);
   
   ?>


Almost every PHP extension defines extra functions. Nowadays, they are prefixed, like ``mysqli_connect``, ``ldap_close``, or ``zlib_decode``. Sometimes, they are even in a namespace. Refer to the extension itself to learn more about its functions usage.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Functions/IsExtFunction |
+--------------+-------------------------+
| Rulesets     | :ref:`First`            |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _functions-isgenerator:

.. _is-generator:

Is Generator
++++++++++++

 Mark as such functions or methods that are using yield and yield from.

.. code-block:: php

   <?php
   
   function generator() {
       yield from generator2();
       
       return 3;
   }
   
   function generator2() {
       yield 1;
       yield 2;
   }
   
   ?>

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Functions/IsGenerator |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _functions-killsapp:

.. _exit-like-methods:

Exit-like Methods
+++++++++++++++++

 Those methods terminate the execution. 

They are detected when they do call `exit() <https://www.php.net/`exit <https://www.www.php.net/exit>`_>`_ or `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_. They may also be identified with the PHP 8.0 `#[NoReturn]` attribute, or the PHPDOC ``@noreturn`` (case insensitive).

If they are called, they will stop the application. They are a user-land equivalent of `exit <https://www.www.php.net/exit>`_ or `die <https://www.php.net/die>`_. 

.. code-block:: php

   <?php
   
   // This function anytime the code has finished its processing.
   function finish() {
       global $html;
       
       echo $html;
       die();
   }
   
   ?>


See also `PhpStorm 2020.3 EAP #4: Custom PHP 8 Attributes  <https://blog.jetbrains.com/phpstorm/2020/10/phpstorm-2020-3-eap-4/>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Functions/KillsApp |
+--------------+--------------------+
| Rulesets     | none               |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | Medium             |
+--------------+--------------------+


.. _functions-markcallable:

.. _mark-callable:

Mark Callable
+++++++++++++

 Create an attribute that guess what are the called function or methods, when possible.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Functions/MarkCallable       |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`, :ref:`First` |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _functions-mismatchparametername:

.. _mismatch-parameter-name:

Mismatch Parameter Name
+++++++++++++++++++++++

 Parameter name change in overwritten method. This may lead to errors when using PHP 8.0 named arguments. 

PHP use the name of the parameter in the method whose code is executed. When the name change between the method and the overwritten method, the consistency is broken.

.. code-block:: php

   <?php
   
   class x {
       function getValue($name) {}
   }
   
   class y extends x {
       // consistent with the method above
       function getValue($name) {}
   }
   
   class z extends x {
       // inconsistent with the method above
       function getValue($label) {}
   }
   
   ?>


Here is another example, in early PHP 8.0 (courtesy of `Carnage <https://twitter.com/giveupalready>`_).

.. code-block:: php

   <?php
   
   interface Pager 
   {
       public function fetch($page = 0, ...$categories);
   }
    
   class DbPager implements Pager
   {
       public function fetch($seite = 0, ...$kategorien)
       {
           var_dump($kategorien);
       }
   }
    
   $dbPager = new DbPager();
   $dbPager->fetch(page: 1, categories: 2);
   
   ?>




Suggestions
^^^^^^^^^^^

* Make sure all the names are the same, between methods

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Functions/MismatchParameterName           |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP80` |
+--------------+-------------------------------------------+
| Exakat since | 2.1.8                                     |
+--------------+-------------------------------------------+
| PHP Version  | All                                       |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | High                                      |
+--------------+-------------------------------------------+


.. _functions-multipledeclarations:

.. _multiple-functions-declarations:

Multiple Functions Declarations
+++++++++++++++++++++++++++++++

 Some functions are declared multiple times in the code. 

PHP accepts multiple definitions for the same functions, as long as they are not in the same file (linting error), or not included simultaneously during the execution. 

This creates to several situations in which the same functions are defined multiple times : the function may be compatible with various PHP version, but their implementation may not. Or the function is part of a larger library, and sometimes only need without the rest of the library. 

It is recommended to avoid having several functions with the same name in one repository. Turn those functions into methods and load them when needed. 

.. code-block:: php

   <?php
   
   namespace a {
       function foo() {}
   }
   
   // Other file
   namespace a {
       function foo() {}
       function bar() {}
   }
   
   
   ?>

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/MultipleDeclarations |
+--------------+--------------------------------+
| Rulesets     | :ref:`Appinfo`                 |
+--------------+--------------------------------+
| Exakat since | 0.12.0                         |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Slow (1 hour)                  |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-mustreturn:

.. _must-return-methods:

Must Return Methods
+++++++++++++++++++

 The following methods are expected to return a value that will be used later. Without return, they are useless.

Methods that must return are : `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.
Methods that may not return, but are often expected to : `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_.


.. code-block:: php

   <?php
   
   class foo {
       public function __isset($a) {
           // returning something useful
           return isset($this->$var[$a]);
       }
   
       public function __get($a) {
           $this->$a++;
           // not returning... 
       }
   
       public function __call($name, $args) {
           $this->$name(...$args);
           // not returning anything, but that's OK
       }
   
   }
   ?>





Suggestions
^^^^^^^^^^^

* Add a return expression, with a valid data type
* Remove the return typehint

Specs
^^^^^
+--------------+----------------------+
| Short name   | Functions/MustReturn |
+--------------+----------------------+
| Rulesets     | :ref:`Analyze`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Quick (30 mins)      |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _functions-noliteralforreference:

.. _no-literal-for-reference:

No Literal For Reference
++++++++++++++++++++++++

 Method arguments and return values may be by reference. Then, they need to be a valid variable.

Objects are always passed by reference, so there is no need to explicitly declare it.

Expressions, including ternary operator, produce value, and can't be used by reference directly. This is also the case for expression that include one or more reference. 

.. code-block:: php

   <?php
   
   // variables, properties, static properties, array items are all possible
   $a = 1;
   foo($a);
   
   //This is not possible, as a literal can't be a reference
   foo(1);
   
   function foo(&$int) { return $int; }
   
   
   // This is not a valid reference
   function &bar() { return 2; }
   function &bar2() { return 2 + $r; }
   
   ?>


Wrongly passing a value as a reference leads to a PHP Notice.

See also `References <https://www.php.net/references>`_.



Suggestions
^^^^^^^^^^^

* Remove the reference in the method signature (argument or return value)
* Make the argument an object, by using a typehint (non-scalar)
* Put the value into a variable prior to call (or return) the method

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Functions/NoLiteralForReference |
+--------------+---------------------------------+
| Rulesets     | :ref:`Analyze`                  |
+--------------+---------------------------------+
| Exakat since | 1.9.5                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _functions-nullablewithconstant:

.. _nullable-with-constant:

Nullable With Constant
++++++++++++++++++++++

 Arguments are automatically nullable with a literal null. They used to also be nullable with a constant null, before PHP 8.0.

.. code-block:: php

   <?php
   
   // Extracted from https://github.com/php/php-src/blob/master/UPGRADING
   
   // Replace
   function test(int $arg = CONST_RESOLVING_TO_NULL) {}
   // With
   function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
   // Or
   function test(int $arg = null) {}
           
   ?>



Suggestions
^^^^^^^^^^^

* Use the valid syntax

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/NullableWithConstant |
+--------------+--------------------------------+
| Rulesets     | :ref:`CompatibilityPHP80`      |
+--------------+--------------------------------+
| Exakat since | 2.1.9                          |
+--------------+--------------------------------+
| PHP Version  | 8.0-                           |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-recursive:

.. _recursive-functions:

Recursive Functions
+++++++++++++++++++

 Recursive functions are functions that calls itself.

.. code-block:: php

   <?php
   
   // a recursive function ; it calls itself
   function factorial($n) {
       if ($n == 1) { return 1; }
       
       return factorial($n - 1) * $n;
   }
   ?>


Methods are not handled here.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Functions/Recursive |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _functions-redeclaredphpfunction:

.. _redeclared-php-functions:

Redeclared PHP Functions
++++++++++++++++++++++++

 Function that bear the same name as a PHP function, and that are declared. 

This is useful when managing backward compatibility, like emulating an old function, or preparing for newer PHP versions, like emulating new upcoming function.

.. code-block:: php

   <?php
   
   if (version_compare(PHP_VERSION, 7.0) > 0) {
       function split($separator, $string) {
           return explode($separator, $string);
       }
   }
   
   print_r( split(' ', '2 3'));
   
   ?>



Suggestions
^^^^^^^^^^^

* Check if it is still worth emulating that function

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Functions/RedeclaredPhpFunction |
+--------------+---------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`  |
+--------------+---------------------------------+
| Exakat since | 0.8.4                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Slow (1 hour)                   |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _functions-shouldyieldwithkey:

.. _should-yield-with-key:

Should Yield With Key
+++++++++++++++++++++

 `iterator_to_array() <https://www.php.net/iterator_to_array>`_ will overwrite generated values with the same key. 

PHP generators are based on the ``yield`` keyword. They also delegate some generating to other methods, with ``yield from``. 

When delegating, ``yield from`` uses the keys that are generated with ``yield``, and otherwise, it uses auto-generated index, starting with 0. 

The trap is that each ``yield from`` reset the index generation and start again with 0. Coupled with `iterator_to_array() <https://www.php.net/iterator_to_array>`_, this means that the final generated array may lack some values, while a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loop would yield all of them.

.. code-block:: php

   <?php 
   
   function g1() : Generator {
   	for ( $i = 0; $i < 4; $i++ ) { yield $i; }
   }
   
   function g2() : Generator {
   	for ( $i = 5; $i < 10; $i++ ) { yield $i; }
   }
   
   function aggregator() : Generator {
   	yield from g1();
   	yield from g2();
   }
   
   print_r(iterator_to_array());
   
   /*
   Array
   (
       [0] => 6
       [1] => 7
       [2] => 8
       [3] => 9
       [4] => 4  // Note that 4 and 5 still appears
       [5] => 5  // They are not overwritten by the second yield
   )
   */
   
   
   foreach ( aggregator() as $i ) {
   	print $i.PHP_EOL;
   }
   
   /*
   0  // Foreach has no overlap and yield it all.
   1
   2
   3
   4
   5
   6
   7
   8
   9
   */
   
   ?>


Thanks to `Holger Woltersdorf <https://twitter.com/hollodotme>`_ for `pointing this <https://twitter.com/hollodotme/status/1057909890566537217>`_.

See also `Generator syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_ and `Yielding values with keys <https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.associative>`_.


Suggestions
^^^^^^^^^^^

* Use iterator_to_array() on each generator separately, and use array_merge() to merge all the arrays.
* Always yield with distinct keys
* Avoid iterator_to_array() and use foreach()

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Functions/ShouldYieldWithKey |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 1.5.2                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _functions-typehintmustbereturned:

.. _typehint-must-be-returned:

Typehint Must Be Returned
+++++++++++++++++++++++++

 When using a typehint for a method, it is compulsory to use a at least one return in the method's body. This is true for nullable typehint too : ``return`` alone won't be sufficient.

.. code-block:: php

   <?php
   
   // The function returns a value (here, correct object)
   function foo() : Bar { return new Bar(); }
   
   // The function should at least, return a value
   function foo() : Bar { }
   
   // The function should at least, return a value : Null or an object. Void, here, is not acceptable.
   function foo() : ?Bar { return; }
   
   ?>


PHP lint this, but won't execute it.

This analysis doesn't check if the returned value is compatible with the returned typehint. Only its presence is checked.

See also `Return Type Declaration <https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration>`_ and `Type hint in PHP function parameters and return values <https://mlocati.github.io/articles/php-type-hinting.html>`_.


Suggestions
^^^^^^^^^^^

* Add a return with a valid value

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Functions/TypehintMustBeReturned |
+--------------+----------------------------------+
| Rulesets     | :ref:`Analyze`                   |
+--------------+----------------------------------+
| Exakat since | 1.6.9                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Major                            |
+--------------+----------------------------------+
| Time To Fix  | Quick (30 mins)                  |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _functions-typehintedreferences:

.. _typehinted-references:

Typehinted References
+++++++++++++++++++++

 Typehinted arguments have no need for references. Since they are only an object, they are already a reference.

In fact, adding the & on the argument definition may lead to error like ``Only variables should be passed by reference``.

This applies to the ``object`` type hint, but not the the others, such as ``int`` or ``bool``.

.. code-block:: php

   <?php
       // a class
       class X {
           public $a = 3;
       }
   
       // typehinted reference
       //function foo(object &$x) works too
       function foo(X &$x) {
           $x->a = 1;
       
           return $x;
       }
   
       // Send an object 
       $y = foo(new X);
   
       // This prints 1;
       print $y->a;
   ?>


See also `Passing by reference <https://www.php.net/manual/en/language.references.pass.php>`_ and `Objects and references <https://www.php.net/manual/en/language.oop5.references.php>`_.


Suggestions
^^^^^^^^^^^

* Remove reference for typehinted arguments, unless the typehint is a scalar typehint.

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/TypehintedReferences |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 1.2.8                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Instant (5 mins)               |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-typehints:

.. _typehints:

Typehints
+++++++++

 List of all the types (classes or scalar) used in Typehinting.

.. code-block:: php

   <?php
   
   // here, array, myObject and string are all typehints.
   function foo(array $array, myObject $x, string $string) {
   
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Functions/Typehints |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _functions-unbindingclosures:

.. _unbinding-closures:

Unbinding Closures
++++++++++++++++++

 Never drop ``$this``, once a closure was created in a non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method. 

From the PHP wiki : Currently it is possible to unbind the `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable from a closure that originally had one by using $closure->bindTo(null). Due to the removal of `static <https://www.php.net/manual/en/language.oop5.static.php>`_ calls to non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods in PHP 8, we now have a guarantee that `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ always exists inside non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. We would like to have a similar guarantee that `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ always exists for non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ closures declared inside non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. Otherwise, we will end up imposing an unnecessary performance penalty either on `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ accesses in general, or `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ accesses inside such closures.

.. code-block:: php

   <?php
   
   class x {
       private $a = 3;
       
       function foo() {
           return function () { echo $this->a; };
       }
   }
   
   $closure = (new x)->foo();
   
   // $this was expected, and it is not anymore
   $closure->bindTo(null);
   
   $closure->bindTo(new x);
   
   ?>


Calling bindTo() with a valid object is still valid.

See also `Unbinding `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ from non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ closures <https://wiki.php.net/rfc/deprecations_php_7_4#unbinding_this_from_non-static_closures>`_.



Suggestions
^^^^^^^^^^^

* Create a static closure, which doesn't rely on $this at all
* Remove the call to bindTo(null).

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Functions/UnbindingClosures |
+--------------+-----------------------------+
| Rulesets     | :ref:`CompatibilityPHP74`   |
+--------------+-----------------------------+
| Exakat since | 1.9.0                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _functions-undefinedfunctions:

.. _undefined-functions:

Undefined Functions
+++++++++++++++++++

 Some functions are called, but not defined in the code. This means that the functions are probably defined in a missing library, or in an extension. If not, this will yield a Fatal error at execution.

.. code-block:: php

   <?php
   
   // Undefined function 
   foo($a);
   
   // valid function, as it belongs to the ext/yaml extension
   $parsed = yaml_parse($yaml);
   
   // This function is not defined in the a\b\c namespace, nor in the global namespace
   a\b\c\foo(); 
   
   ?>


See also `Functions <https://www.php.net/manual/en/language.functions.php>`_.



Suggestions
^^^^^^^^^^^

* Fix the name of the function in the code
* Remove the functioncall in the code
* Define the function for the code to call it
* Include the correct library in the code source

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Functions/UndefinedFunctions |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _functions-unknownparametername:

.. _unknown-parameter-name:

Unknown Parameter Name
++++++++++++++++++++++

 The name of the parameter doesn't belong to the method signature. Named arguments was introduced in PHP 8.0.

.. code-block:: php

   <?php
   
   // All good
   foo(a:1, b:2, c:3);
   foo(...['a':1, 'b':2, 'c':3]);
   
   // A is not a parameter name, it should be a : names are case sensitive
   foo(A:1, b:2, c:3);
   foo(...['A':1, 'b':2, 'c':3]);
   
   function foo($a, $b, $c) {}
   ?>


See also `Named Arguments <https://wiki.php.net/rfc/named_params>`_.



Suggestions
^^^^^^^^^^^

* Fix the name of the parameter and use a valid one
* Remove the parameter name, and revert to positional notation

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/UnknownParameterName |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 2.1.6                          |
+--------------+--------------------------------+
| PHP Version  | 8.0+                           |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-unusedinheritedvariable:

.. _unused-inherited-variable-in-closure:

Unused Inherited Variable In Closure
++++++++++++++++++++++++++++++++++++

 Some closures forgot to make usage of inherited variables.

`Closure <https://www.php.net/manual/en/class.closure.php>`_ have two separate set of incoming variables : the arguments (between parenthesis) and the inherited variables, in the 'use' clause. Inherited variables are extracted from the local environment at creation time, and keep their value until execution. 

The reported closures are requesting some local variables, but do not make any usage of them. They may be considered as dead code.  

.. code-block:: php

   <?php
   
   // In this closure, $y is forgotten, but $u is used.
   $a = function ($y) use ($u) { return $u; };
   
   // In this closure, $u is forgotten
   $a = function ($y, $z) use ($u) { return $u; };
   
   ?>


See also `Anonymous functions <https://www.php.net/manual/en/functions.anonymous.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the unused inherited variable
* Make us of the unused inherited variable

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------------------+
| Short name   | Functions/UnusedInheritedVariable                                                                            |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                               |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Exakat since | 1.0.11                                                                                                       |
+--------------+--------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                          |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                         |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-shopware-functions-unusedinheritedvariable`, :ref:`case-mautic-functions-unusedinheritedvariable` |
+--------------+--------------------------------------------------------------------------------------------------------------+


.. _functions-usearrowfunctions:

.. _use-arrow-functions:

Use Arrow Functions
+++++++++++++++++++

 Arrow functions are closures that require less code to write.

Arrow functions were introduced in PHP 7.4. They added the reserved keyword ``fn``. s

.. code-block:: php

   <?php
   
   array_map(fn(A $b): int => $b->c, $array);
   
   function array_values_from_keys($arr, $keys) {
       return array_map(fn($x) => $arr[$x], $keys);
   }
   ?>


See also `RFC : Arrow functions <https://wiki.php.net/rfc/arrow_functions>`_ and `Arrow functions in PHP <https://stitcher.io/blog/short-closures-in-php>`_.

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Functions/UseArrowFunctions |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 1.9.4                       |
+--------------+-----------------------------+
| PHP Version  | 7.4+                        |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | Very high                   |
+--------------+-----------------------------+


.. _functions-useconstantasarguments:

.. _use-constant-as-arguments:

Use Constant As Arguments
+++++++++++++++++++++++++

 Some methods and functions are defined to be used with constants as arguments. Those constants are made to be meaningful and readable, keeping the code maintenable. It is recommended to use such constants as soon as they are documented.

.. code-block:: php

   <?php
   
   // Turn off all error reporting
   // 0 and -1 are accepted 
   error_reporting(0);
   
   // Report simple running errors
   error_reporting(E_ERROR | E_WARNING | E_PARSE);
   
   // The first argument can be one of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.
   $search_html = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_SPECIAL_CHARS);
   
   // sort accepts one of SORT_REGULAR, SORT_NUMERIC, SORT_STRING, SORT_LOCALE_STRING, SORT_NATURAL
   // SORT_FLAG_CASE may be added, and combined with SORT_STRING or SORT_NATURAL
   sort($fruits);
   
   ?>


Here is the list of function that use a unique PHP constant as argument : 

+ `array_change_key_case() <https://www.php.net/array_change_key_case>`_
+ `array_multisort() <https://www.php.net/array_multisort>`_
+ `array_unique() <https://www.php.net/array_unique>`_
+ `count() <https://www.php.net/count>`_
+ dns_get_record()
+ `easter_days() <https://www.php.net/easter_days>`_
+ `extract() <https://www.php.net/extract>`_
+ `filter_input() <https://www.php.net/filter_input>`_
+ `filter_var() <https://www.php.net/filter_var>`_
+ `fseek() <https://www.php.net/fseek>`_
+ `get_html_translation_table() <https://www.php.net/get_html_translation_table>`_
+ `gmp_div_q() <https://www.php.net/gmp_div_q>`_
+ `gmp_div_qr() <https://www.php.net/gmp_div_qr>`_
+ `gmp_div_r() <https://www.php.net/gmp_div_r>`_
+ `html_entity_decode() <https://www.php.net/html_entity_decode>`_
+ `htmlspecialchars_decode() <https://www.php.net/htmlspecialchars_decode>`_
+ `http_build_query() <https://www.php.net/http_build_query>`_
+ `http_parse_cookie() <https://www.php.net/http_parse_cookie>`_
+ `http_parse_params() <https://www.php.net/http_parse_params>`_
+ `http_redirect() <https://www.php.net/http_redirect>`_
+ `http_support() <https://www.php.net/http_support>`_
+ `parse_ini_file() <https://www.php.net/parse_ini_file>`_
+ `parse_ini_string() <https://www.php.net/parse_ini_string>`_
+ `parse_url() <https://www.php.net/parse_url>`_
+ `pathinfo() <https://www.php.net/pathinfo>`_
+ `pg_select() <https://www.php.net/pg_select>`_
+ `posix_access() <https://www.php.net/posix_access>`_
+ `round() <https://www.php.net/round>`_
+ `scandir() <https://www.php.net/scandir>`_
+ `socket_read() <https://www.php.net/socket_read>`_
+ `str_pad() <https://www.php.net/str_pad>`_
+ `trigger_error() <https://www.php.net/trigger_error>`_

Here is the list of functions that use a combination of PHP native functions as argument.

+ `arsort() <https://www.php.net/arsort>`_
+ `asort() <https://www.php.net/asort>`_
+ `error_reporting() <https://www.php.net/error_reporting>`_
+ `filter_input() <https://www.php.net/filter_input>`_
+ `filter_var() <https://www.php.net/filter_var>`_
+ `get_html_translation_table() <https://www.php.net/get_html_translation_table>`_
+ `htmlentities() <https://www.php.net/htmlentities>`_
+ `htmlspecialchars() <https://www.php.net/htmlspecialchars>`_
+ `http_build_url() <https://www.php.net/http_build_url>`_
+ `jdtojewish() <https://www.php.net/jdtojewish>`_
+ `krsort() <https://www.php.net/krsort>`_
+ `ksort() <https://www.php.net/ksort>`_
+ `pg_result_status() <https://www.php.net/pg_result_status>`_
+ `phpcredits() <https://www.php.net/phpcredits>`_
+ `phpinfo() <https://www.php.net/phpinfo>`_
+ `preg_grep() <https://www.php.net/preg_grep>`_
+ `preg_match() <https://www.php.net/preg_match>`_
+ `preg_split() <https://www.php.net/preg_split>`_
+ `rsort() <https://www.php.net/rsort>`_
+ `runkit_import() <https://www.php.net/runkit_import>`_
+ `sort() <https://www.php.net/sort>`_
+ `stream_socket_client() <https://www.php.net/stream_socket_client>`_
+ `stream_socket_server() <https://www.php.net/stream_socket_server>`_



Suggestions
^^^^^^^^^^^

* Use PHP native constants, whenever possible, instead of meaningless literals.

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------------------+
| Short name   | Functions/UseConstantAsArguments                                                                             |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                               |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                          |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                         |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tikiwiki-functions-useconstantasarguments`, :ref:`case-shopware-functions-useconstantasarguments` |
+--------------+--------------------------------------------------------------------------------------------------------------+


.. _functions-usesdefaultarguments:

.. _uses-default-values:

Uses Default Values
+++++++++++++++++++

 Default values are provided to methods so as to make it convenient to use. However, with new versions, those values may change. For example, in PHP 5.4, `htmlentities() <https://www.php.net/htmlentities>`_ switched from ``Latin1`` to ``UTF-8`` default encoding.

.. code-block:: php

   <?php
   
   $string = Eu não sou o pão;
   
   echo htmlentities($string);
   
   // PHP 5.3 : Eu n&Atilde;&pound;o sou o p&Atilde;&pound;o
   // PHP 5.4 : Eu n&atilde;o sou o p&atilde;o
   
   // Stable across versions
   echo htmlentities($string, 'UTF8');
   
   ?>


As much as possible, it is recommended to use explicit values in those methods, so as to prevent from being surprise at a future PHP evolution. 

This analyzer tend to report a lot of false positives, including usage of `count() <https://www.php.net/count>`_. `Count() <https://www.php.net/count>`_ indeed has a second argument for recursive counts, and a default value. This may be ignored safely.

Suggestions
^^^^^^^^^^^

* Mention all arguments, as much as possible

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Functions/UsesDefaultArguments |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.4                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _functions-variablearguments:

.. _has-variable-arguments:

Has Variable Arguments
++++++++++++++++++++++

 Indicates if this function or method accept an arbitrary number of arguments, based on `func_get_args() <https://www.php.net/func_get_args>`_, `func_get_arg() <https://www.php.net/func_get_arg>`_ and `func_num_args() <https://www.php.net/func_num_args>`_ usage.

.. code-block:: php

   <?php
   
   // Fixed number of arguments
   function fixedNumberOfArguments($a, $b) {
       if (func_num_args() > 2) {
           $c = func_get_args();
           array_shift($c); // $a
           array_shift($c); // $b
       }
       // do something
   }
   
   // Fixed number of arguments
   function fixedNumberOfArguments($a, $b, $c = 1) {}
   
   ?>

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Functions/VariableArguments |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Slow (1 hour)               |
+--------------+-----------------------------+
| Precision    | Very high                   |
+--------------+-----------------------------+


.. _functions-wrongnumberofarguments:

.. _wrong-number-of-arguments:

Wrong Number Of Arguments
+++++++++++++++++++++++++

 Those functioncalls are made with too many or too few arguments. 

When the number arguments is wrong for native functions, PHP emits a warning. 
When the number arguments is too small for custom functions, PHP raises an exception. 
When the number arguments is too high for custom functions, PHP ignores the arguments. Such arguments should be handled with the variadic operator, or with `func_get_args() <https://www.php.net/func_get_args>`_ family of functions.

.. code-block:: php

   <?php
   
   echo strtoupper('This function is', 'ignoring arguments');
   //Warning: strtoupper() expects exactly 1 parameter, 2 given in Command line code on line 1
   
   echo strtoupper();
   //Warning: strtoupper() expects exactly 1 parameter, 0 given in Command line code on line 1
   
   function foo($argument) {}
   echo foo();
   //Fatal error: Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in /Users/famille/Desktop/analyzeG3/test.php on line 10 and exactly 1 expected in /Users/famille/Desktop/analyzeG3/test.php:3
   
   echo foo('This function is', 'ignoring arguments');
   
   ?>


It is recommended to check the signature of the methods, and fix the arguments. 

Suggestions
^^^^^^^^^^^

* Add more arguments to fill the list of compulsory arguments
* Remove arguments to fit the list of compulsory arguments
* Use another method or class

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------+
| Short name   | Functions/WrongNumberOfArguments                                                                            |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-missing-argument.md <https://github.com/dseguy/clearPHP/tree/master/rules/no-missing-argument.md.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-xataface-functions-wrongnumberofarguments`                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+


.. _functions-wrongoptionalparameter:

.. _wrong-optional-parameter:

Wrong Optional Parameter
++++++++++++++++++++++++

 Wrong placement of optional parameters.

PHP parameters are optional when they defined with a default value, like this : 

.. code-block:: php

   <?php
       function x($arg = 1) {
           // PHP code here
       }
   ?>


When a function have both compulsory and optional parameters, the compulsory ones should appear first, and the optional should appear last : 

.. code-block:: php

   <?php
       function x($arg, $arg2 = 2) {
           // PHP code here
       }
   ?>


PHP solves this problem at runtime, assign values in the same other, but will miss some of the default values and emits warnings. 

It is better to put all the optional parameters at the end of the method's signature.

Optional parameter wrongly placed are now a Notice in PHP 8.0. The only previous case that is allowed in PHP 8.0 and also in this analysis, is when the ``null`` value is used as default for typed arguments.

See also `Function arguments <https://www.php.net/manual/en/functions.arguments.php>`_.


Suggestions
^^^^^^^^^^^

* Give default values to all but first parameters. Null is a good default value, as PHP will use it if not told otherwise. 
* Remove default values to all but last parameters. That is probably a weak solution.
* Change the order of the values, so default-valued parameters are at the end. This will probably have impact on the rest of the code, as the API is changing.

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------------+
| Short name   | Functions/WrongOptionalParameter                                                                           |
+--------------+------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP80`                                                                  |
+--------------+------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                        |
+--------------+------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                       |
+--------------+------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-fuelcms-functions-wrongoptionalparameter`, :ref:`case-vanilla-functions-wrongoptionalparameter` |
+--------------+------------------------------------------------------------------------------------------------------------+


.. _functions-wrongreturnedtype:

.. _wrong-type-returned:

Wrong Type Returned
+++++++++++++++++++

 The returned value is not compatible with the specified return type.

.. code-block:: php

   <?php
   
   // classic error
   function bar() : int {
       return 'A';
   }
   
   // classic static error
   const B = 2;
   function bar() : string {
       return B;
   }
   
   // undecideable error
   function bar($c) : string {
       return $c;
   }
   
   // PHP lint this, but won't execute it
   function foo() : void {
       // No return at all 
   }
   
   ?>


See also `Returning values <https://www.php.net/manual/en/functions.returning-values.php>`_ and `Void Return Type <https://wiki.php.net/rfc/void_return_type>`_.


Suggestions
^^^^^^^^^^^

* Match the return type with the return value
* Remove the return expression altogether
* Add a typecast to the returning expression

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Functions/WrongReturnedType |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.8.7                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _functions-wrongtypewithcall:

.. _wrong-type-with-call:

Wrong Type With Call
++++++++++++++++++++

 This analysis checks that a call to a method uses the right literal values' types.

Currently, this analysis doesn't take into account ``strict_types = 1``. 

This analysis is compatible with Union types and with Intersection types.

.. code-block:: php

   <?php
   
   function foo(string $a) {
   
   }
   
   // wrong type used
   foo(1);
   
   // wrong type used
   foo("1");
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the right type with all arguments

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Functions/WrongTypeWithCall |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.9.9                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | Very high                   |
+--------------+-----------------------------+


.. _interfaces-cantimplementtraversable:

.. _cant-implement-traversable:

Cant Implement Traversable
++++++++++++++++++++++++++

 It is not possible to implement the ``Traversable``interface. The alternative is to implement ``Iterator`` or ``IteratorAggregate``.

``Traversable`` may be useful when used with ``instanceof``.

.. code-block:: php

   <?php
   
   // This lints, but doesn't run
   class x implements Traversable {
   
   }
   
   if( $argument instanceof Traversable ) {
       // doSomething
   }
   
   ?>


See also `Traversable <https://www.php.net/manual/en/class.traversable.php>`_, `Iterator <https://www.php.net/manual/en/class.iterator.php>`_ and `IteratorAggregate <https://www.php.net/manual/en/class.iteratoraggregate.php>`_..



Suggestions
^^^^^^^^^^^

* Implement Iterator or IteratorAggregate

Specs
^^^^^
+--------------+-------------------------------------+
| Short name   | Interfaces/CantImplementTraversable |
+--------------+-------------------------------------+
| Rulesets     | :ref:`Analyze`                      |
+--------------+-------------------------------------+
| Exakat since | 1.9.8                               |
+--------------+-------------------------------------+
| PHP Version  | All                                 |
+--------------+-------------------------------------+
| Severity     | Minor                               |
+--------------+-------------------------------------+
| Time To Fix  | Quick (30 mins)                     |
+--------------+-------------------------------------+
| Precision    | High                                |
+--------------+-------------------------------------+


.. _interfaces-interfacenames:

.. _interfaces-glossary:

Interfaces Glossary
+++++++++++++++++++

 List of all the defined interfaces in the code.

.. code-block:: php

   <?php
   
   // interfaceName is reported
   interface interfaceName {
       function interfaceMethod() ; 
   }
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Interfaces/Interfacenames |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _interfaces-isextinterface:

.. _is-an-extension-interface:

Is An Extension Interface
+++++++++++++++++++++++++

 This is an interface defined in a PHP C extension.

.. code-block:: php

   <?php
   
   // MyInterface is not recognized as an extension interface
   function foo ( MyInterface $a) {
       // \ArrayAccess is recognized as a native PHP extension
       if ($a instanceof \ArrayAccess) {
           // doSomething()
       }
   }
   
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Interfaces/IsExtInterface |
+--------------+---------------------------+
| Rulesets     | :ref:`First`              |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _interfaces-isnotimplemented:

.. _interfaces-is-not-implemented:

Interfaces Is Not Implemented
+++++++++++++++++++++++++++++

 Classes that implements interfaces, must implements each of the interface's methods. 

.. code-block:: php

   <?php
   
   class x implements i {
       // This method implements the foo method from the i interface
       function foo() {}
   
       // The method bar is missing, yet is requested by interface i
       function foo() {}
   }
   
   interface i {
       function foo();
       function bar(); 
   }
   
   ?>


This problem tends to occur in code that splits interfaces and classes by file. This means that PHP's linting will skip the definitions and not find the problem. At execution time, the definitions will be checked, and a Fatal error will occur.

This situation usually detects code that was forgotten during a refactorisation of the interface or the class and its sibblings.

See also `Interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_.


Suggestions
^^^^^^^^^^^

* Implements all the methods from the interfaces
* Remove the class
* Make the class abstract
* Make the missing methods abstract

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Interfaces/IsNotImplemented |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.9.5                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _interfaces-undefinedinterfaces:

.. _undefined-interfaces:

Undefined Interfaces
++++++++++++++++++++

 Some typehints or ``instanceof`` that are relying on undefined interfaces or classes. They will always return false. Any condition based upon them are dead code.

.. code-block:: php

   <?php
   
   class var implements undefinedInterface {
       // If undefinedInterface is undefined, this code lints but doesn't run
   }
   
   if ($o instanceof undefinedInterface) {
       // This is silent dead code
   }
   
   function foo(undefinedInterface $a) {
       // This is dead code
       // it will probably be discovered at execution
   }
   
   ?>


See also `Object interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_, `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_, and `Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_.


Suggestions
^^^^^^^^^^^

* Implement the missing interfaces
* Remove the code governed by the missing interface : the whole method if it is an typehint, the whole if/then if it is a condition.

Specs
^^^^^
+--------------+-----------------------------------------------------+
| Short name   | Interfaces/UndefinedInterfaces                      |
+--------------+-----------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                      |
+--------------+-----------------------------------------------------+
| Exakat since | 0.8.4                                               |
+--------------+-----------------------------------------------------+
| PHP Version  | All                                                 |
+--------------+-----------------------------------------------------+
| Severity     | Major                                               |
+--------------+-----------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                     |
+--------------+-----------------------------------------------------+
| Precision    | High                                                |
+--------------+-----------------------------------------------------+
| Examples     | :ref:`case-xataface-interfaces-undefinedinterfaces` |
+--------------+-----------------------------------------------------+


.. _namespaces-alias:

.. _aliases:

Aliases
+++++++

 List of all aliases used, to alias namespaces.

.. code-block:: php

   <?php
   
   // This is an alias
   use stdClass as aClass;
   
   // This is not an alias : it is not explicit
   use stdClass;
   
   trait t {
       // This is not an alias, it's a trait usage
       use otherTrait;
   }
   
   ?>


See also `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Namespaces/Alias |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _namespaces-emptynamespace:

.. _empty-namespace:

Empty Namespace
+++++++++++++++

 Declaring a namespace in the code and not using it for structure declarations or global instructions is useless.

Using simple style : 

.. code-block:: php

   <?php
   
   namespace Y;
   
   class foo {}
   
   
   namespace X;
   // This is useless
   
   ?>


Using bracket-style syntax : 

.. code-block:: php

   <?php
   
   namespace X {
       // This is useless
   }
   
   namespace Y {
   
       class foo {}
   
   }
   
   ?>





Suggestions
^^^^^^^^^^^

* Remove the namespace

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------+
| Short name   | Namespaces/EmptyNamespace                                                                           |
+--------------+-----------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                 |
+--------------+-----------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                    |
+--------------+-----------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                |
+--------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-empty-namespace <https://github.com/dseguy/clearPHP/tree/master/rules/no-empty-namespace.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------------+


.. _namespaces-hiddenuse:

.. _hidden-use-expression:

Hidden Use Expression
+++++++++++++++++++++

 The use expression for namespaces should always be at the beginning of the namespace block. 

It is where everyone expect them, and it is less confusing than having them at various levels.

.. code-block:: php

   <?php
   
   // This is visible 
   use A;
   
   class B {}
   
   // This is hidden 
   use C as D;
   
   class E extends D {
       use traitT; // This is a use for a trait
   
       function foo() {
           // This is a use for a closure
           return function ($a) use ($b) {}
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Group all uses together, at the beginning of the namespace or class

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------+
| Short name   | Namespaces/HiddenUse                                                                |
+--------------+-------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                      |
+--------------+-------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                               |
+--------------+-------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                 |
+--------------+-------------------------------------------------------------------------------------+
| Severity     | Minor                                                                               |
+--------------+-------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                    |
+--------------+-------------------------------------------------------------------------------------+
| Precision    | High                                                                                |
+--------------+-------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tikiwiki-namespaces-hiddenuse`, :ref:`case-openemr-namespaces-hiddenuse` |
+--------------+-------------------------------------------------------------------------------------+


.. _namespaces-multiplealiasdefinitionperfile:

.. _multiple-alias-definitions-per-file:

Multiple Alias Definitions Per File
+++++++++++++++++++++++++++++++++++

 Avoid aliasing the same name with different aliases. This leads to confusion.

.. code-block:: php

   <?php
   
   // first occurrence
   use name\space\ClasseName;
   
   // when this happens, several other uses are mentionned
   
   // name\space\ClasseName has now two names
   use name\space\ClasseName as anotherName;
   
   ?>


See also Namespaces/MultipleAliasDefinition.

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Namespaces/MultipleAliasDefinitionPerFile |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Analyze`                            |
+--------------+-------------------------------------------+
| Exakat since | 0.10.3                                    |
+--------------+-------------------------------------------+
| PHP Version  | All                                       |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Slow (1 hour)                             |
+--------------+-------------------------------------------+
| Precision    | High                                      |
+--------------+-------------------------------------------+


.. _namespaces-multiplealiasdefinitions:

.. _multiple-alias-definitions:

Multiple Alias Definitions
++++++++++++++++++++++++++

 Some aliases are representing different classes across the repository. This leads to potential confusion. 

Across an application, it is recommended to use the same namespace for one alias. Failing to do this lead to the same keyword to represent different values in different files, with different behavior. Those are hard to find bugs. 

.. code-block:: php

   <?php
   
   namespace A {
       use d\d; // aka D
   }
   
   // Those are usually in different files, rather than just different namespaces.
   
   namespace B {
       use b\c as D; // also D. This could be named something else
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Give more specific names to classes
* Use an alias 'use A\B ac BC' to give locally another name

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------------------+
| Short name   | Namespaces/MultipleAliasDefinitions                                                                              |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                   |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                              |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                                 |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                             |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-namespaces-multiplealiasdefinitions`, :ref:`case-phinx-namespaces-multiplealiasdefinitions` |
+--------------+------------------------------------------------------------------------------------------------------------------+


.. _namespaces-namespaceusage:

.. _namespaces:

Namespaces
++++++++++

 Inventory of all namespaces.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Namespaces/NamespaceUsage |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _namespaces-namespacesnames:

.. _namespaces-glossary:

Namespaces Glossary
+++++++++++++++++++

 List of all the defined namespaces in the code, using the namespace keyword. 

.. code-block:: php

   <?php
   
   // One reported namespace
   namespace one\name\space {}
   
   // This global namespace is reported, as it is explicit
   namespace { }
   
   ?>


Global namespaces are mentioned when they are explicitly used.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Namespaces/Namespacesnames |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _namespaces-shouldmakealias:

.. _should-make-alias:

Should Make Alias
+++++++++++++++++

 Long names should be aliased.

Aliased names are easy to read at the beginning of the script; they may be changed at one point, and update the whole code at the same time. 
Finally, short names makes the rest of the code readable. 

.. code-block:: php

   <?php
   
   namespace x\y\z;
   
   use a\b\c\d\e\f\g as Object;
   
   // long name, difficult to read, prone to change.
   new a\b\c\d\e\f\g();
   
   // long name, difficult to read, prone to silent dead code if namespace change.
   if ($o instanceof a\b\c\d\e\f\g) {
       
   }
   
   // short names Easy to update all at once.
   new Object();
   if ($o instanceof Object) {
       
   }
   
   ?>

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Namespaces/ShouldMakeAlias |
+--------------+----------------------------+
| Rulesets     | :ref:`Analyze`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _patterns-courrierantipattern:

.. _courier-anti-pattern:

Courier Anti-Pattern
++++++++++++++++++++

 The courier anti-pattern is the storage of a dependency by a class, in order to create an instance that requires this dependency.

The class itself doesn't actually need this dependency, but has a dependency to a class that requires it. 

.. code-block:: php

   <?php
   
   // The foo class requires bar
   class Foo {
       public function __construct(Bar $b) {
       }
   }
   
   // Class A doesn't depends on Bar, but depends on Foo
   // Class A never uses Bar, but only uses Foo.
   class A {
       private $courier;
   
       public function __construct(Bar $courier) {
           $this->courier = $courier;       
       }
   
       public function Afoo() {
           $b = new Foo($this->courier);
       }
   
   }
   
   ?>


The alternative here is to inject Foo instead of Bar. 

See also `Courier Anti-pattern <https://r.je/oop-courier-anti-pattern.html>`_.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Patterns/CourrierAntiPattern |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.11.6                       |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _patterns-dependencyinjection:

.. _dependency-injection:

Dependency Injection
++++++++++++++++++++

 A dependency injection is a typehinted argument, that is stored in a property by the constructor. 

.. code-block:: php

   <?php
   
   // Classic dependency injection 
   class foo {
       private $bar;
   
       public function __construct(Bar $bar) {
           $this->bar = $bar;
       }
   
       public function doSomething($args) {
           return $this->bar->barbar($args);
       }
   }
   
   // Without typehint, this is not a dependency injection
   class foo {
       private $bar;
   
       public function __construct($bar) {
           $this->bar = $bar;
       }
   }
   
   ?>


See also `Understanding Dependency Injection <http://php-di.org/doc/understanding-di.html>`_.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Patterns/DependencyInjection |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.11.6                       |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _patterns-factory:

.. _an-oop-factory:

An OOP Factory
++++++++++++++

 A method or function that implements a factory. A factory is a class that handles the creation of an object, based on parameters. The factory hides the logic that leads to the creation of the object. 

.. code-block:: php

   <?php
       class AutomobileFactory {
           public static function create($make, $model) {
               $className = \\Automaker\\Brand\\$make;
               return new $className($model);
           }
       }
       
       // The factory is able to build any car, based on their 
       $fuego = AutomobileFactory::create('Renault', 'Fuego');
       
       print_r($fuego->getMakeAndModel()); // outputs Renault Fuego
   ?>


See also `Factory (object-oriented programming) <https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)>`_ and `Factory <https://phptherightway.com/pages/Design-Patterns.html#factory>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+------------------+
| Short name   | Patterns/Factory |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 1.6.7            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Quick (30 mins)  |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _performances-arraymergeinloops:

.. _no-array\_merge()-in-loops:

No array_merge() In Loops
+++++++++++++++++++++++++

 `array_merge() <https://www.php.net/array_merge>`_ is memory intensive : every call will duplicate the arguments in memory, before merging them. 

To handle arrays that may be quite big, it is recommended to avoid using `array_merge() <https://www.php.net/array_merge>`_ in a loop. Instead, one should use `array_merge() <https://www.php.net/array_merge>`_ with as many arguments as possible, making the merge a on time call.

.. code-block:: php

   <?php
   
   // A large multidimensional array
   $source = ['a' => ['a', 'b', /*...*/],
              'b' => ['b', 'c', 'd', /*...*/],
              /*...*/
              ];
   
   // Faster way
   $b = array();
   foreach($source as $key => $values) {
       //Collect in an array
       $b[] = $values;
   }
   
   // One call to array_merge
   $b = call_user_func_array('array_merge', $b);
   // or with variadic
   $b = call_user_func('array_merge', ..$b);
   
   // Fastest way (with above example, without checking nor data pulling)
   $b = call_user_func_array('array_merge', array_values($source))
   // or
   $b = call_user_func('array_merge', ...array_values($source))
   
   // Slow way to merge it all
   $b = array();
   foreach($source as $key => $values) {
       $b = array_merge($b, $values);
   }
   
   ?>


Note that `array_merge_recursive() <https://www.php.net/array_merge_recursive>`_ and `file_put_contents() <https://www.php.net/file_put_contents>`_ are affected and reported the same way.



Suggestions
^^^^^^^^^^^

* Store all intermediate arrays in a temporary variable, and use array_merge() once, with ellipsis or call_user_func_array().

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------+
| Short name   | Performances/ArrayMergeInLoops                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-array_merge-in-loop <https://github.com/dseguy/clearPHP/tree/master/rules/no-array_merge-in-loop.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tine20-performances-arraymergeinloops`                                                           |
+--------------+-------------------------------------------------------------------------------------------------------------+


.. _performances-prepostincrement:

.. _pre-increment:

Pre-increment
+++++++++++++

 When possible, use the pre-increment operator (``++$i`` or ``--$i``) instead of the post-increment operator (``$i++`` or ``$i--``).

The latter needs an extra memory allocation that costs about 10% of performances. 

.. code-block:: php

   <?php
   
   // ++$i should be preferred over $i++, as current value is not important
   for($i = 0; $i <10; ++$i) {
       // do Something
   }
   
   // ++$b and $b++ have different impact here, since $a will collect $b + 1 or $b, respectively.
   $a = $b++;
   
   ?>


This is a micro-optimisation. However, its usage is so widespread, including within loops, that it may eventually have an significant impact on execution time. As such, it is recommended to adopt this rule, and only consider changing legacy code as they are refactored for other reasons.



Suggestions
^^^^^^^^^^^

* Use the pre increment when the new value is not reused.

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------------+
| Short name   | Performances/PrePostIncrement                                                                              |
+--------------+------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                             |
+--------------+------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                        |
+--------------+------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------+
| Precision    | Very high                                                                                                  |
+--------------+------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-expressionengine-performances-prepostincrement`, :ref:`case-traq-performances-prepostincrement` |
+--------------+------------------------------------------------------------------------------------------------------------+


.. _performances-strpostoomuch:

.. _strpos()-too-much:

strpos() Too Much
+++++++++++++++++

 `strpos() <https://www.php.net/strpos>`_ covers the whole string before reporting 0. If the expected string is expected be at the beginning, or a fixed place, it is more stable to use `substr() <https://www.php.net/substr>`_ for comparison.

The longer the haystack (the searched string), the more efficient is that trick. The string has to be 10k or more to have impact, unless it is in a loop. 

.. code-block:: php

   <?php
   
   // This always reads the same amount of string
   if (substr($html, 0, 6) === '<html>') {
   
   }
   
   // When searching for a single character, checking with a known position ($string[$position]) is even faster
   if ($html[0] === '<') {
   
   }
   
   // With strpos(), the best way is to search for something that exist, and use absence as worst case scenario 
   if (strpos($html, '<html>') > 0) {
   
   } else {
       // 
   }
   
   // When the search fails, the whole string has been read
   if (strpos($html, '<html>') === 0) {
   
   }
   
   ?>


This applies to `stripos() <https://www.php.net/stripos>`_ too.



Suggestions
^^^^^^^^^^^

* Check for presence, and not for absence
* use substr() and compare the extracted string
* For single chars, try using the position in the string

Specs
^^^^^
+--------------+--------------------------------------------------+
| Short name   | Performances/StrposTooMuch                       |
+--------------+--------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                   |
+--------------+--------------------------------------------------+
| Exakat since | 1.2.8                                            |
+--------------+--------------------------------------------------+
| PHP Version  | All                                              |
+--------------+--------------------------------------------------+
| Severity     | Minor                                            |
+--------------+--------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                 |
+--------------+--------------------------------------------------+
| Precision    | High                                             |
+--------------+--------------------------------------------------+
| Examples     | :ref:`case-wordpress-performances-strpostoomuch` |
+--------------+--------------------------------------------------+


.. _performances-usearrayslice:

.. _use-array\_slice():

Use array_slice()
+++++++++++++++++

 Array_slice is de equivalent of `substr() <https://www.php.net/substr>`_ for arrays.

`array_splice() <https://www.php.net/array_splice>`_ is also possible, to remove a portion of array inside the array, not at the ends. This has no equivalent for strings.

.. code-block:: php

   <?php
   
   $array = range(0, 9);
   
   // Extract the 5 first elements
   print_r(array_slice($array, 0, 5));
   
   // Extract the 4 last elements
   print_r(array_slice($array, -4));
   
   // Extract the 2 central elements : 4 and 5
   print_r(array_splice($array, 4, 2));
   
   // slow way to remove the last elementst of an array
   for($i = 0; $i < 4) {
       array_pop($array);
   }
   
   ?>


See also `array_slice <http://www.php.net/array_slice>`_ and `array_splice <http://www.php.net/array_splice>`_.
         


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Performances/UseArraySlice |
+--------------+----------------------------+
| Rulesets     | :ref:`Analyze`             |
+--------------+----------------------------+
| Exakat since | 1.9.5                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _php-alternativesyntax:

.. _php-alternative-syntax:

PHP Alternative Syntax
++++++++++++++++++++++

 Identify the usage of alternative syntax in the code, for If then, Switch, While, For and Foreach.

.. code-block:: php

   <?php
   
   // Normal syntax
   if ($a == 1) { 
       print $a;
   }
   
   // Alternative syntax : identical to the previous one.
   if ($a == 1) : 
       print $a;
   endif;
   
   ?>


See also `Alternative syntax <https://www.php.net/manual/en/control-structures.alternative-syntax.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Php/AlternativeSyntax |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | Very high             |
+--------------+-----------------------+


.. _php-argon2usage:

.. _argon2-usage:

Argon2 Usage
++++++++++++

 Argon2 is an optionally compiled password hashing API. 

Argon2 has been added to the password hashing API in PHP 7.2. 

It is not available in older version. It also requires PHP to be compiled with the --with-password-argon2 option. 

.. code-block:: php

   <?php
   
   // Hashing a password with argon2
   $hash = password_hash('password', PASSWORD_ARGON2I, ['memory_cost' => 1<<17, 
                                                        'time_cost'   => PASSWORD_ARGON2_DEFAULT_TIME_COST, 
                                                        'threads'     => PASSWORD_ARGON2_DEFAULT_THREADS]);
   
   ?>


See also `Argon2 Password Hash <https://wiki.php.net/rfc/argon2_password_hash>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Php/Argon2Usage |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 1.0.4           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _php-arraykeyexistswithobjects:

.. _array\_key\_exists()-works-on-arrays:

array_key_exists() Works On Arrays
++++++++++++++++++++++++++++++++++

 `array_key_exists() <https://www.php.net/array_key_exists>`_ requires arrays as second argument. Until PHP 7.4, objects were also allowed, yet it is now deprecated.

.. code-block:: php

   <?php
   
   // Valid way to check for key
   $array = ['a' => 1];
   var_dump(array_key_exists('a', $array))
   
   
   // Deprecated since PHP 7.4
   $object = new Stdclass();
   $object->a = 1;
   var_dump(array_key_exists('a', $object))
   
   ?>


See also `array_key_exists() with objects <https://wiki.php.net/rfc/deprecations_php_7_4#array_key_exists_with_objects>`_, and `array_key_exists <https://php.net/array-key-exists>`_.

Suggestions
^^^^^^^^^^^

* Use the (array) cast to turn the object into an array
* Use the native PHP function proprety_exists() or isset() on the property to check them.

Specs
^^^^^
+----------------+-------------------------------------------+
| Short name     | Php/ArrayKeyExistsWithObjects             |
+----------------+-------------------------------------------+
| Rulesets       | :ref:`Analyze`, :ref:`CompatibilityPHP74` |
+----------------+-------------------------------------------+
| Exakat since   | 1.9.0                                     |
+----------------+-------------------------------------------+
| PHP Version    | All                                       |
+----------------+-------------------------------------------+
| PHP deprecated | 7.4                                       |
+----------------+-------------------------------------------+
| Severity       | Minor                                     |
+----------------+-------------------------------------------+
| Time To Fix    | Quick (30 mins)                           |
+----------------+-------------------------------------------+
| Precision      | High                                      |
+----------------+-------------------------------------------+


.. _php-assertionusage:

.. _assertions:

Assertions
++++++++++

 Usage of assertions, to add checks within PHP code.

Assertions should be used as a debugging feature only. You may use them for sanity-checks that test for conditions that should always be TRUE and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features.

.. code-block:: php

   <?php
   
   function foo($string) {
       assert(!empty($string), 'An empty string was provided!');
       
       echo '['.$string.']';
   }
   
   ?>


See also `assert <https://www.php.net/assert>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Php/AssertionUsage |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _php-assignand:

.. _assign-with-and-precedence:

Assign With And Precedence
++++++++++++++++++++++++++

 The lettered logical operators yield to assignation. It may collect less information than expected.

It is recommended to use the &&, ^ and || operators, instead of and, or and xor, to prevent confusion.

.. code-block:: php

   <?php
   
   // The expected behavior is 
   // The following are equivalent
    $a =  $b  && $c;
    $a = ($b && $c);
   
   // The unexpected behavior is 
   // The following are equivalent
    $a = $b  and $c;
   ($a = $b) and $c;
   
   ?>


See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.



Suggestions
^^^^^^^^^^^

* Always use symbol && rather than letter and
* To be safe, add parenthesis to enforce priorities

Specs
^^^^^
+--------------+------------------------------------+
| Short name   | Php/AssignAnd                      |
+--------------+------------------------------------+
| Rulesets     | :ref:`Analyze`                     |
+--------------+------------------------------------+
| Exakat since | 0.12.4                             |
+--------------+------------------------------------+
| PHP Version  | All                                |
+--------------+------------------------------------+
| Severity     | Critical                           |
+--------------+------------------------------------+
| Time To Fix  | Quick (30 mins)                    |
+--------------+------------------------------------+
| Precision    | Very high                          |
+--------------+------------------------------------+
| Examples     | :ref:`case-xataface-php-assignand` |
+--------------+------------------------------------+


.. _php-autoloadusage:

.. _autoloading:

Autoloading
+++++++++++

 Usage of the autoloading feature of PHP. 

.. code-block:: php

   <?php
   
   spl_autoload_register('my_autoloader');
   
   // Old way to autoload. Deprecated in PHP 7.2
   function __autoload($class ) {}
   
   ?>


Defining the __autoload() function is obsolete since PHP 7.2.

See also `__autoload <https://www.php.net/autoload>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/AutoloadUsage |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-betterrand:

.. _use-random\_int():

Use random_int()
++++++++++++++++

 `rand() <https://www.php.net/rand>`_ and `mt_rand() <https://www.php.net/mt_rand>`_ should be replaced with `random_int() <https://www.php.net/random_int>`_.

At worse, `rand() <https://www.php.net/rand>`_ should be replaced with `mt_rand() <https://www.php.net/mt_rand>`_, which is a drop-in replacement and `srand() <https://www.php.net/srand>`_ by `mt_srand() <https://www.php.net/mt_srand>`_. 

`random_int() <https://www.php.net/random_int>`_ replaces `rand() <https://www.php.net/rand>`_, and has no seeding function like `srand() <https://www.php.net/srand>`_.

Other sources of entropy that should be replaced by `random_int() <https://www.php.net/random_int>`_ : `microtime() <https://www.php.net/microtime>`_, `uniqid() <https://www.php.net/uniqid>`_, `time() <https://www.php.net/time>`_. Those a often combined with hashing functions and mixed with other sources of entropy, such as a salt.

.. code-block:: php

   <?php
   
   // Avoid using this
   $random = rand(0, 10);
   
   // Drop-in replacement
   $random = mt_rand(0, 10);
   
   // Even better but different : 
   // valid with PHP 7.0+
   try {
       $random = random_int(0, 10);
   } catch (\Exception $e) {
       // process case of not enoug random values
   }
   
   // This is also a source of entropy, based on srand()
   // random_int() is a drop-in replacement here
   $a = sha256(uniqid());
   
   ?>


Since PHP 7, `random_int() <https://www.php.net/random_int>`_ along with `random_bytes() <https://www.php.net/random_bytes>`_, provides cryptographically secure pseudo-random bytes, which are good to be used
when security is involved. `openssl_random_pseudo_bytes() <https://www.php.net/openssl_random_pseudo_bytes>`_ may be used when the ``OpenSSL`` extension is available.

See also `CSPRNG <https://www.php.net/manual/en/book.csprng.php>`_ and `OpenSSL <https://www.php.net/manual/en/book.openssl.php>`_.


Suggestions
^^^^^^^^^^^

* Use random_bytes() and randon_int(). At least, use them as a base for random data, and then add extra prefix and suffix, and a hash call on top.

Specs
^^^^^
+--------------+-----------------------------------------------------------------------+
| Short name   | Php/BetterRand                                                        |
+--------------+-----------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                        |
+--------------+-----------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                 |
+--------------+-----------------------------------------------------------------------+
| PHP Version  | All                                                                   |
+--------------+-----------------------------------------------------------------------+
| Severity     | Major                                                                 |
+--------------+-----------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                      |
+--------------+-----------------------------------------------------------------------+
| Precision    | Very high                                                             |
+--------------+-----------------------------------------------------------------------+
| Examples     | :ref:`case-thelia-php-betterrand`, :ref:`case-fuelcms-php-betterrand` |
+--------------+-----------------------------------------------------------------------+


.. _php-castunsetusage:

.. _cast-unset-usage:

Cast Unset Usage
++++++++++++++++

 Usage of the `(unset)` cast operator. It is removed in PHP 8.0, and was deprecated since PHP 7.2.0.

.. code-block:: php

   <?php
   
   $a = 1;
   (unset) $a;
   
   // functioncall is OK
   unset($a);
   
   ?>


See also `Unset casting <https://www.php.net/manual/en/language.types.null.php#language.types.null.casting>`_.


Suggestions
^^^^^^^^^^^

* Replace `(unset)` with a call to unset().
* Remove the unset call altogether.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/CastUnsetUsage        |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 2.1.8                     |
+--------------+---------------------------+
| PHP Version  | 8.0-                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-castingusage:

.. _cast-usage:

Cast Usage
++++++++++

 List of all cast usage.

PHP does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used. 

.. code-block:: php

   <?php
   
   if (is_int($_GET['x'])) {
       $number = (int) $_GET['x'];
   } else {
       error_display('a wrong value was provided for "x"');
   }
   
   ?>


Until PHP 7.2, a ``(unset)`` operator was available. It had the same role as ``unset()`` as a function.

See also `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_ and `unset <https://www.php.net/unset>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Php/CastingUsage |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _php-coalesce:

.. _coalesce:

Coalesce
++++++++

 Usage of coalesce operator, in PHP since PHP 5.3.

Note that the coalesce operator is a special case of the ternary operator.

.. code-block:: php

   <?php
   
   // Coalesce operator, since PHP 5.3
   $a = $b ?: 'default value';
   
   // Equivalent to $a = $b ? $b : 'default value';
   
   ?>


See also `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/Coalesce   |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | 7.0+           |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-concatandaddition:

.. _concat-and-addition:

Concat And Addition
+++++++++++++++++++

 Precedence between addition and concatenation has changed. In PHP 7.4, addition has precedence, and before, addition and concatenation had the same precedence.

From the RFC : ``Currently the precedence of '.', '+' and '-' operators are equal. Any combination of these operators are simply evaluated left-to-right``.

This is counter-intuitive though: you rarely want to add or subtract concatenated strings which in general are not numbers. However, given PHP's capability of seamlessly converting an integer to a string, concatenation of these values is desired.``

.. code-block:: php

   <?php
   // Extracted from the RFC
   echo sum: . $a + $b;
    
   // current behavior: evaluated left-to-right
   echo (sum: . $a) + $b;
    
   // desired behavior: addition and subtraction have a higher precendence
   echo sum : . ($a + $b);
   
   ?>


This analysis reports any addition and concatenation that are mixed, without parenthesis. Addition also means substraction here, aka using `+` or `-`.

The same applies to bitshift operations, ``<<`` and ``>>``. There is no RFC for this change.

See also `Change the precedence of the concatenation operator <https://wiki.php.net/rfc/concatenation_precedence>`_.


Suggestions
^^^^^^^^^^^

* Add parenthesis around the addition to ensure its expected priority
* Move the addition outside the concatenation

Specs
^^^^^
+--------------+----------------------------------------------------------------------+
| Short name   | Php/ConcatAndAddition                                                |
+--------------+----------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP74`, :ref:`CompatibilityPHP80` |
+--------------+----------------------------------------------------------------------+
| Exakat since | 1.8.0                                                                |
+--------------+----------------------------------------------------------------------+
| PHP Version  | All                                                                  |
+--------------+----------------------------------------------------------------------+
| Severity     | Minor                                                                |
+--------------+----------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                      |
+--------------+----------------------------------------------------------------------+
| Precision    | High                                                                 |
+--------------+----------------------------------------------------------------------+


.. _php-cryptousage:

.. _crypto-usage:

Crypto Usage
++++++++++++

 Usage of cryptography and hashes functions. 

The functions listed are the native PHP functions, and do not belong to a specific extension, like ``OpenSSL``, ``mcrypt`` or ``mhash``.

Cryptography and hashes are mainly used for storing sensitive data, such as passwords, or to verify authenticity of data. They may also be used for name-randomization with cache.

.. code-block:: php

   <?php
   
   if (md5($_POST['password']) === $row['password_hash']) {
       user_login($user);
   } else {
       error('Wrong password');
   }
   ?>


See also `Cryptography Extensions <https://www.php.net/manual/en/refs.crypto.php>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Php/CryptoUsage |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 1.0.4           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _php-declareencoding:

.. _encoding-usage:

Encoding Usage
++++++++++++++

 Usage of declare(encoding = );.

.. code-block:: php

   <?php
   
   // Setting encoding for the file;
       declare(encoding = 'UTF-8');
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Php/DeclareEncoding |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.12.1              |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _php-declarestrict:

.. _strict\_types-preference:

strict_types Preference
+++++++++++++++++++++++

 ``strict_types`` is a PHP mode where typehint are enforced strictly or weakly. By default, it is weak typing, allowing backward compatibility with previous versions. 

This analysis reports if ``strict_types`` are used systematically or not. ``strict_types`` affects the calling file, not the definition file. 

.. code-block:: php

   <?php
   
   // define strict_types
   declare(strict_types = 1);
   
   foo(1);
   
   ?>


See also `Strict typing <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/DeclareStrict |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.12.2            |
+--------------+-------------------+
| PHP Version  | 7.0+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-declarestricttype:

.. _declare-strict\_types-usage:

Declare strict_types Usage
++++++++++++++++++++++++++

 Usage of ``strict_types``. By default, PHP attempts to change the original type to match the type specified by the type-declaration. With an explicit ``strict_types`` declaration, PHP ensures that the incoming argument has the exact type. 

``strict_types`` were introduced in PHP 7.0.

.. code-block:: php

   <?php
   
   // Setting strict_types;
       declare(strict_types = 1);
   
       function foo(int $i) {
           echo $i;
       }
   
       // Always valid : displays 1
       foo(1);
       // with strict types, this emits an error
       // without strict types, this displays 1
       foo(1.7);
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Php/DeclareStrictType |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.12.1                |
+--------------+-----------------------+
| PHP Version  | 7.0+                  |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _php-declareticks:

.. _ticks-usage:

Ticks Usage
+++++++++++

 Usage of declare(ticks = );.

.. code-block:: php

   <?php
   
   // Setting ticks value
       declare(ticks = 'UTF-8');
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Php/DeclareTicks |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.12.1           |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | Very high        |
+--------------+------------------+


.. _php-deprecated:

.. _deprecated-php-functions:

Deprecated PHP Functions
++++++++++++++++++++++++

 The following functions are deprecated. It is recommended to stop using them now and replace them with a durable equivalent. 

Note that these functions may be still usable : they generate warning that help tracking their usage in the log. To eradicate their usage, watch the logs, and update any deprecated warning. This way, the code won't be stuck when the function is actually removed from PHP.

.. code-block:: php

   <?php
   
   // This is the current function
   list($day, $month, $year) = explode('/', '08/06/1995');
   
   // This is deprecated
   list($day, $month, $year) = split('/', '08/06/1995');
   
   ?>




Suggestions
^^^^^^^^^^^

* Replace those deprecated with modern syntax
* Stop using deprecated syntax

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Php/Deprecated                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                           |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| ClearPHP     | `no-deprecated <https://github.com/dseguy/clearPHP/tree/master/rules/no-deprecated.md>`__ |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolphin-php-deprecated`                                                        |
+--------------+-------------------------------------------------------------------------------------------+


.. _php-detectcurrentclass:

.. _detect-current-class:

Detect Current Class
++++++++++++++++++++

 Detecting the current class should be done with `self\:\:class` or `static\:\:class` operator.

`__CLASS__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ may be replaced by ``self\:\:class``. 
`get_called_class() <https://www.php.net/get_called_class>`_ may be replaced by ``static\:\:class``. 

`__CLASS__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ and `get_called_class() <https://www.php.net/get_called_class>`_ are set to be deprecated in PHP 7.4. 

.. code-block:: php

   <?php
   
   class X {
       function foo() {
           echo __CLASS__.\n;          // X
           echo self::class.\n;        // X
           
           echo get_called_class().\n;  // Y
           echo static::class.\n;       // Y
       }
   }
   
   class Y extends X {}
   
   $y = new Y();
   $y->foo();
   
   ?>


See also `PHP RFC: Deprecations for PHP 7.4 <https://wiki.php.net/rfc/deprecations_php_7_4>`_.


Suggestions
^^^^^^^^^^^

* Use the self\:\:class operator to detect the current class name, instead of __CLASS__ and get_class().
* Use the static\:\:class operator to detect the current called class name, instead of get_called_class().

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/DetectCurrentClass    |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.3.8                     |
+--------------+---------------------------+
| PHP Version  | 8.0-                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | Very high                 |
+--------------+---------------------------+


.. _php-directivesusage:

.. _directives-usage:

Directives Usage
++++++++++++++++

 List of the directives mentioned in the code.

.. code-block:: php

   <?php
   
   //accessing the configuration to change it
   ini_set('timelimit', -1);
   
   //accessing the configuration to check it
   ini_get('safe_mode');
   
   ?>

Specs
^^^^^
+--------------+---------------------+
| Short name   | Php/DirectivesUsage |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _php-dlusage:

.. _dl()-usage:

Dl() Usage
++++++++++

 Dynamically load PHP extensions with `dl() <https://www.php.net/dl>`_.

.. code-block:: php

   <?php
   
       // dynamically loading ext/vips
   	dl('vips.' . PHP_SHLIB_SUFFIX);
   
   ?>


See also `dl <http://www.php.net/dl>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/DlUsage    |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.0.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-echotagusage:

.. _I?=-usage:

<?= Usage
+++++++++

 Usage of the <?= tag, that echo's directly the following content.

<?= $variable; 
?>

Specs
^^^^^
+--------------+------------------+
| Short name   | Php/EchoTagUsage |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Instant (5 mins) |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _php-ellipsisusage:

.. _ellipsis-usage:

Ellipsis Usage
++++++++++++++

 Usage of the ellipsis keyword. The keyword is three dots : `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ . It is also named variadic or splat operator.

It may be in function definitions, either in functioncalls.

`... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ allows for packing or unpacking arguments into an array.

.. code-block:: php

   <?php
   
   $args = [1, 2, 3];
   foo(...$args); 
   // Identical to foo(1,2,3);
   
   function bar(...$a) {
       // Identical to : $a = func_get_args();
   }
   ?>


See also `PHP RFC: Syntax for variadic functions <https://wiki.php.net/rfc/variadics>`_, `PHP 5.6 and the Splat Operator <https://lornajane.net/posts/2014/php-5-6-and-the-splat-operator>`_, and `Variable-length argument lists <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/EllipsisUsage |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | 5.6+              |
+--------------+-------------------+
| Severity     | Major             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-errorlogusage:

.. _error\_log()-usage:

Error_Log() Usage
+++++++++++++++++

 Usage of `error_log() <https://www.php.net/error_log>`_ function. This leads to checking the configuration of ``error_log`` in the PHP configuration directives.

.. code-block:: php

   <?php
   
   error_log(logging message\n);
   
   ?>

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/ErrorLogUsage |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.10.0            |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-filtertoaddslashes:

.. _filter-to-add\_slashes():

Filter To add_slashes()
+++++++++++++++++++++++

 ``FILTER_SANITIZE_MAGIC_QUOTES`` is deprecated. In PHP 7.4, it should be replaced with `addslashes() <https://www.php.net/addslashes>`_

According to the migration RDFC : 'Magic quotes were deprecated all the way back in PHP 5.3 and later removed in PHP 5.4. The filter extension implements a sanitization filter that mimics this behavior of magic_quotes by calling `addslashes() <https://www.php.net/addslashes>`_ on the input in question.'

.. code-block:: php

   <?php
   
   // Deprecated way to filter input
   $var = filter_input($input, FILTER_SANITIZE_MAGIC_QUOTES);
   
   // Alternative way to filter input
   $var = addslashes($input);
   
   ?>


`addslashes() <https://www.php.net/addslashes>`_ used to filter data while building SQL queries, to prevent injections. Nowadays, prepared queries are a better option.

See also `Deprecations for PHP 7.4 <https://wiki.php.net/rfc/deprecations_php_7_4>`_.

Suggestions
^^^^^^^^^^^

* Replace ``FILTER_SANITIZE_MAGIC_QUOTES`` with addslashes()
* Replace ``FILTER_SANITIZE_MAGIC_QUOTES`` with an adapted escaping system

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/FilterToAddSlashes    |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.9.9                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-fopenmode:

.. _wrong-fopen()-mode:

Wrong fopen() Mode
++++++++++++++++++

 Wrong file opening for `fopen() <https://www.php.net/fopen>`_.

`fopen() <https://www.php.net/fopen>`_ has a few modes, as described in the documentation : 'r', 'r+', for reading;  'w', 'w+' for writing; 'a', 'a+' for appending; 'x', 'x+' for modifying; 'c', 'c+' for writing and locking, 't' for text files and windows only.
An optional 'b' may be used to make the `fopen() <https://www.php.net/fopen>`_ call more portable and binary safe. Another optional 't' may be used to make the `fopen() <https://www.php.net/fopen>`_ call process automatically text input : this one should be avoided. 

.. code-block:: php

   <?php
   
   // open the file for reading, in binary mode
   $fp = fopen('/tmp/php.txt', 'rb');
   
   // New option e in PHP 7.0.16 and 7.1.2 (beware of compatibility)
   $fp = fopen('/tmp/php.txt', 'rbe');
   
   // Unknown option x
   $fp = fopen('/tmp/php.txt', 'rbx');
   
   ?>


Any other values are not understood by PHP. 

Suggestions
^^^^^^^^^^^

* Check the docs, choose the right opening mode.

Specs
^^^^^
+--------------+------------------------------------------------------------------------+
| Short name   | Php/FopenMode                                                          |
+--------------+------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                         |
+--------------+------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                  |
+--------------+------------------------------------------------------------------------+
| PHP Version  | All                                                                    |
+--------------+------------------------------------------------------------------------+
| Severity     | Major                                                                  |
+--------------+------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                        |
+--------------+------------------------------------------------------------------------+
| Precision    | High                                                                   |
+--------------+------------------------------------------------------------------------+
| Examples     | :ref:`case-tikiwiki-php-fopenmode`, :ref:`case-humo-gen-php-fopenmode` |
+--------------+------------------------------------------------------------------------+


.. _php-gotonames:

.. _goto-names:

Goto Names
++++++++++

 List of all goto labels used in the code. 

.. code-block:: php

   <?php
   
   GOTO_NAME_1: 
   
   // reports the usage of GOTO_NAME_1
   goto GOTO_NAME_1;
   
   UNUSED_GOTO_NAME_1: 
   
   ?>

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------+
| Short name   | Php/Gotonames                                                                 |
+--------------+-------------------------------------------------------------------------------+
| Rulesets     | :ref:`Appinfo`                                                                |
+--------------+-------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                         |
+--------------+-------------------------------------------------------------------------------+
| PHP Version  | All                                                                           |
+--------------+-------------------------------------------------------------------------------+
| Severity     | Minor                                                                         |
+--------------+-------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                 |
+--------------+-------------------------------------------------------------------------------+
| Precision    | Very high                                                                     |
+--------------+-------------------------------------------------------------------------------+
| ClearPHP     | `no-goto <https://github.com/dseguy/clearPHP/tree/master/rules/no-goto.md>`__ |
+--------------+-------------------------------------------------------------------------------+


.. _php-groupusedeclaration:

.. _group-use-declaration:

Group Use Declaration
+++++++++++++++++++++

 The group use declaration is used in the code.

.. code-block:: php

   <?php
   
   // Adapted from the RFC documentation 
   // Pre PHP 7 code
   use some\name_space\ClassA;
   use some\name_space\ClassB;
   use some\name_space\ClassC as C;
   
   use function some\name_space\fn_a;
   use function some\name_space\fn_b;
   use function some\name_space\fn_c;
   
   use const some\name_space\ConstA;
   use const some\name_space\ConstB;
   use const some\name_space\ConstC;
   
   // PHP 7+ code
   use some\name_space\{ClassA, ClassB, ClassC as C};
   use function some\name_space\{fn_a, fn_b, fn_c};
   use const some\name_space\{ConstA, ConstB, ConstC};
   
   ?>


See also `Group Use Declaration RFC <https://wiki.php.net/rfc/group_use_declarations>`_ and `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Php/GroupUseDeclaration |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.10.7                  |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Instant (5 mins)        |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _php-haltcompiler:

.. _\_\_halt\_compiler:

__halt_compiler
+++++++++++++++

 __halt_compiler() usage.

.. code-block:: php

   <?php
   
   // open this file
   $fp = fopen(__FILE__, 'r');
   
   // seek file pointer to data
   fseek($fp, __COMPILER_HALT_OFFSET__);
   
   // and output it
   var_dump(stream_get_contents($fp));
   
   // the end of the script execution
   __halt_compiler(); the installation data (eg. tar, gz, PHP, etc.)
   
   ?>

Specs
^^^^^
+--------------+------------------+
| Short name   | Php/Haltcompiler |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _php-hashalgos74:

.. _hash-algorithms-incompatible-with-php-7.4-:

Hash Algorithms Incompatible With PHP 7.4-
++++++++++++++++++++++++++++++++++++++++++

 List of hash algorithms incompatible with PHP 7.3 and older recent. At the moment of writing, this is compatible up to 7.4s. 

The hash algorithms were introduced in PHP 7.4s. 

.. code-block:: php

   <?php
   
   // Compatible only with 7.1 and more recent
   echo hash('crc32cs', 'The quick brown fox jumped over the lazy dog.');
   
   // Always compatible
   echo hash('ripemd320', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/HashAlgos74           |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.3.4                     |
+--------------+---------------------------+
| PHP Version  | 7.4-                      |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-idnuts46:

.. _idn\_to\_ascii()-new-default:

idn_to_ascii() New Default
++++++++++++++++++++++++++

 The default parameter value of `idn_to_ascii() <https://www.php.net/idn_to_ascii>`_ and `idn_to_utf8() <https://www.php.net/idn_to_utf8>`_ is now `INTL_IDNA_VARIANT_UTS46 <https://www.php.net/INTL_IDNA_VARIANT_UTS46>`_ instead of the deprecated `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_.

.. code-block:: php

   <?php
   
   echo idn_to_ascii('täst.de'); 
   
   ?>


See also `idn_to_ascii <https://www.php.net/manual/en/function.idn-to-ascii.php>`_, `idn_to_utf8 <https://www.php.net/manual/en/function.idn-to-utf8.php>`_ and `Unicode IDNA Compatibility Processing <http://unicode.org/reports/tr46/>`_.


Suggestions
^^^^^^^^^^^

* Explicitely add the second parameter to the idn_to_ascii() and idn_to_utf8() functions.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/IdnUts46              |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.5.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-incompilable:

.. _incompilable-files:

Incompilable Files
++++++++++++++++++

 Files that cannot be compiled, and, as such, be run by PHP. Scripts are linted against various versions of PHP. 

This is usually undesirable, as all code must compile before being executed. It may be that such files are not compilable because they are not yet ready for an upcoming PHP version.

.. code-block:: php

   <?php
   
   // Can't compile this : Print only accepts one argument
   print $a, $b, $c;
   
   ?>


Code that is not compilable with older PHP versions means that the code is breaking backward compatibility : good or bad is project decision.

When the code is used as a template for PHP code generation, for example at installation time, it is recommended to use a distinct file extension, so as to distinguish them from actual PHP code.



Suggestions
^^^^^^^^^^^

* If this file is a template for PHP code, change the extension to something else than .php
* Fix the syntax so it works with various versions of PHP

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Php/Incompilable                                                                              |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                                 |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| ClearPHP     | `no-incompilable <https://github.com/dseguy/clearPHP/tree/master/rules/no-incompilable.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-xataface-php-incompilable`                                                         |
+--------------+-----------------------------------------------------------------------------------------------+


.. _php-integerseparatorusage:

.. _numeric-literal-separator:

Numeric Literal Separator
+++++++++++++++++++++++++

 Integer and floats may be written with internal underscores. This way, it is possible to separate large number into smaller groups, and make them more readable.

Numeric Literal Separators were introduced in PHP 7.4 and are not backward compatible.

.. code-block:: php

   <?php
   $a = 1_000_000_000;   // A billion
   $a = 1000000000;      // A billion too...
   
   $b = 107_925_284.88;‬ // 6 light minute to kilometers = 107925284.88 kilometers
   $b = 107925284.88;‬   // Same as above
   ?>


See also `PHP RFC: Numeric Literal Separator <https://wiki.php.net/rfc/numeric_literal_separator>`_.
 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/IntegerSeparatorUsage |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 1.9.0                     |
+--------------+---------------------------+
| PHP Version  | 7.4+                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-internalparametertype:

.. _wrong-parameter-type:

Wrong Parameter Type
++++++++++++++++++++

 The expected parameter is not of the correct type. Check PHP documentation to know which is the right format to be used.

.. code-block:: php

   <?php
   
   // substr() shouldn't work on integers.
   // the first argument is first converted to string, and it is 123456.
   echo substr(123456, 0, 4); // display 1234
   
   // substr() shouldn't work on boolean
   // the first argument is first converted to string, and it is 1, and not t
   echo substr(true, 0, 1); // displays 1
   
   // substr() works correctly on strings.
   echo substr(123456, 0, 4);
   
   ?>

Specs
^^^^^
+--------------+-----------------------------------------------+
| Short name   | Php/InternalParameterType                     |
+--------------+-----------------------------------------------+
| Rulesets     | :ref:`Analyze`                                |
+--------------+-----------------------------------------------+
| Exakat since | 0.8.4                                         |
+--------------+-----------------------------------------------+
| PHP Version  | All                                           |
+--------------+-----------------------------------------------+
| Severity     | Major                                         |
+--------------+-----------------------------------------------+
| Time To Fix  | Quick (30 mins)                               |
+--------------+-----------------------------------------------+
| Precision    | High                                          |
+--------------+-----------------------------------------------+
| Examples     | :ref:`case-zencart-php-internalparametertype` |
+--------------+-----------------------------------------------+


.. _php-isawithstring:

.. _is\_a()-with-string:

Is_A() With String
++++++++++++++++++

 When using `is_a() <https://www.php.net/is_a>`_ with a string as first argument, the third argument is compulsory.

.. code-block:: php

   <?php
   
   // is_a() works with string as first argument, when the third argument is 'true'
   if (is_s('A', 'B', true)) {}
   
   // is_a() works with object as first argument
   if (is_s(new A, 'A')) {}
   ?>


See also `is_a() <https://www.php.net/is_a>`_.


Suggestions
^^^^^^^^^^^

* Add the third argument, and set it to true
* Use an object as a first argument

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/IsAWithString |
+--------------+-------------------+
| Rulesets     | :ref:`Analyze`    |
+--------------+-------------------+
| Exakat since | 1.9.9             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-isinf:

.. _manipulates-inf:

Manipulates INF
+++++++++++++++

 This code handles `INF <https://www.php.net/INF>`_ situations. `INF <https://www.php.net/INF>`_ represents the infinity, when used in a float context. It happens when a calculation returns a number that is much larger than the maximum allowed float (not integer), or a number that is not a Division by 0. 

.. code-block:: php

   <?php
   
   // pow returns INF, as it is equivalent to 1 / 0 ^ 2
   $a = pow(0,-2); // 
   
   // exp returns an actual value, but won't be able to represent it as a float
   $a = exp(PHP_INT_MAX); 
   
   // 0 ^ -1 is like 1 / 0 but returns INF.
   $a = pow(0, -1); 
   
   var_dump(is_infinite($a));
   
   // This yields a Division by zero exception
   $a = 1 / 0; 
   
   ?>


See also `Math predefined constants <https://www.php.net/manual/en/math.constants.php>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Php/IsINF       |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.10.6          |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _php-isnan:

.. _manipulates-nan:

Manipulates NaN
+++++++++++++++

 This code handles ``Not-a-Number`` situations. ``Not-a-Number``, also called ``NaN``, happens when a calculation can't return an actual float. 

.. code-block:: php

   <?php
   
   // acos returns a float, unless it is not possible.
   $a = acos(8);
   
   var_dump(is_nan($a));
   
   ?>


See also `Floats <https://www.php.net/manual/en/language.types.float.php>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Php/IsNAN       |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.10.6          |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _php-isnullvsequalnull:

.. _use-===-null:

Use === null
++++++++++++

 It is faster to use === null instead of `is_null() <https://www.php.net/is_null>`_.

.. code-block:: php

   <?php
   
   // Operator === is fast
   if ($a === null) {
   
   }
   
   // Function call is slow 
   if (is_null($a)) {
   
   }
   
   
   ?>




Suggestions
^^^^^^^^^^^

* Use === comparison

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Short name   | Php/IsnullVsEqualNull                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                      |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                 |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                     |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                                |
+--------------+---------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `avoid-those-slow-functions <https://github.com/dseguy/clearPHP/tree/master/rules/avoid-those-slow-functions.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------------------------+


.. _php-labelnames:

.. _labels:

Labels
++++++

 List of all labels used in the code. 

.. code-block:: php

   <?php
   
   // A is label. 
   goto A:
   
   A:
   
   // A label may be used by several gotos.
   goto A:
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/Labelnames |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-listshortsyntax:

.. _list-short-syntax:

List Short Syntax
+++++++++++++++++

 Usage of short syntax version of `list() <https://www.php.net/list>`_.

.. code-block:: php

   <?php
   
   // PHP 7.1 short list syntax
   // PHP 7.1 may also use key => value structures with list
   [$a, $b, $c] = ['2', 3, '4'];
   
   // PHP 7.0 list syntax
   list($a, $b, $c) = ['2', 3, '4'];
   
   ?>

Specs
^^^^^
+--------------+---------------------+
| Short name   | Php/ListShortSyntax |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | 7.1+                |
+--------------+---------------------+
| Severity     | Major               |
+--------------+---------------------+
| Time To Fix  | Quick (30 mins)     |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _php-listwithkeys:

.. _list-with-keys:

List With Keys
++++++++++++++

 Setting keys when using `list() <https://www.php.net/list>`_ is a PHP 7.1 feature.

.. code-block:: php

   <?php
   
   // PHP 7.1 and later only
   list('a' => $a, 'b' => $b) = ['b' => 1, 'c' => 2, 'a' => 3];
   
   ?>

Specs
^^^^^
+--------------+------------------+
| Short name   | Php/ListWithKeys |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | 7.1+             |
+--------------+------------------+
| Severity     | Major            |
+--------------+------------------+
| Time To Fix  | Quick (30 mins)  |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _php-logicalinletters:

.. _logical-should-use-symbolic-operators:

Logical Should Use Symbolic Operators
+++++++++++++++++++++++++++++++++++++

 Logical operators come in two flavors :  and / &&, || / or, ^ / xor. However, they are not exchangeable, as && and and have different precedence. 

.. code-block:: php

   <?php
   
   // Avoid lettered operator, as they have lower priority than expected
   $a = $b and $c;
   // $a === 3 because equivalent to ($a = $b) and $c;
   
   // safe way to write the above : 
   $a = ($b and $c);
   
   $a = $b && $c;
   // $a === 1
   
   ?>


It is recommended to use the symbol operators, rather than the letter ones.

See also `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_.



Suggestions
^^^^^^^^^^^

* Change the letter operators to the symbol one : and => &&, or => ||, xor => ^. Review the new expressions as processing order may have changed.
* Add parenthesis to make sure that the order is the expected one

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------+
| Short name   | Php/LogicalInLetters                                                                              |
+--------------+---------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                  |
+--------------+---------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                              |
+--------------+---------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-letter-logical <https://github.com/dseguy/clearPHP/tree/master/rules/no-letter-logical.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-cleverstyle-php-logicalinletters`, :ref:`case-openconf-php-logicalinletters`           |
+--------------+---------------------------------------------------------------------------------------------------+


.. _php-middleversion:

.. _php-bugfixes:

PHP Bugfixes
++++++++++++

 This is the list of features, used in the code, that also received a bug fix in recent PHP versions.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/MiddleVersion |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-missingsubpattern:

.. _possible-missing-subpattern:

Possible Missing Subpattern
+++++++++++++++++++++++++++

 When capturing subpatterns are the last ones in a regex, PHP doesn't fill their spot in the resulting array. This leads to a possible missing index in the result array.

.. code-block:: php

   <?php
   
   // displays a partial array, from 0 to 1
   preg_match('/(a)(b)?/', 'adc', $r);
   print_r($r);
   /*
   Array
   (
       [0] => a
       [1] => a
   )
   */
   
   // displays a full array, from 0 to 2
   preg_match('/(a)(b)?/', 'abc', $r);
   print_r($r);
   
   /*
   Array
   (
       [0] => ab
       [1] => a
       [2] => b
   )
   */
   
   // double 'b' when it is found
   print preg_replace(',^a(b)?,', './\$1\$1', 'abc'); // prints ./abbc
   print preg_replace(',^a(b)?,', './\$1\$1', 'adc'); // prints ./dc
   
   ?>

?>

The same applies to `preg_replace() <https://www.php.net/preg_replace>`_ : the pattern may match the string, but no value is available is the corresponding sub-pattern.

In PHP 7.4, a new option was added : `PREG_UNMATCHED_AS_NULL <https://www.php.net/PREG_UNMATCHED_AS_NULL>`_, which always provides a value for the subpatterns.

See also `Bug #50887 preg_match , last optional sub-patterns ignored when empty <https://bugs.php.net/bug.php?id=50887>`_ and `Bug #73948 Preg_match_all should return NULLs on trailing optional capture groups. <https://bugs.php.net/bug.php?id=73948>`_.


Suggestions
^^^^^^^^^^^

* Add an always capturing subpatterns after the last ?
* Move the ? inside the parenthesis, so the parenthesis is always on, but the content may be empty
* Add a test on the last index of the resulting array, to ensure it is available when needed
* Use the PREG_UNMATCHED_AS_NULL option (PHP 7.4+)

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------+
| Short name   | Php/MissingSubpattern                                                                |
+--------------+--------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                       |
+--------------+--------------------------------------------------------------------------------------+
| Exakat since | 1.6.1                                                                                |
+--------------+--------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                  |
+--------------+--------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                |
+--------------+--------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                      |
+--------------+--------------------------------------------------------------------------------------+
| Precision    | High                                                                                 |
+--------------+--------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phpmyadmin-php-missingsubpattern`, :ref:`case-spip-php-missingsubpattern` |
+--------------+--------------------------------------------------------------------------------------+


.. _php-nestedternarywithoutparenthesis:

.. _nested-ternary-without-parenthesis:

Nested Ternary Without Parenthesis
++++++++++++++++++++++++++++++++++

 It is not allowed to nest ternary operator within itself, without parenthesis. This has been implemented in PHP 7.4.

The reason behind this feature is to keep the code expressive. See the Warning message for more explanations

.. code-block:: php

   <?php
   
   $a ? 1 : ($b ? 2 : 3);
   
   // Still valid, as not ambiguous 
   $a ? $b ? 1 : 2 : 3;
   
   // Produces a warning
   //Unparenthesized `a ? b : c ? d : e` is deprecated. Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)`
   $a ? 1 : $b ? 2 : 3;
   
   ?>


See also `PHP RFC: Deprecate left-associative ternary operator <https://wiki.php.net/rfc/ternary_associativity>`_.



Suggestions
^^^^^^^^^^^

* Add parenthesis to nested ternary calls

Specs
^^^^^
+----------------+-------------------------------------------+
| Short name     | Php/NestedTernaryWithoutParenthesis       |
+----------------+-------------------------------------------+
| Rulesets       | :ref:`Appinfo`, :ref:`CompatibilityPHP74` |
+----------------+-------------------------------------------+
| Exakat since   | 1.9.4                                     |
+----------------+-------------------------------------------+
| PHP Version    | 7.4-                                      |
+----------------+-------------------------------------------+
| PHP deprecated | 7.4                                       |
+----------------+-------------------------------------------+
| Severity       | Minor                                     |
+----------------+-------------------------------------------+
| Time To Fix    | Quick (30 mins)                           |
+----------------+-------------------------------------------+
| Precision      | High                                      |
+----------------+-------------------------------------------+


.. _php-noclassinglobal:

.. _no-class-in-global:

No Class In Global
++++++++++++++++++

 Avoid defining structures in Global namespace. Always prefer using a namespace. This will come handy later, either when publishing the code, or when importing a library, or even if PHP reclaims that name. 

.. code-block:: php

   <?php
   
   // Code prepared for later
   namespace Foo {
       class Bar {}
   }
   
   // Code that may conflict with other names.
   namespace {
       class Bar {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use a specific namespace for your classes

Specs
^^^^^
+--------------+-----------------------------------------+
| Short name   | Php/NoClassInGlobal                     |
+--------------+-----------------------------------------+
| Rulesets     | :ref:`Analyze`                          |
+--------------+-----------------------------------------+
| Exakat since | 0.10.9                                  |
+--------------+-----------------------------------------+
| PHP Version  | All                                     |
+--------------+-----------------------------------------+
| Severity     | Minor                                   |
+--------------+-----------------------------------------+
| Time To Fix  | Slow (1 hour)                           |
+--------------+-----------------------------------------+
| Precision    | High                                    |
+--------------+-----------------------------------------+
| Examples     | :ref:`case-dolphin-php-noclassinglobal` |
+--------------+-----------------------------------------+


.. _php-nomorecurlyarrays:

.. _no-more-curly-arrays:

No More Curly Arrays
++++++++++++++++++++

 Only use square brackets to access array elements. The usage of curly brackets for array access is deprecated since PHP 7.4.

.. code-block:: php

   <?php
   
   $array = [1,2,3];
   
   // always valid
   echo $array[1];
   
   // deprecated in PHP 7.4
   echo $array{1};
   
   ?>


See also `Deprecate curly brace syntax <https://derickrethans.nl/phpinternalsnews-19.html>`_ and `Deprecate curly brace syntax for accessing array elements and string offsets <https://wiki.php.net/rfc/deprecate_curly_braces_array_access>`_.


Suggestions
^^^^^^^^^^^

* Always use square brackets to access particular index in an array

Specs
^^^^^
+----------------+---------------------------+
| Short name     | Php/NoMoreCurlyArrays     |
+----------------+---------------------------+
| Rulesets       | :ref:`CompatibilityPHP74` |
+----------------+---------------------------+
| Exakat since   | 1.9.2                     |
+----------------+---------------------------+
| PHP Version    | 8.0-                      |
+----------------+---------------------------+
| PHP deprecated | 7.4                       |
+----------------+---------------------------+
| Severity       | Minor                     |
+----------------+---------------------------+
| Time To Fix    | Quick (30 mins)           |
+----------------+---------------------------+
| Precision      | Very high                 |
+----------------+---------------------------+


.. _php-noreferenceforternary:

.. _no-reference-for-ternary:

No Reference For Ternary
++++++++++++++++++++++++

 The ternary operator and the null coalescing operator are both expressions that only return values, and not a variable. 

This means that any provided reference will be turned into its value. While this is usually invisible, it will raise a warning when a reference is expected. This is the case with methods returning a reference. 

A PHP notice is generated when using a ternary operator or the null coalesce operator : ``Only variable references should be returned by reference``. The notice is also emitted when returning objects. 

This applies to methods, functions and closures. 

.. code-block:: php

   <?php
   
   // This works
   function &foo($a, $b) { 
       if ($a === 1) {
           return $b; 
       } else {
           return $a; 
       }
   }
   
   // This raises a warning, as the operator returns a value
   function &foo($a, $b) { return $a === 1 ? $b : $a; }
   
   ?>


See also `Null Coalescing Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce>`_, `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_.


Suggestions
^^^^^^^^^^^

* Drop the reference at assignation time
* Drop the reference in the argument definition
* Drop the reference in the function return definition

Specs
^^^^^
+--------------+-------------------------------------------------+
| Short name   | Php/NoReferenceForTernary                       |
+--------------+-------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                  |
+--------------+-------------------------------------------------+
| Exakat since | 1.0.8                                           |
+--------------+-------------------------------------------------+
| PHP Version  | All                                             |
+--------------+-------------------------------------------------+
| Severity     | Major                                           |
+--------------+-------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                   |
+--------------+-------------------------------------------------+
| Precision    | High                                            |
+--------------+-------------------------------------------------+
| Examples     | :ref:`case-phpadsnew-php-noreferenceforternary` |
+--------------+-------------------------------------------------+


.. _php-overiddenfunction:

.. _php-overridden-function:

PHP Overridden Function
+++++++++++++++++++++++

 It is possible to declare and use PHP native function in a namespace. 

Within the declaration namespace, it is easy to confuse the local version and the global version, unless the function has been prefixed with ``\``.

.. code-block:: php

   <?php
   
   namespace A {
       use function A\dirname as split;
       
       function dirname($a, $b) { return __FUNCTION__; }
       
       echo dirname('/a/b/c');
       echo split('a', 'b');
       
       echo \dirname('/a/b/c');
   }
   
   ?>


When a piece of code use overridden function, any newcomer may be confused by the usage of classic PHP native function in surprising situations. 

It is recommended to avoid redeclare PHP native function in namespaces.



Suggestions
^^^^^^^^^^^

* Change the name of the function, in its declaration and usage.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Php/OveriddenFunction |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.7.6                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _php-pearusage:

.. _pear-usage:

Pear Usage
++++++++++

 Pear Usage : list of Pear packages in use. 

.. code-block:: php

   <?php
       require_once('MDB2.php');
       $dsn = 'mysql://user:pass@host';
       $mdb2 = &MDB2::factory($dsn);
       $mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);
   ?>


See also `PEAR <http://pear.php.net/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/PearUsage  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-php74deprecation:

.. _php-7.4-constant-deprecation:

PHP 7.4 Constant Deprecation
++++++++++++++++++++++++++++

 One constant is deprecated in PHP 7.4. 

* `CURLPIPE_HTTP1 <https://www.php.net/CURLPIPE_HTTP1>`_

See also `Deprecations for PHP 7.2 <https://wiki.php.net/rfc/deprecations_php_7_2>`_.



Suggestions
^^^^^^^^^^^

* Use CURLPIPE_MULTIPLEX or CURLPIPE_NOTHING

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74Deprecation      |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.9.3                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php74newclasses:

.. _php-7.4-new-class:

Php 7.4 New Class
+++++++++++++++++

 New classes, introduced in PHP 7.4. If classes where created with the same name, in current code, they have to be moved in a namespace, or removed from code to migrate safely to PHP 7.4.

The new classes are : 

+ ``ReflectionReference``
+ ``WeakReference``

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace
       class WeakReference {
           // Move to a namespace
           // or, remove this class
       }
   }
   
   namespace B {
       class WeakReference {
           // This is OK : in a namespace
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the current classes with the same names into a distinct domain name

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74NewClasses       |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.0.4                     |
+--------------+---------------------------+
| PHP Version  | 7.4-                      |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php74newconstants:

.. _new-constants-in-php-7.4:

New Constants In PHP 7.4
++++++++++++++++++++++++

 The following constants are now native in PHP 7.4. It is advised to avoid using such names for constant before moving to this new version.

* ``MB_ONIGURUMA_VERSION``
* ``SO_LABEL``
* ``SO_PEERLABEL``
* ``SO_LISTENQLIMIT``
* ``SO_LISTENQLEN``
* ``SO_USER_COOKIE``
* ``PHP_WINDOWS_EVENT_CTRL_C``
* ``PHP_WINDOWS_EVENT_CTRL_BREAK``
* ``TIDY_TAG_ARTICLE``
* ``TIDY_TAG_ASIDE``
* ``TIDY_TAG_AUDIO``
* ``TIDY_TAG_BDI``
* ``TIDY_TAG_CANVAS``
* ``TIDY_TAG_COMMAND``
* ``TIDY_TAG_DATALIST``
* ``TIDY_TAG_DETAILS``
* ``TIDY_TAG_DIALOG``
* ``TIDY_TAG_FIGCAPTION``
* ``TIDY_TAG_FIGURE``
* ``TIDY_TAG_FOOTER``
* ``TIDY_TAG_HEADER``
* ``TIDY_TAG_HGROUP``
* ``TIDY_TAG_MAIN``
* ``TIDY_TAG_MARK``
* ``TIDY_TAG_MENUITEM``
* ``TIDY_TAG_METER``
* ``TIDY_TAG_NAV``
* ``TIDY_TAG_OUTPUT``
* ``TIDY_TAG_PROGRESS``
* ``TIDY_TAG_SECTION``
* ``TIDY_TAG_SOURCE``
* ``TIDY_TAG_SUMMARY``
* ``TIDY_TAG_TEMPLATE``
* ``TIDY_TAG_TIME``
* ``TIDY_TAG_TRACK``
* ``TIDY_TAG_VIDEO``
* ``STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT``
* ``STREAM_CRYPTO_METHOD_TLSv1_3_SERVER``
* ``STREAM_CRYPTO_PROTO_TLSv1_3``
* ``T_COALESCE_EQUAL``
* ``T_FN``

See also `New global constants in 7.4 <https://www.php.net/manual/en/migration74.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Move the constants to a new namespace
* Remove the old constants
* Rename the old constants

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74NewConstants     |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php74newfunctions:

.. _new-functions-in-php-7.4:

New Functions In PHP 7.4
++++++++++++++++++++++++

 New functions are added to new PHP version.

The following functions are now native functions in PHP 7.3. It is compulsory to rename any custom function that was created in older versions. One alternative is to move the function to a custom namespace, and update the ``use`` list at the beginning of the script. 

* `mb_str_split <https://www.php.net/mb_str_split>`_
* `password_algos <https://www.php.net/password_algos>`_

Note : At the moment of writing, all links to the manual are not working.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74NewFunctions     |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.8.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php74removeddirective:

.. _php-7.4-removed-directives:

PHP 7.4 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 7.4.

+ allow_url_include

See `Deprecation allow_url_include <https://wiki.php.net/rfc/deprecations_php_7_4#allow_url_include>`_.


Suggestions
^^^^^^^^^^^

* Stop using this directive

Specs
^^^^^
+----------------+---------------------------------------------------------------------------------+
| Short name     | Php/Php74RemovedDirective                                                       |
+----------------+---------------------------------------------------------------------------------+
| Rulesets       | :ref:`CompatibilityPHP74`, :ref:`CompatibilityPHP80`, :ref:`CompatibilityPHP81` |
+----------------+---------------------------------------------------------------------------------+
| Exakat since   | 1.9.3                                                                           |
+----------------+---------------------------------------------------------------------------------+
| PHP Version    | 7.4+                                                                            |
+----------------+---------------------------------------------------------------------------------+
| PHP deprecated | 7.4                                                                             |
+----------------+---------------------------------------------------------------------------------+
| Severity       | Minor                                                                           |
+----------------+---------------------------------------------------------------------------------+
| Time To Fix    | Quick (30 mins)                                                                 |
+----------------+---------------------------------------------------------------------------------+
| Precision      | High                                                                            |
+----------------+---------------------------------------------------------------------------------+


.. _php-php74removedfunctions:

.. _php-7.4-removed-functions:

PHP 7.4 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were deprecated in PHP 7.4.

* `hebrevc() <https://www.php.net/hebrevc>`_
* `convert_cyr_string() <https://www.php.net/convert_cyr_string>`_
* `ezmlm_hash() <https://www.php.net/ezmlm_hash>`_
* `money_format() <https://www.php.net/money_format>`_
* `restore_include_path() <https://www.php.net/restore_include_path>`_
* `get_magic_quotes_gpc() <https://www.php.net/get_magic_quotes_gpc>`_
* `get_magic_quotes_runtime() <https://www.php.net/get_magic_quotes_runtime>`_

This analysis skips redefined PHP functions : when a replacement for a removed PHP function was created, with condition on the PHP version, then its usage is considered valid.

See also `PHP 7.4 Removed Functions <https://www.php.net/manual/en/migration74.incompatible.php#migration70.incompatible.removed-functions>`_ and `PHP 7.4 Deprecations : Introduction <https://wiki.php.net/rfc/deprecations_php_7_4#introduction>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74RemovedFunctions |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.9.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Critical                  |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | Very high                 |
+--------------+---------------------------+


.. _php-php74reservedkeyword:

.. _php-7.4-reserved-keyword:

PHP 7.4 Reserved Keyword
++++++++++++++++++++++++

 ``fn`` is a new PHP keyword. In PHP 7.4, it is used to build the arrow functions. When used at an illegal position, ``fn`` generates a Fatal error at compile time.

As a key word, ``fn`` is not allowed as constant name, function name, class name or inside namespaces. 

.. code-block:: php

   <?php
   
   // PHP 7.4 usage of fn
   function array_values_from_keys($arr, $keys) {
       return array_map(fn($x) => $arr[$x], $keys);
   }
   
   // PHP 7.3 usage of fn
   const fn = 1;
   
   function fn() {}
   
   class x {
       // This is valid in PHP 7.3 and 7.4
       function fn() {}
   }
   
   ?>


``fn`` is fine for method names. It may also be used for constants with `define() <https://www.php.net/define>`_, and `constant() <https://www.php.net/constant>`_ but it is not recommended.

See also `PHP RFC: Arrow Functions <https://wiki.php.net/rfc/arrow_functions>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74ReservedKeyword  |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.9.2                     |
+--------------+---------------------------+
| PHP Version  | 7.4-                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php74mbstrrpos3rdarg:

.. _mb\_strrpos()-third-argument:

mb_strrpos() Third Argument
+++++++++++++++++++++++++++

 Passing the encoding as 3rd parameter to `mb_strrpos() <https://www.php.net/mb_strrpos>`_ is deprecated. Instead pass a 0 offset, and encoding as 4th parameter.

.. code-block:: php

   <?php
   
   // Finds the position of the last occurrence of of a string in a string, starting at position 10
   $extract = mb_strrpos($haystack, $needle, 10, 'utf8');
   
   // This is the old behavior. Here, the offset will be 0, by default
   $extract = mb_strrpos($haystack, $needle, 'utf8');
   ?>


See also `mb_strrpos() <https://www.php.net/mb_strrpos>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php74mbstrrpos3rdArg  |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.8.9                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php7relaxedkeyword:

.. _php7-relaxed-keyword:

Php7 Relaxed Keyword
++++++++++++++++++++

 Most of the traditional PHP keywords may be used inside classes, trait or interfaces.

.. code-block:: php

   <?php
   
   // Compatible with PHP 7.0 + 
   class foo {
       // as is a PHP 5 keyword
       public function as() {
       
       }
   }
   
   ?>


This was not the case in PHP 5, and will yield parse errors.

See also `Loosening Reserved Word Restrictions <https://www.php.net/manual/en/migration70.other-changes.php#migration70.other-changes.loosening-reserved-words>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Php/Php7RelaxedKeyword |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | 7.0+                   |
+--------------+------------------------+
| Severity     | Major                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _php-php80namedparametervariadic:

.. _php-80-named-parameter-variadic:

PHP 80 Named Parameter Variadic
+++++++++++++++++++++++++++++++

 Named parameter with variadic have been renamed from 0 to 'parameter name' in PHP 8.0

.. code-block:: php

   <?php
   
   function foo($a, ...$b) {
       print_r($b);
   }
   
   foo(3, 4);
   foo(3, b: 4);              // PHP 8 only 
   foo(...[2, b=> [3, 4]]); // PHP 8 only 
   
   ?>


In PHP 7.0, with positional argument only, the content of $b is in an array, index 0. This is also true with PHP 8.0.

In PHP 8.0, with named arguments, the content of $b is in an array, index 'b';

Since the behavior of the variadic depends on the calling syntax (with or without named parameter), the receiving must ensure the correct reception, and handle both cases.


Suggestions
^^^^^^^^^^^

* Apply array_values() to the variadic arguments.

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Php/Php80NamedParameterVariadic |
+--------------+---------------------------------+
| Rulesets     | :ref:`CompatibilityPHP80`       |
+--------------+---------------------------------+
| Exakat since | 2.2.0                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | Medium                          |
+--------------+---------------------------------+


.. _php-php80newfunctions:

.. _new-functions-in-php-8.0:

New Functions In PHP 8.0
++++++++++++++++++++++++

 New functions are added to new PHP version.

The following functions are now native functions in PHP 7.3. It is compulsory to rename any custom function that was created in older versions. One alternative is to move the function to a custom namespace, and update the ``use`` list at the beginning of the script. 

* `str_contains <https://www.php.net/str_contains>`_
* `fdiv <https://www.php.net/fdiv>`_
* `preg_last_error_msg <https://www.php.net/preg_last_error_msg>`_

Note : At the moment of writing, all links to the manual are not working.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php80NewFunctions     |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 2.0.8                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php80onlytypehints:

.. _php-8.0-only-typehints:

Php 8.0 Only TypeHints
++++++++++++++++++++++

 Two scalar typehints are introduced in version 8. They are ``false`` and ``null``. In PHP 7.0, both those values could not be used as a class or interface name, to avoid confusion with the actual booleans, nor ``null`` value.

``false`` represents a false boolean, and nothing else. It is more restrictive than a boolean, which accepts true too. 
``null`` is an alternative syntax to ``?`` : it allows the type to be ``null``. 

Both the above typehints are to be used in cunjunction with other types : they can't be used alone.

.. code-block:: php

   <?php
   
   // function accepts an A object, or null. 
   function foo(A|null $x) {}
   
   // same as above
   function foo2(A|null $x) {}
   
   // returns an object of class B, or false
   function bar($x) : false|B {}
   
   ?>


See also `PHP RFC: Union Types 2.0 <https://wiki.php.net/rfc/union_types_v2>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Php/Php80OnlyTypeHints                    |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Appinfo`, :ref:`CompatibilityPHP74` |
+--------------+-------------------------------------------+
| Exakat since | 2.0.9                                     |
+--------------+-------------------------------------------+
| PHP Version  | All                                       |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | Very high                                 |
+--------------+-------------------------------------------+


.. _php-php80removedconstant:

.. _php-8.0-removed-constants:

PHP 8.0 Removed Constants
+++++++++++++++++++++++++

 The following PHP native constants were removed in PHP 8.0.

* `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_ (See `Deprecate and remove `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_ <https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003>`_)
* `MB_OVERLOAD_MAIL <https://www.php.net/MB_OVERLOAD_MAIL>`_
* `MB_OVERLOAD_STRING <https://www.php.net/MB_OVERLOAD_STRING>`_
* `MB_OVERLOAD_REGEX <https://www.php.net/MB_OVERLOAD_REGEX>`_



Suggestions
^^^^^^^^^^^

* Remove usage of those constants

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php80RemovedConstant  |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 1.6.8                     |
+--------------+---------------------------+
| PHP Version  | 8.0-                      |
+--------------+---------------------------+
| Severity     | Critical                  |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php80removeddirective:

.. _php-8.0-removed-directives:

PHP 8.0 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 8.0.

In PHP 8.0, `track_errors` was removed. 

You can detect valid directives with `ini_get() <https://www.php.net/ini_get>`_. This native function will return false, when the directive doesn't exist, while actual directive values will be returned as a string. 

See `Deprecation `track_errors <https://www.php.net/manual/en/errorfunc.configuration.php#ini.track-errors>`_ <https://www.php.net/manual/en/migration80.incompatible.php`_.



Suggestions
^^^^^^^^^^^

* Remove usage of `track_errors`.

Specs
^^^^^
+--------------+------------------------------------------------------+
| Short name   | Php/Php80RemovedDirective                            |
+--------------+------------------------------------------------------+
| Rulesets     | :ref:`CompatibilityPHP80`, :ref:`CompatibilityPHP81` |
+--------------+------------------------------------------------------+
| Exakat since | 2.1.9                                                |
+--------------+------------------------------------------------------+
| PHP Version  | All                                                  |
+--------------+------------------------------------------------------+
| Severity     | Minor                                                |
+--------------+------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                      |
+--------------+------------------------------------------------------+
| Precision    | High                                                 |
+--------------+------------------------------------------------------+


.. _php-php80removedfunctions:

.. _php-8.0-removed-functions:

PHP 8.0 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were removed in PHP 8.0.

* `image2wbmp() <https://www.php.net/image2wbmp>`_
* `png2wbmp() <https://www.php.net/png2wbmp>`_
* `jpeg2wbmp() <https://www.php.net/jpeg2wbmp>`_
* `ldap_sort() <https://www.php.net/ldap_sort>`_
* `hebrevc() <https://www.php.net/hebrevc>`_
* `convert_cyr_string() <https://www.php.net/convert_cyr_string>`_
* `ezmlm_hash() <https://www.php.net/ezmlm_hash>`_
* `money_format() <https://www.php.net/money_format>`_
* `get_magic_quotes_gpc() <https://www.php.net/get_magic_quotes_gpc>`_
* `get_magic_quotes_gpc_runtime() <https://www.php.net/get_magic_quotes_gpc_runtime>`_
* `create_function() <https://www.php.net/create_function>`_
* `each() <https://www.php.net/each>`_
* `read_exif_data() <https://www.php.net/read_exif_data>`_
* `gmp_random() <https://www.php.net/gmp_random>`_
* `fgetss() <https://www.php.net/fgetss>`_
* `restore_include_path() <https://www.php.net/restore_include_path>`_
* `gzgetss() <https://www.php.net/gzgetss>`_

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php80RemovedFunctions |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 1.6.8                     |
+--------------+---------------------------+
| PHP Version  | 8.0-                      |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-php80removesresources:

.. _php-resources-turned-into-objects:

PHP Resources Turned Into Objects
+++++++++++++++++++++++++++++++++

 Multiple PHP native functions now return objects, not resources. Any check on those values with `is_resource() <https://www.php.net/is_resource>`_ is now going to fail.

The affected functions are the following : 

+ `curl_init() <https://www.php.net/curl_init>`_
+ `curl_multi_init() <https://www.php.net/curl_multi_init>`_
+ `curl_share_init() <https://www.php.net/curl_share_init>`_
+ deflate_init()
+ `enchant_broker_init() <https://www.php.net/enchant_broker_init>`_
+ `enchant_broker_request_dict() <https://www.php.net/enchant_broker_request_dict>`_
+ `enchant_broker_request_pwl_dict() <https://www.php.net/enchant_broker_request_pwl_dict>`_
+ inflate_init()
+ `msg_get_queue() <https://www.php.net/msg_get_queue>`_
+ `openssl_csr_new() <https://www.php.net/openssl_csr_new>`_
+ `openssl_csr_sign() <https://www.php.net/openssl_csr_sign>`_
+ `openssl_pkey_new() <https://www.php.net/openssl_pkey_new>`_
+ `openssl_x509_read() <https://www.php.net/openssl_x509_read>`_
+ `sem_get() <https://www.php.net/sem_get>`_
+ `shm_attach() <https://www.php.net/shm_attach>`_
+ `shmop_open() <https://www.php.net/shmop_open>`_
+ `socket_accept() <https://www.php.net/socket_accept>`_
+ `socket_addrinfo_bind() <https://www.php.net/socket_addrinfo_bind>`_
+ `socket_addrinfo_connect() <https://www.php.net/socket_addrinfo_connect>`_
+ `socket_create_listen() <https://www.php.net/socket_create_listen>`_
+ `socket_create() <https://www.php.net/socket_create>`_
+ `socket_import_stream() <https://www.php.net/socket_import_stream>`_
+ `socket_wsaprotocol_info_import() <https://www.php.net/socket_wsaprotocol_info_import>`_
+ `xml_parser_create_ns() <https://www.php.net/xml_parser_create_ns>`_
+ `xml_parser_create() <https://www.php.net/xml_parser_create>`_

See also `UPGRADING PHP 8.0 <https://github.com/php/php-src/blob/master/UPGRADING>`_.

 

Suggestions
^^^^^^^^^^^

* Change the condition from is_resource() to instanceof

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/Php80RemovesResources |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 2.2.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | Medium                    |
+--------------+---------------------------+


.. _php-php80uniontypehint:

.. _union-typehint:

Union Typehint
++++++++++++++

 Union typehints allows the specification of several typehint for the same argument or return value. This is a PHP 8.0 new feature.

Several typehints are specified at the same place as a single one. The different values are separated by a pipe character ``|``, like for exceptions 

.. code-block:: php

   <?php
   
   // Example from the RFC https://wiki.php.net/rfc/union_types_v2
   class Number {
       private int|float $number;
    
       public function setNumber(int|float $number): void {
           $this->number = $number;
       }
    
       public function getNumber(): int|float {
           return $this->number;
       }
   }
   ?>


Union types are not compatible with PHP 7 and older.

See also `PHP RFC: Union Types 2.0 <https://wiki.php.net/rfc/union_types_v2>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Php/Php80UnionTypehint                    |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Appinfo`, :ref:`CompatibilityPHP74` |
+--------------+-------------------------------------------+
| Exakat since | 2.0.9                                     |
+--------------+-------------------------------------------+
| PHP Version  | 8.0+                                      |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | High                                      |
+--------------+-------------------------------------------+


.. _php-php80variablesyntax:

.. _php-8.0-variable-syntax-tweaks:

Php 8.0 Variable Syntax Tweaks
++++++++++++++++++++++++++++++

 Several variable syntaxes are added in version 8.0. They extends the PHP 7.0 syntax updates, and fix a number of edges cases.

In particular, ``new``and ``instanceof`` now support a way to inline the expression, rather than use a temporary variable.

Magic constants are now accessible with array notation, just like another constant. It is also possible to use method calls : although this is Syntacticly correct for PHP, this won't be executed, as the left operand is a string, and not an object.

.. code-block:: php

   <?php
   
    // array name is dynamically build
    echo foo$bar[0];
    // static method
    foo$bar::baz();
    // static property 
    foo$bar::$baz;
    
    // Syntactly correct, but not executable
    foo$bar->baz();
    
    // expressions with instanceof and new
       $object = new (class_.$name);
       $x instanceof (class_$name);
   
       // PHP 7.0 style
       $className = class_.$name;
       $object = new $className;
   
   ?>


See also `PHP RFC: Variable Syntax Tweaks <https://wiki.php.net/rfc/variable_syntax_tweaks>`_ and `scalar_objects in PHP <https://github.com/nikic/scalar_objects>`_.

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Php/Php80VariableSyntax                   |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Appinfo`, :ref:`CompatibilityPHP74` |
+--------------+-------------------------------------------+
| Exakat since | 2.0.8                                     |
+--------------+-------------------------------------------+
| PHP Version  | 8.0+                                      |
+--------------+-------------------------------------------+
| Severity     | Major                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | High                                      |
+--------------+-------------------------------------------+


.. _php-phperrormsgusage:

.. _$php\_errormsg-usage:

$php_errormsg Usage
+++++++++++++++++++

 $php_errormsg is removed since PHP 8.0. $php_errormsg tracks the last error message, with the directive `track_errors`. All was removed in PHP 8.0, and shall be replaced with `error_get_last() <https://www.php.net/error_get_last>`_.

.. code-block:: php

   <?php
   
   function foo() {
       global $php_errormsg;
       
       echo 'Last error: '.$php_errormsg;
       
       echo 'Also, last error: '.error_get_last();
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Use error_get_last() instead.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/PhpErrorMsgUsage      |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP80` |
+--------------+---------------------------+
| Exakat since | 2.1.8                     |
+--------------+---------------------------+
| PHP Version  | 8.0-                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-rawpostdatausage:

.. _$http\_raw\_post\_data-usage:

$HTTP_RAW_POST_DATA Usage
+++++++++++++++++++++++++

 ``$HTTP_RAW_POST_DATA`` is deprecated, and should be replaced by ``php://input``. 

``$HTTP_RAW_POST_DATA`` is deprecated since PHP 5.6.

It is possible to prepare code to this lack of feature by setting ``always_populate_raw_post_data`` to -1.

.. code-block:: php

   <?php
   
   // PHP 5.5 and older
   $postdata = $HTTP_RAW_POST_DATA;
   
   // PHP 5.6 and more recent
   $postdata = file_get_contents(php://input);
   
   ?>


See also `$HTTP_RAW_POST_DATA variable <https://www.php.net/manual/en/reserved.variables.httprawpostdata.php>`_.



Suggestions
^^^^^^^^^^^

* Use php://input with fopen() instead.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Php/RawPostDataUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _php-reflectionexportisdeprecated:

.. _reflection-export()-is-deprecated:

Reflection Export() Is Deprecated
+++++++++++++++++++++++++++++++++

 export() method in Reflection classes is now deprecated. It is obsolete since PHP 7.4 and will disappear in PHP 8.0.

The Reflector interface, which is implemented by all reflection classes, specifies two methods: `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and export(). 

.. code-block:: php

   <?php
   
   ReflectionFunction::export('foo');
   // same as
   echo new ReflectionFunction('foo'), \n;
    
   $str = ReflectionFunction::export('foo', true);
   // same as
   $str = (string) new ReflectionFunction('foo');
   
   ?>


See also `Reflection export() methods <https://wiki.php.net/rfc/deprecations_php_7_4#reflection_export_methods>`_ and `Reflection <https://www.php.net/manual/en/book.reflection.php>`_.



Suggestions
^^^^^^^^^^^

* Cast the object to string
* Remove the call to export()

Specs
^^^^^
+--------------+----------------------------------+
| Short name   | Php/ReflectionExportIsDeprecated |
+--------------+----------------------------------+
| Rulesets     | :ref:`CompatibilityPHP74`        |
+--------------+----------------------------------+
| Exakat since | 1.9.0                            |
+--------------+----------------------------------+
| PHP Version  | All                              |
+--------------+----------------------------------+
| Severity     | Minor                            |
+--------------+----------------------------------+
| Time To Fix  | Quick (30 mins)                  |
+--------------+----------------------------------+
| Precision    | High                             |
+--------------+----------------------------------+


.. _php-returntypehintusage:

.. _return-typehint-usage:

Return Typehint Usage
+++++++++++++++++++++

 Spot usage of return typehint. It is a PHP 7.0 feature.

Return typehint were introduced in PHP 7.0, and are backward incompatible with PHP 5.x.

.. code-block:: php

   <?php
   
   function foo($a) : stdClass {
       return new \stdClass();
   }
   
   ?>


See also `RFC: Return Type Declarations <https://wiki.php.net/rfc/return_types>`_ and `Return Type Declarations <https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Php/ReturnTypehintUsage |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | 7.0+                    |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _php-scalararenotarrays:

.. _scalar-are-not-arrays:

Scalar Are Not Arrays
+++++++++++++++++++++

 It is wrong to use a scalar as an array, a Warning is emitted. PHP 7.4 emits a Warning in such situations.

.. code-block:: php

   <?php
   
   // Here, $x may be null, and in that case, the echo will fail.
   function foo(?A $x) { 
       echo $x[2]; 
   }
   
   ?>


Typehinted argument with a scalar are reported by this analysis. Also, nullable arguments, both with typehint and return type hint.

See also `E_WARNING for invalid container read array-access <https://wiki.php.net/rfc/notice-for-non-valid-array-container>`_.


Suggestions
^^^^^^^^^^^

* Update type hints to avoid scalar values
* Remove the array syntax in the code using the results
* Cast to string type, so the array notation is accessible

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Php/ScalarAreNotArrays                    |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP74` |
+--------------+-------------------------------------------+
| Exakat since | 1.9.0                                     |
+--------------+-------------------------------------------+
| PHP Version  | All                                       |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | High                                      |
+--------------+-------------------------------------------+


.. _php-scalartypehintusage:

.. _scalar-typehint-usage:

Scalar Typehint Usage
+++++++++++++++++++++

 Spot usage of scalar type hint : ``int``, ``float``, ``boolean`` and ``string``.

Scalar typehint are PHP 7.0 and more recent. Some, like ``object``, is 7.2.

Scalar typehint were not supported in PHP 5 and older. Then, the typehint is treated as a class name. 

.. code-block:: php

   <?php
   
   function withScalarTypehint(string $x) {}
   
   function withoutScalarTypehint(someClass $x) {}
   
   ?>


See also `PHP RFC: Scalar Type Hints <https://wiki.php.net/rfc/scalar_type_hints>`_ and `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Php/ScalarTypehintUsage |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | 7.0+                    |
+--------------+-------------------------+
| Severity     | Major                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _php-shouldusecoalesce:

.. _should-use-coalesce:

Should Use Coalesce
+++++++++++++++++++

 PHP 7 introduced the ``??`` operator, that replaces longer structures to set default values when a variable is not set.

.. code-block:: php

   <?php
   
   // Fetches the request parameter user and results in 'nobody' if it doesn't exist
   $username = $_GET['user'] ?? 'nobody';
   // equivalent to: $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';
    
   // Calls a hypothetical model-getting function, and uses the provided default if it fails
   $model = Model::get($id) ?? $default_model;
   // equivalent to: if (($model = Model::get($id)) === NULL) { $model = $default_model; }
   
   ?>


Sample extracted from PHP docs `Isset Ternary <https://wiki.php.net/rfc/isset_ternary>`_.

See also `New in PHP 7: null coalesce operator <https://lornajane.net/posts/2015/new-in-php-7-null-coalesce-operator>`_.


Suggestions
^^^^^^^^^^^

* Replace the long syntax with the short one

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------+
| Short name   | Php/ShouldUseCoalesce                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                             |
+--------------+--------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| PHP Version  | 7.0+                                                                                       |
+--------------+--------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                            |
+--------------+--------------------------------------------------------------------------------------------+
| Precision    | High                                                                                       |
+--------------+--------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-php-shouldusecoalesce`, :ref:`case-cleverstyle-php-shouldusecoalesce` |
+--------------+--------------------------------------------------------------------------------------------+


.. _php-signaturetrailingcomma:

.. _signature-trailing-comma:

Signature Trailing Comma
++++++++++++++++++++++++

 Trailing comma in method signature. This feature was added in PHP 8.0. 

Allowing the trailing comma makes it possible to reduce the size of VCS's diff, when adding , removing a parameter.

.. code-block:: php

   <?php
   
   // Example from the RFC
   class Uri {
       private function __construct(
           ?string $scheme,
           ?string $user,
           ?string $pass,
           ?string $host,
           ?int $port,
           string $path,
           ?string $query,
           ?string $fragment // <-- ARGH!
       ) {
           ...
       }
   }
   ?>


See also `PHP RFC: Allow trailing comma in parameter list <https://wiki.php.net/rfc/trailing_comma_in_parameter_list>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Php/SignatureTrailingComma |
+--------------+----------------------------+
| Rulesets     | :ref:`CompatibilityPHP74`  |
+--------------+----------------------------+
| Exakat since | 2.1.0                      |
+--------------+----------------------------+
| PHP Version  | 8.0+                       |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _php-spreadoperatorforarray:

.. _spread-operator-for-array:

Spread Operator For Array
+++++++++++++++++++++++++

 The variadic operator may be used with arrays. This has been introduced in PHP 7.4. 

`list() <https://www.php.net/list>`_ is not allowed to use this operator, as `list() <https://www.php.net/list>`_ expected variables, not values.

.. code-block:: php

   <?php
   
   $array = [1, 2, 3];
   $extended_array = [...$array, 4, 5, 6];
   
   // invalid syntax
   [...$a] = [1,2,3];
   
   ?>


See also `Spread Operator in Array Expression <https://wiki.php.net/rfc/spread_operator_for_array>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Php/SpreadOperatorForArray |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 1.9.4                      |
+--------------+----------------------------+
| PHP Version  | 7.4+                       |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _php-strtrarguments:

.. _strtr-arguments:

Strtr Arguments
+++++++++++++++

 `Strtr() <https://www.php.net/strtr>`_ replaces characters by others in a string. When using strings, `strtr() <https://www.php.net/strtr>`_ replaces characters as long as they have a replacement. All others are ignored.

In particular, `strtr() <https://www.php.net/strtr>`_ works on strings of the same size, and cannot be used to remove chars.

.. code-block:: php

   <?php
   
   $string = 'abcde';
   echo strtr($string, 'abc', 'AB');
   echo strtr($string, 'ab', 'ABC');
   // displays ABcde 
   // c is ignored each time
   
   // strtr can't remove a char
   echo strtr($string, 'a', '');
   // displays a
   
   ?>


See also `strtr <http://www.php.net/strtr>`_.



Suggestions
^^^^^^^^^^^

* Check the call to strtr() and make sure the arguments are of the same size
* Replace strtr() with str_replace(), which works with strings and array, not chars
* Replace strtr() with preg_match(), which works with patterns and not chars

Specs
^^^^^
+--------------+-----------------------------------------+
| Short name   | Php/StrtrArguments                      |
+--------------+-----------------------------------------+
| Rulesets     | :ref:`Analyze`                          |
+--------------+-----------------------------------------+
| Exakat since | 1.2.3                                   |
+--------------+-----------------------------------------+
| PHP Version  | All                                     |
+--------------+-----------------------------------------+
| Severity     | Major                                   |
+--------------+-----------------------------------------+
| Time To Fix  | Instant (5 mins)                        |
+--------------+-----------------------------------------+
| Precision    | High                                    |
+--------------+-----------------------------------------+
| Examples     | :ref:`case-suitecrm-php-strtrarguments` |
+--------------+-----------------------------------------+


.. _php-superglobalusage:

.. _super-global-usage:

Super Global Usage
++++++++++++++++++

 Spot usage of Super global variables, such as `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_ or `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_.

.. code-block:: php

   <?php
   
   echo htmlspecialchars($_GET['name'], UTF-8);
   
   ?>


See also `Superglobals <https://www.php.net/manual/en/language.variables.superglobals.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Php/SuperGlobalUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _php-throwusage:

.. _throw:

Throw
+++++

 List of thrown exceptions.

.. code-block:: php

   <?php
   if ($divisor === 0) {
       // Throw native exception
       throw new DivisionByZeroError("Shouldn't divide by one");
   }
   
   if ($divisor === 1) {
       // Throw custom exception
       throw new DontDivideByOneException("Shouldn't divide by one");
   }
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/ThrowUsage |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-throwwasanexpression:

.. _throw-was-an-expression:

Throw Was An Expression
+++++++++++++++++++++++

 Throw used to be an expression. In PHP 7.0, there were some location where one couldn't use a throw : this was the case for arrow functions, which expect one expression as function's body. 

Using throw as an instruction makes the code incompatible with PHP 7 version and older. 

.. code-block:: php

   <?php
   
   // Valid in PHP 8.0 and more recent
   $fn = fn($a) => throw new Exception($a);
   
   ?>


See also `Throw Expression <https://wiki.php.net/rfc/throw_expression>`_ and `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/ThrowWasAnExpression  |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 2.1.1                     |
+--------------+---------------------------+
| PHP Version  | 8.0+                      |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _php-trailingcomma:

.. _trailing-comma-in-calls:

Trailing Comma In Calls
+++++++++++++++++++++++

 The last argument may be left empty. 

This feature was introduced in PHP 7.3. 

.. code-block:: php

   <?php
     
   // VCS friendly call
   // PHP 7.3 and more recent
   foo(1,
       2,
       3,
      );
   
   // backward compatible call
   // All PHP versions
   foo(1,
       2,
       3
      );
     
   ?>


See also `PHP RFC: Allow a trailing comma in function calls <https://wiki.php.net/rfc/trailing-comma-function-calls>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/TrailingComma |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.4.0             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-triggererrorusage:

.. _trigger-errors:

Trigger Errors
++++++++++++++

 List of situations where user errors are triggered.

PHP errors are triggered with `trigger_error() <https://www.php.net/trigger_error>`_.

.. code-block:: php

   <?php
   if ($divisor == 0) {
       trigger_error('Cannot divide by zero', E_USER_ERROR);
   }
   ?>


See also `trigger_error <https://www.php.net/trigger_error>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Php/TriggerErrorUsage |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _php-trycatchusage:

.. _caught-expressions:

Caught Expressions
++++++++++++++++++

 List of caught exceptions.

.. code-block:: php

   <?php
   
   // This analyzer reports MyException and Exception
   try {
       doSomething();
   } catch (MyException $e) {
       fixIt();
   } catch (\Exception $e) {
       fixIt();
   }
   
   ?>

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/TryCatchUsage |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-trymultiplecatch:

.. _try-with-multiple-catch:

Try With Multiple Catch
+++++++++++++++++++++++

 Try may be used with multiple catch clauses. 

.. code-block:: php

   <?php
   
   try { 
       OneCatch(); 
   } catch (FirstException $e) {
   
   }
   
   try { 
       TwoCatches(); 
   } catch (FirstException $e) {
   } catch (SecondException $e) {
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Php/TryMultipleCatch |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.11.3               |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _php-typedpropertyusage:

.. _typed-property-usage:

Typed Property Usage
++++++++++++++++++++

 PHP properties may be typed. Since PHP 7.4, it is possible to type properties, just like arguments and return values.

.. code-block:: php

   <?php
   
   class User {
       public int $id;
       public string $name;
    
       public function __construct(int $id, string $name) {
           $this->id = $id;
           $this->name = $name;
       }
   }
   ?>


See also `Typed Properties 2.0 <https://wiki.php.net/rfc/typed_properties_v2>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Php/TypedPropertyUsage |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 1.6.2                  |
+--------------+------------------------+
| PHP Version  | 7.4+                   |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _php-useattributes:

.. _use-php-attributes:

Use PHP Attributes
++++++++++++++++++

 PHP 8.0 attributes. WIP.

.. code-block:: php

   <?php
   
   @@foo(4)
   class x {
   
   }
   
   ?>


See also `PHP RFC: Shorter Attribute Syntax <https://wiki.php.net/rfc/shorter_attribute_syntax>`_, `Attributes Amendements <https://wiki.php.net/rfc/attribute_amendments>`_ and `Shorter Attribute Syntax Change <https://wiki.php.net/rfc/shorter_attribute_syntax_change>`_.
         .

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/UseAttributes |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 2.1.6             |
+--------------+-------------------+
| PHP Version  | 8.0+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-usebrowscap:

.. _use-browscap:

Use Browscap
++++++++++++

 Browscap is a browser database, accessible via `get_browser() <https://www.php.net/get_browser>`_. 

Browscap is the 'Browser Capabilities Project'.

.. code-block:: php

   <?php
   echo $_SERVER['HTTP_USER_AGENT'] . \n\n;
   
   $browser = get_browser(null, true);
   print_r($browser);
   ?>


See also `browscap <http://browscap.org/>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Php/UseBrowscap |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.11.4          |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _php-usecli:

.. _use-cli:

Use Cli
+++++++

 Signal the usage of code in CLI mode, through the usage of `$argv` and `$argc` variables.

.. code-block:: php

   <?php
   
   // Characteristics of CLI usage 
   getopt(abcd);
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/UseCli     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-usecontravariance:

.. _use-contravariance:

Use Contravariance
++++++++++++++++++

 Contravariance is compatible argument typehint. A child class may accept an object of a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class of the argument type of its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'s method.

Since a children class may accept a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class of the argynebt type, the evolution is in opposite order. 

Contravariance is a PHP 7.4 feature. Contravariance is distinct from return type covariance.

.. code-block:: php

   <?php
   class X {
     function m(Y $z): X {}
   }
   
   // m is overwriting the parent's method. 
   // The return type is different.
   // The return type is compatible, as Y is also a sub-class of X.
   class Y extends X {
     function m(X $z): Y {}
   }
   
   ?>


See also `Covariant Returns and Contravariant Parameters <https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters>`_ and 
         `Php/UseCovariance`.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Php/UseContravariance |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 1.9.3                 |
+--------------+-----------------------+
| PHP Version  | 7.4+                  |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _php-usecookies:

.. _use-cookies:

Use Cookies
+++++++++++

 This code source uses cookies. 

Cookie usage is spotted with the usage of `setcookie() <https://www.php.net/setcookie>`_, setawcookie() and `header() <https://www.php.net/header>`_ with the 'Set-Cookie' header. 

.. code-block:: php

   <?php
   
        header('Set-Cookie: '.$name.'='.$value.'; EXPIRES'.$date.';');
   
       // From the PHP Manual : 
       setcookie('TestCookie3', $value, time()+3600, '/~rasmus/', 'example.com', 1);
   
   ?>


See also : `Cookies <https://www.php.net/manual/en/features.cookies.php>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/UseCookies |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.10.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-usecovariance:

.. _use-covariance:

Use Covariance
++++++++++++++

 Covariance is compatible return typehint. A child class may return an object of a child class of the return type of its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'s method.

Since a children class may return a children class of the return type, the evolution is in the same order.

Covariance is a PHP 7.4 feature. Covariance is distinct from argument contravariance.

.. code-block:: php

   <?php
   class X {
     function m(Y $z): X {}
   }
   
   // m is overwriting the parent's method. 
   // The return type is different.
   // The return type is compatible, as Y is also a sub-class of X.
   class Y extends X {
     function m(X $z): Y {}
   }
   
   ?>


See also `Covariant Returns and Contravariant Parameters <https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters>`_ and 
         `Php/UseContravariance`.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+-------------------+
| Short name   | Php/UseCovariance |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.9.3             |
+--------------+-------------------+
| PHP Version  | 7.4+              |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Quick (30 mins)   |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _php-usematch:

.. _uses-php-8-match():

Uses PHP 8 Match()
++++++++++++++++++

 Use the `match() <https://www.php.net/manual/en/control-structures.match.php>`_ syntax. 

.. code-block:: php

   <?php
   
   
   $A = match($a) {
       'a' => 'A',
       'b' => 'B',
       default => 'd',
   };
   
   ?>


See also `match <https://www.php.net/manual/en/control-structures.match.php>`_ `Match expression <https://php.watch/versions/8.0/match-expression>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Php/UseMatch              |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 2.1.4                     |
+--------------+---------------------------+
| PHP Version  | 8.0+                      |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | Very high                 |
+--------------+---------------------------+


.. _php-usenullsafeoperator:

.. _use-nullsafe-operator:

Use NullSafe Operator
+++++++++++++++++++++

 The nullsafe operator ``?->`` is an alternative to the object operator ``->``. It silently fails the whole expression if a null is used for object. 

.. code-block:: php

   <?php
   
   $o = null;
   
   // PHP 8.0 Failsafe : $r = null;
   $r = $o->method();
   
   // PHP 7.4- : Call to a member function method() on null
   $r = $o->method();
   
   ?>


See also `PHP RFC: Nullsafe operator <https://wiki.php.net/rfc/nullsafe_operator>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Php/UseNullSafeOperator |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 2.1.6                   |
+--------------+-------------------------+
| PHP Version  | 8.0+                    |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _php-usenullabletype:

.. _use-nullable-type:

Use Nullable Type
+++++++++++++++++

 The code uses nullable type, available since PHP 7.1.

Nullable Types are an option to type hint : they allow the passing value to be null, or another type. 

According to the authors of the feature : 'It is common in many programming languages including PHP to allow a variable to be of some type or null. This null often indicates an error or lack of something to return.'

.. code-block:: php

   <?php
   
   function foo(?string $a = 'abc') : ?string {
       return $a.b;
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_ and `PHP RFC: Nullable Types <https://wiki.php.net/rfc/nullable_types>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Php/UseNullableType |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.8.4               |
+--------------+---------------------+
| PHP Version  | 7.1+                |
+--------------+---------------------+
| Severity     | Major               |
+--------------+---------------------+
| Time To Fix  | Quick (30 mins)     |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _php-useobjectapi:

.. _use-php-object-api:

Use PHP Object API
++++++++++++++++++

 OOP API is the modern version of the PHP API.

When PHP offers the alternative between procedural and OOP api for the same features, it is recommended to use the OOP API. 

Often, this least to more compact code, as methods are shorter, and there is no need to bring the resource around. Lots of new extensions are directly written in OOP form too.

OOP / procedural alternatives are available for `mysqli <https://www.php.net/manual/en/book.`mysqli <https://www.php.net/mysqli>`_.php>`_, `tidy <https://www.php.net/manual/en/book.`tidy <https://www.php.net/tidy>`_.php>`_, `cairo <https://www.php.net/manual/en/book.cairo.php>`_, `finfo <https://www.php.net/manual/en/book.fileinfo.php>`_, and some others.

.. code-block:: php

   <?php
   /// OOP version
   $mysqli = new mysqli(localhost, my_user, my_password, world);
   
   /* check connection */
   if ($mysqli->connect_errno) {
       printf(Connect failed: %s\n, $mysqli->connect_error);
       exit();
   }
   
   /* Create table doesn't return a resultset */
   if ($mysqli->query(CREATE TEMPORARY TABLE myCity LIKE City) === TRUE) {
       printf(Table myCity successfully created.\n);
   }
   
   /* Select queries return a resultset */
   if ($result = $mysqli->query(SELECT Name FROM City LIMIT 10)) {
       printf(Select returned %d rows.\n, $result->num_rows);
   
       /* free result set */
       $result->close();
   }
   ?>


.. code-block:: php

   <?php
   /// Procedural version
   $link = mysqli_connect(localhost, my_user, my_password, world);
   
   /* check connection */
   if (mysqli_connect_errno()) {
       printf(Connect failed: %s\n, mysqli_connect_error());
       exit();
   }
   
   /* Create table doesn't return a resultset */
   if (mysqli_query($link, CREATE TEMPORARY TABLE myCity LIKE City) === TRUE) {
       printf(Table myCity successfully created.\n);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the object API

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------+
| Short name   | Php/UseObjectApi                                                                            |
+--------------+---------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                              |
+--------------+---------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                         |
+--------------+---------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                               |
+--------------+---------------------------------------------------------------------------------------------+
| Precision    | High                                                                                        |
+--------------+---------------------------------------------------------------------------------------------+
| ClearPHP     | `use-object-api <https://github.com/dseguy/clearPHP/tree/master/rules/use-object-api.md>`__ |
+--------------+---------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-wordpress-php-useobjectapi`, :ref:`case-prestashop-php-useobjectapi`             |
+--------------+---------------------------------------------------------------------------------------------+


.. _php-usepathinfo:

.. _use-pathinfo:

Use Pathinfo
++++++++++++

 Use `pathinfo() <https://www.php.net/pathinfo>`_ function instead of string manipulations.

`pathinfo() <https://www.php.net/pathinfo>`_ is more efficient and readable and string functions.

.. code-block:: php

   <?php
   
   $filename = '/path/to/file.php';
   
   // With pathinfo();
   $details = pathinfo($filename);
   print $details['extension'];  // also capture php
   
   // With string functions (other solutions possible)
   $ext = substr($filename, - strpos(strreverse($filename), '.')); // Capture php
   
   ?>


When the path contains UTF-8 characters, `pathinfo() <https://www.php.net/pathinfo>`_ may strip them. There, string functions are necessary.


Suggestions
^^^^^^^^^^^

* Use pathinfo() and its second argument

Specs
^^^^^
+--------------+--------------------------------------+
| Short name   | Php/UsePathinfo                      |
+--------------+--------------------------------------+
| Rulesets     | :ref:`Analyze`                       |
+--------------+--------------------------------------+
| Exakat since | 0.8.4                                |
+--------------+--------------------------------------+
| PHP Version  | All                                  |
+--------------+--------------------------------------+
| Severity     | Minor                                |
+--------------+--------------------------------------+
| Time To Fix  | Quick (30 mins)                      |
+--------------+--------------------------------------+
| Precision    | High                                 |
+--------------+--------------------------------------+
| Examples     | :ref:`case-suitecrm-php-usepathinfo` |
+--------------+--------------------------------------+


.. _php-usetrailingusecomma:

.. _use-closure-trailing-comma:

Use Closure Trailing Comma
++++++++++++++++++++++++++

 Use a trailing comma in the closure's use list. This feature was added in PHP 8.0.

.. code-block:: php

   <?php
   
   // PHP 8.0 valid syntax
   $f = function foo() use ($a, ) { };
   
   // always valid syntax for closure
   $f = function foo() use ($a ) { };
   
   ?>


See also `Trailing Comma In `Closure <https://www.php.net/manual/en/class.closure.php>`_ Use List <https://wiki.php.net/rfc/trailing_comma_in_closure_use_list>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Php/UseTrailingUseComma |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 2.1.6                   |
+--------------+-------------------------+
| PHP Version  | 8.0+                    |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _php-useweb:

.. _use-web:

Use Web
+++++++

 The code is used in web environment.

The web usage is identified through the usage of the superglobals. 

.. code-block:: php

   <?php
   
   // Accessing $_GET is possible when PHP is used in a web server.
   $x = filter_validate($_GET['x'], FILTER_EMAIL);
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/UseWeb     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-usesenv:

.. _uses-environment:

Uses Environment
++++++++++++++++

 Spot usage of `$_ENV <https://www.php.net/manual/en/reserved.variables.env.php>`_ and `getenv() <https://www.php.net/getenv>`_ `putenv() <https://www.php.net/putenv>`_ functions that will fetch data from the environment.

.. code-block:: php

   <?php
   
   // Take some configuration from the environment
   $secret_key = getenv('secret_key');
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/UsesEnv    |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _php-wrongtypefornativefunction:

.. _wrong-type-for-native-php-function:

Wrong Type For Native PHP Function
++++++++++++++++++++++++++++++++++

 This analysis reports calls to a PHP native function with a wrongly typed value.

.. code-block:: php

   <?php
   
   // valid calls
   echo exp(1);
   echo exp(2.5);
   
   // invalid calls
   echo exp(1);
   echo exp(array(2.5));
   
   // valid call, but invalid math
   // -1 is not a valid value for log(), but -1 is a valid type (int) : it is not reported by this analysis.
   echo log(-1);
   ?>




Suggestions
^^^^^^^^^^^

* Set the code to the valid type, when calling a PHP native function

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Php/WrongTypeForNativeFunction |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 2.1.5                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _php-yieldfromusage:

.. _yield-from-usage:

Yield From Usage
++++++++++++++++

 Usage of generator delegation, with ``yield from`` keyword.

In PHP 7, generator delegation allows you to yield values from another ``Generator``, ``Traversable`` object, or array by using the ``yield from``. 

``Yield from`` was introduced in PHP 7.1, and is backward incompatible.

.. code-block:: php

   <?php
   
   // Yield delegation
   function foo() {
       yield from bar();
   }
   
   function bar() {
       yield 1;
   }
   
   ?>


See also `Generator Syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_ and `Understanding PHP Generators <https://scotch.io/tutorials/understanding-php-generators>`_.

Specs
^^^^^
+--------------+--------------------+
| Short name   | Php/YieldFromUsage |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 0.8.4              |
+--------------+--------------------+
| PHP Version  | 7.0+               |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _php-yieldusage:

.. _yield-usage:

Yield Usage
+++++++++++

 Usage of generators, with yield keyword.

Yield was introduced in PHP 5.5, and is backward incompatible.

.. code-block:: php

   <?php
   
   function prime() {
       $primes = [2, 3, 5, 7, 11, 13, 17, 19];
       foreach($primes as $prime) {
           yield $prime;
       }
   }
   
   ?>


See also `Generator Syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_, `Deal with Memory Gently using Yield in PHP <https://medium.com/tech-tajawal/use-memory-gently-with-yield-in-php-7e62e2480b8d>`_ and `Understanding PHP Generators <https://scotch.io/tutorials/understanding-php-generators>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Php/YieldUsage |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | 5.5+           |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr11usage:

.. _psr-11-usage:

PSR-11 Usage
++++++++++++

 PSR-11 describes a common interface for dependency injection containers.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyContainerInterface implements the PSR-7 ServerRequestInterface.
   // MyContainerInterface is more of a black hole than a real Container.
   class MyContainerInterface implements \Psr\Container\ContainerInterface {
       public function get($id) {}
       public function has($id) {}
   }
   
   ?>


See also `PSR-11 : Dependency injection container <https://github.com/container-interop/fig-standards/blob/master/proposed/container.md>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr11Usage |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.5         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr13usage:

.. _psr-13-usage:

PSR-13 Usage
++++++++++++

 PSR-13 describes a common interface for dependency injection containers.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyLink implements the PSR-13 LinkInterface.
   // MyLink is more of a black hole than a real Container.
   class MyLink implements LinkInterface {
       public function getHref() {}
       public function isTemplated() {}
       public function getRels() {}
       public function getAttributes() {}
   }
   
   ?>


See also `PSR-13 : Link definition interface <http://www.php-fig.org/psr/psr-13/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr13Usage |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr16usage:

.. _psr-16-usage:

PSR-16 Usage
++++++++++++

 PSR-16 describes a simple yet extensible interface for a cache item and a cache driver. It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace My\SimpleCache;
   
   // MyCache implements the PSR-16 Simple cache.
   // MyCache is more of a black hole than a real cache.
   class MyCache implements Psr\SimpleCache\CacheInterface {
       public function get($key, $default = null) {}
       public function set($key, $value, $ttl = null) {}
       public function delete($key) {}
       public function clear() {}
       public function getMultiple($keys, $default = null) {}
       public function setMultiple($values, $ttl = null) {}
       public function deleteMultiple($keys) {}
       public function has($key) {}
   }
   
   ?>


See also `PSR-16 : Common Interface for Caching Libraries <http://www.php-fig.org/psr/psr-16/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr16Usage |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr3usage:

.. _psr-3-usage:

PSR-3 Usage
+++++++++++

 PSR-3 describes a common interface for logging libraries.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyLog implements the PSR-3 LoggerInterface.
   // MyLog is more of a black hole than a real Log.
   namespace ;
   
   class MyLog implements \Psr\Log\LoggerInterface {
       public function emergency($message, array $context = array()) {}
       public function alert($message, array $context = array()) {}
       public function critical($message, array $context = array()) {}
       public function error($message, array $context = array()) {}
       public function warning($message, array $context = array()) {}
       public function notice($message, array $context = array()) {}
       public function info($message, array $context = array()) {}
       public function debug($message, array $context = array()) {}
       public function log($level, $message, array $context = array()) {}
   }
   
   ?>


See also `PSR-3 : Logger Interface <http://www.php-fig.org/psr/psr-3/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr3Usage  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr6usage:

.. _psr-6-usage:

PSR-6 Usage
+++++++++++

 PSR-6 is the cache standard for PHP.

The goal of PSR-6 is to allow developers to create cache-aware libraries that can be integrated into existing frameworks and systems without the need for custom development.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyCacheItem implements the PSR-7 CacheItemInterface.
   // This MyCacheItem is more of a black hole than a real CacheItem.
   class MyCacheItem implements \Psr\Cache\CacheItemInterface {
       public function getKey() {}
       public function get() {}
       public function isHit() {}
       public function set($value) {}
       public function expiresAt($expiration) {}
       public function expiresAfter($time) {}
   }
   
   ?>


See also `PSR-6 : Caching <http://www.php-fig.org/psr/psr-6/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr6Usage  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _psr-psr7usage:

.. _psr-7-usage:

PSR-7 Usage
+++++++++++

 PSR-7 describes common interfaces for representing HTTP messages as described in `RFC 7230 <https://tools.ietf.org/html/rfc7230>`_ and `RFC 7231 <https://tools.ietf.org/html/rfc7231>`_, and URIs for use with HTTP messages as described in `RFC 3986 <https://tools.ietf.org/html/rfc3986>`_. 

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyServerRequest implements the PSR-7 ServerRequestInterface.
   // MyServerRequest is more of a black hole than a real Server.
   class MyServerRequest extends  \Psr\Http\Message\ServerRequestInterface  {
       public function getServerParams() {}
       public function getCookieParams() {}
       public function withCookieParams(array $cookies) {}
       public function getQueryParams() {}
       public function withQueryParams(array $query) {}
       public function getUploadedFiles() {}
       public function withUploadedFiles(array $uploadedFiles) {}
       public function getParsedBody() {}
       public function withParsedBody($data) {}
       public function getAttributes() {}
       public function getAttribute($name, $default = null) {}
       public function withAttribute($name, $value) {}
       public function withoutAttribute($name) {}
   }
   
   ?>


See also `PSR-7 : HTTP message interfaces <http://www.php-fig.org/psr/psr-7/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Psr/Psr7Usage  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.6         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _security-cantdisableclass:

.. _can't-disable-class:

Can't Disable Class
+++++++++++++++++++

 This is the list of potentially dangerous PHP class being used in the code, such as \Phar. 

.. code-block:: php

   <?php
   
   // This script uses ftp_connect(), therefore, this function shouldn't be disabled. 
   $phar = new Phar();
   
   ?>


This analysis is the base for suggesting values for the ``disable_classes`` directive.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Security/CantDisableClass |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _security-cantdisablefunction:

.. _can't-disable-function:

Can't Disable Function
++++++++++++++++++++++

 This is the list of potentially dangerous PHP functions being used in the code, such as `exec() <https://www.php.net/exec>`_ or fsockopen(). 

`eval() <https://www.php.net/eval>`_ is not reported here, as it is not a PHP function, but a language construct : it can't be disabled.

.. code-block:: php

   <?php
   
   // This script uses ftp_connect(), therefore, this function shouldn't be disabled. 
   $ftp = ftp_connect($host, 21);
   
   // This script doesn't use imap_open(), therefore, this function may be disabled. 
   
   ?>


This analysis is the base for suggesting values for the ``disable_functions`` directive.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Security/CantDisableFunction |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _security-dontechoerror:

.. _don't-echo-error:

Don't Echo Error
++++++++++++++++

 It is recommended to avoid displaying error messages directly to the browser.

PHP's uses the ``display_errors`` directive to control display of errors to the browser. This must be kept to ``off`` when in production.

.. code-block:: php

   <?php
   
   // Inside a 'or' test
   mysql_connect('localhost', $user, $pass) or die(mysql_error());
   
   // Inside a if test
   $result = pg_query( $db, $query );
   if( !$result )
   {
   	echo Erreur SQL: . pg_error();
   	exit;
   }
   
   // Changing PHP configuration
   ini_set('display_errors', 1);
   // This is also a security error : 'false' means actually true.
   ini_set('display_errors', 'false');
   
   ?>


Error messages should be logged, but not displayed. 

See also `Error reporting <https://php.earth/docs/security/intro#error-reporting>`_ and `List of php.ini directives <https://www.php.net/manual/en/ini.list.php>`_.



Suggestions
^^^^^^^^^^^

* Remove any echo, print, printf() call built with error messages from an exception, or external source.

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------+
| Short name   | Security/DontEchoError                                                                         |
+--------------+------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                 |
+--------------+------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.7                                                                                          |
+--------------+------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                            |
+--------------+------------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                       |
+--------------+------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                               |
+--------------+------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                           |
+--------------+------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-security-dontechoerror`, :ref:`case-phpdocumentor-security-dontechoerror` |
+--------------+------------------------------------------------------------------------------------------------+


.. _security-shouldusepreparedstatement:

.. _should-use-prepared-statement:

Should Use Prepared Statement
+++++++++++++++++++++++++++++

 Modern databases provides support for prepared statement : it separates the query from the processed data and raise significantly the security. 

Building queries with concatenations is not recommended, though not always avoidable. When possible, use prepared statements.

.. code-block:: php

   <?php
   /* Execute a prepared statement by passing an array of values */
   
   $sql = 'SELECT name, colour, calories
       FROM fruit
       WHERE calories < :calories AND colour = :colour';
   $sth = $conn->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
   $sth->execute(array(':calories' => 150, ':colour' => 'red'));
   $red = $sth->fetchAll();
   ?>


Same code, without preparation : 

.. code-block:: php

   <?php
   
       $sql = 'SELECT name, color, calories FROM fruit WHERE calories < '.$conn-quote(150).' AND colour = '.$conn->quotes('red').' ORDER BY name';
       $sth = $conn->query($sql) as $row);
   }
   ?>


See also `Prepared Statements <https://www.php.net/manual/en/`mysqli <https://www.php.net/mysqli>`_.quickstart.prepared-statements.php>`_,
         `PHP `MySQLi <https://www.php.net/mysqli>`_ Prepared Statements Tutorial to Prevent SQL Injection <https://websitebeaver.com/prepared-statements-in-php-`mysqli <https://www.php.net/mysqli>`_-to-prevent-sql-injection>`_,
         `The Best Way to Perform `MYSQLI <https://www.php.net/mysqli>`_ Prepared Statements in PHP <https://developer.hyvor.com/php/prepared-statements>`_.
         


Suggestions
^^^^^^^^^^^

* Use an ORM
* Use an Active Record library
* Change the query to hard code it and make it not injectable

+-------------+--------------------+------+----------------------------+
| Name        | Default            | Type | Description                |
+-------------+--------------------+------+----------------------------+
| queryMethod | query_methods.json | data | Methods that call a query. |
+-------------+--------------------+------+----------------------------+



Specs
^^^^^
+--------------+----------------------------------------------------------+
| Short name   | Security/ShouldUsePreparedStatement                      |
+--------------+----------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                           |
+--------------+----------------------------------------------------------+
| Exakat since | 0.8.4                                                    |
+--------------+----------------------------------------------------------+
| PHP Version  | All                                                      |
+--------------+----------------------------------------------------------+
| Severity     | Major                                                    |
+--------------+----------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                            |
+--------------+----------------------------------------------------------+
| Precision    | High                                                     |
+--------------+----------------------------------------------------------+
| Examples     | :ref:`case-dolibarr-security-shouldusepreparedstatement` |
+--------------+----------------------------------------------------------+


.. _structures-addzero:

.. _adding-zero:

Adding Zero
+++++++++++

 Adding 0 is useless, as 0 is the neutral element for addition. Besides, when one of the argument is an integer, PHP triggers a cast to integer. 

It is recommended to make the cast explicit with ``(int)``. 

.. code-block:: php

   <?php
   
   // Explicit cast
   $a = (int) foo();
   
   // Useless addition
   $a = foo() + 0;
   $a = 0 + foo();
   
   // Also works with minus
   $b = 0 - $c; // drop the 0, but keep the minus
   $b = $c - 0; // drop the 0 and the minus
   
   $a += 0;
   $a -= 0;
   
   ?>


Adding zero is also reported when the zero is a defined constants. 

If it is used to type cast a value to integer, then casting with ``(int)`` is clearer. 



Suggestions
^^^^^^^^^^^

* Remove the +/- 0, may be the whole assignation
* Use an explicit type casting operator (int)

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Structures/AddZero                                                                            |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                              |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| ClearPHP     | `no-useless-math <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-math.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-thelia-structures-addzero`, :ref:`case-openemr-structures-addzero`                 |
+--------------+-----------------------------------------------------------------------------------------------+


.. _structures-alteringforeachwithoutreference:

.. _altering-foreach-without-reference:

Altering Foreach Without Reference
++++++++++++++++++++++++++++++++++

 `Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loop that should use a reference. 

When using a foreach loop that modifies the original source, it is recommended to use referenced variables, rather than access the original value with $source[$index]. 

Using references is then must faster, and easier to read. 

.. code-block:: php

   <?php
   
   // Using references in foreach
   foreach($source as $key => &$value) {
       $value = newValue($value, $key);
   }
   
   // Avoid foreach : use array_map
   $source = array_walk($source, 'newValue');
       // Here, $key MUST be the second argument or newValue
   
   // Slow version to update the array
   foreach($source as $key => &$value) {
       $source[$key] = newValue($value, $key);
   }
   ?>


You may also use `array_walk() <https://www.php.net/array_walk>`_ or `array_map() <https://www.php.net/array_map>`_ (when $key is not used) to avoid the use of foreach.

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.

Suggestions
^^^^^^^^^^^

* Add the reference on the modified blind variable, and avoid accessing the source array

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/AlteringForeachWithoutReference                                                                                        |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                                    |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                                             |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                                             |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                                   |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                                              |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `use-reference-to-alter-in-foreach <https://github.com/dseguy/clearPHP/tree/master/rules/use-reference-to-alter-in-foreach.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-contao-structures-alteringforeachwithoutreference`, :ref:`case-wordpress-structures-alteringforeachwithoutreference`   |
+--------------+-----------------------------------------------------------------------------------------------------------------------------------+


.. _structures-arraymappassesbyvalue:

.. _array\_map()-passes-by-value:

Array_Map() Passes By Value
+++++++++++++++++++++++++++

 `array_map() <https://www.php.net/array_map>`_ requires the callback to receive elements by value. Unlink `array_walk() <https://www.php.net/array_walk>`_, which accepts by value or by reference, depending on the action taken.

PHP 8.0 and more recent emits a Warning

.. code-block:: php

   <?php
   // Example, courtery of Juliette Reinders Folmer
   function trimNewlines(&$line, $key) {
       $line = str_replace(array(\n, \r), '', $line);
   }
   
   $original = [
       text\n\n,
       text\n\r
   ];
   
   $array = $original;
   array_walk($array, 'trimNewlines');
   
   var_dump($array);
   
   array_map('trimNewlines', $original, [0, 1]);
   
   ?>


See also `array_map <https://www.php.net/array_map>`_.

Suggestions
^^^^^^^^^^^

* Make the callback first argument a reference

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Structures/ArrayMapPassesByValue          |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP80` |
+--------------+-------------------------------------------+
| Exakat since | 2.2.0                                     |
+--------------+-------------------------------------------+
| PHP Version  | 7.4-                                      |
+--------------+-------------------------------------------+
| Severity     | Major                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | Medium                                    |
+--------------+-------------------------------------------+


.. _structures-assigneandcompare:

.. _assign-and-compare:

Assign And Compare
++++++++++++++++++

 Assignation has a lower precedence than comparison. As such, the assignation always happens after the comparison. This leads to the comparison being stored in the variable, and not the value being compared.

.. code-block:: php

   <?php
   
   if ($id = strpos($string, $needle) !== false) { 
       // $id now contains a boolean (true or false), but not the position of the $needle.
   }
   
   // probably valid comparison, as $found will end up being a boolean
   if ($found = strpos($string, $needle) === false) { 
       doSomething();
   }
   
   // always valid comparison, with parenthesis
   if (($id = strpos($string, $needle)) !== false) { 
       // $id now contains a boolean (true or false), but not the position of the $needle.
   }
   
   // Being a lone instruction, this is always valid : there is no double usage with if condition
   $isFound = strpos($string, $needle) !== false;
   
   
   ?>


See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Use parenthesis
* Separate assignation and comparison
* Drop assignation or comparison

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/AssigneAndCompare |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 1.6.3                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-autounsetforeach:

.. _same-variable-foreach:

Same Variable Foreach
+++++++++++++++++++++

 A foreach which uses its own source as a blind variable is actually broken.

Actually, PHP makes a copy of the source before it starts the loop. As such, the same variable may be used for both source and blind value. 

Of course, this is very confusing, to see the same variables used in very different ways. 

The source will also be destroyed immediately after the blind variable has been turned into a reference.

.. code-block:: php

   <?php
   
   $array = range(0, 10);
   foreach($array as $array) {
       print $array.PHP_EOL;
   }
   
   print_r($array); // display number from 0 to 10.
   
   $array = range(0, 10);
   foreach($array as &$array) {
       print $array.PHP_EOL;
   }
   
   print_r($array); // display 10
   
   ?>

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Structures/AutoUnsetForeach |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.0.5                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _structures-booleanstrictcomparison:

.. _strict-comparison-with-booleans:

Strict Comparison With Booleans
+++++++++++++++++++++++++++++++

 Strict comparisons prevent from mistaking an error with a false. 

Boolean values may be easily mistaken with other values, especially when the function may return integer or boolean as a normal course of action. 

It is encouraged to use strict comparison === or !== when booleans are involved in a comparison.

.. code-block:: php

   <?php
   
   // distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
   if (strpos($a, $b) === 0) {
       doSomething();
   }
   
   // DOES NOT distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
   if (strpos($a, $b)) {
       doSomething();
   }
   
   // will NOT mistake 1 and true
   $a = array(0, 1, 2, true);
   if (in_array($a, true, true)) {
       doSomething();
   }
   
   // will mistake 1 and true
   $a = array(0, 1, 2, true);
   if (in_array($a, true)) {
       doSomething();
   }
   
   ?>


`switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ structures always uses == comparisons. 

Native function `in_array() <https://www.php.net/in_array>`_ has a third parameter to make it use strict comparisons.



Suggestions
^^^^^^^^^^^

* Use strict comparison whenever possible

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/BooleanStrictComparison                                                                         |
+--------------+------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                             |
+--------------+------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                        |
+--------------+------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                      |
+--------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                       |
+--------------+------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phinx-structures-booleanstrictcomparison`, :ref:`case-typo3-structures-booleanstrictcomparison` |
+--------------+------------------------------------------------------------------------------------------------------------+


.. _structures-castingternary:

.. _casting-ternary:

Casting Ternary
+++++++++++++++

 Type casting has a precedence over ternary operator, and is applied first. When this happens, the condition is cast, although it is often useless as PHP will do it if needed.

This applies to the ternary operator, the coalesce operator ?: and the null-coalesce operator ??.

.. code-block:: php

   <?php
       $a = (string) $b ? 3 : 4;
       $a = (string) $b ?: 4;
       $a = (string) $b ?? 4;
   ?>


The last example generates first an error `Undefined variable: b`, since $b is first cast to a string. The result is then an empty string, which leads to an empty string to be stored into $a. Multiple errors cascade.

See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Add parenthesis around the ternary operator
* Skip the casting
* Cast in another expression

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Structures/CastingTernary |
+--------------+---------------------------+
| Rulesets     | :ref:`Analyze`            |
+--------------+---------------------------+
| Exakat since | 1.8.0                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _structures-checkjson:

.. _check-json:

Check JSON
++++++++++

 Check errors whenever JSON is encoded or decoded. 

In particular, ``NULL`` is a valid decoded JSON response. If you want to avoid mistaking `NULL <https://www.php.net/manual/en/language.types.null.php>`_ for an error, it is recommended to call ``json_last_error``.

.. code-block:: php

   <?php
   
   $encoded = json_encode($incoming);
   // Unless JSON must contains some non-null data, this mistakes NULL and error
   if(json_last_error() != JSON_ERROR_NONE) {
       die('Error when encoding JSON');
   }
   
   $decoded = json_decode($incoming);
   // Unless JSON must contains some non-null data, this mistakes NULL and error
   if($decoded === null) {
       die('ERROR');
   }
   
   ?>


See also `Option to make json_encode and json_decode throw exceptions on errors <https://ayesh.me/Upgrade-PHP-7.3#json-exceptions>`_, `json_last_error <https://www.php.net/json_last_error>`_.


Suggestions
^^^^^^^^^^^

* Always check after JSON operation : encoding or decoding.
* Add a call to json_last_error()
* Configure operations to throw an exception upon error (``JSON_THROW_ON_ERROR``), and catch it.

Specs
^^^^^
+--------------+----------------------------------------------+
| Short name   | Structures/CheckJson                         |
+--------------+----------------------------------------------+
| Rulesets     | :ref:`Analyze`                               |
+--------------+----------------------------------------------+
| Exakat since | 1.3.0                                        |
+--------------+----------------------------------------------+
| PHP Version  | All                                          |
+--------------+----------------------------------------------+
| Severity     | Major                                        |
+--------------+----------------------------------------------+
| Time To Fix  | Quick (30 mins)                              |
+--------------+----------------------------------------------+
| Precision    | High                                         |
+--------------+----------------------------------------------+
| Examples     | :ref:`case-woocommerce-structures-checkjson` |
+--------------+----------------------------------------------+


.. _structures-coalesceandconcat:

.. _coalesce-and-concat:

Coalesce And Concat
+++++++++++++++++++

 The concatenation operator dot has precedence over the coalesce operator ??. 

.. code-block:: php

   <?php
   
   // Parenthesis are the right solution when in doubt
   echo a . ($b ?? 'd') . $e;
   
   // 'a' . $b is evaluated first, leading ot a useless ?? operator
   'a' . $b ?? $c;
   
   // 'd' . 'e' is evaluated first, leading to $b OR 'de'. 
   echo $b ?? 'd' . 'e';
   
   ?>




Suggestions
^^^^^^^^^^^

* Add parenthesis around ?? operator to avoid misbehavior
* Do not use dot and ?? together in the same expression

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/CoalesceAndConcat |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 1.9.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-complexexpression:

.. _too-complex-expression:

Too Complex Expression
++++++++++++++++++++++

 Long expressions should be broken in small chunks, to limit complexity. 

Really long expressions tends to be error prone : either by typo, or by missing details. They are even harder to review, once the initially build of the expression is gone. 

As a general rule, it is recommended to keep expressions short. The analysis include any expression that is more than 15 tokens large : variable and operators counts as one, properties, arrays count as two. Parenthesis are also counted. 

PHP has no specific limit to expression size, so long expression are legal and valid. It is possible that the business logic requires a complex equation. 

.. code-block:: php

   <?php
   
   // Why not calculate wordwrap size separatedly ? 
   $a = explode("\n", wordwrap($this->message, floor($this->width / imagefontwidth($this->fontsize)), "\n"));
   
   // Longer but easier to read
   $width = floor($this->width / imagefontwidth($this->fontsize)), "\n");
   $a = explode("\n", wordwrap($this->message, $width);
   
   // Here, some string building, including error management with @, is making the data quite complex.
   fwrite($fp, 'HEAD ' . @$url['path'] . @$url['query'] . ' HTTP/1.0' . "\r\n" . 'Host: ' . @$url['host'] . "\r\n\r\n")
   
   // Better validation of data. 
   $http_header = 'HEAD ';
   if (isset($url['path'])) {
       $http_header .= $url['path'];
   }
   if (isset($url['query'])) {
       $http_header .= $url['query'];
   }
   
   $http_header .=  "\r\n";
   if (isset($url['host'])) {
       $http_header .= 'Host: ' . $url['host'] . "\r\n\r\n";
   }
   
   fwrite($fp, $http_header);
   
   ?>




Suggestions
^^^^^^^^^^^

* Reduce complexity by breaking the expressions into smaller ones

+----------------------------+---------+---------+----------------------------------------------------------+
| Name                       | Default | Type    | Description                                              |
+----------------------------+---------+---------+----------------------------------------------------------+
| complexExpressionThreshold | 30      | integer | Minimal number of operators in one expression to report. |
+----------------------------+---------+---------+----------------------------------------------------------+



Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/ComplexExpression |
+--------------+------------------------------+
| Rulesets     | :ref:`Appinfo`               |
+--------------+------------------------------+
| Exakat since | 0.12.16                      |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Minor                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-constdefinefavorite:

.. _const-or-define:

Const Or Define
+++++++++++++++

 ``const`` and ``define()`` have the same functional use : create constants. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

They are almost interchangeable, though not totally : ``define()`` allows the creation of case-insensitive constants, while ``Const`` won\'t. 

.. code-block:: php

   <?php
   
   // be consistent
   const A1  = 1 ;
   const A2  = 2 ;
   const A3  = 3 ;
   const A4  = 4 ;
   const A5  = 5 ;
   const A6  = 6 ;
   const A7  = 7 ;
   const A8  = 8 ;
   const A9  = 9 ;
   const A10 = 10;
   const A11 = 11;
   
   define('A12', 12); // Be consistent, always use the same. 
   
   ?>


See also `define <https://www.php.net/manual/en/function.define.php>`_ and `const <http://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Structures/ConstDefineFavorite |
+--------------+--------------------------------+
| Rulesets     | :ref:`Appinfo`                 |
+--------------+--------------------------------+
| Exakat since | 0.12.1                         |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Slow (1 hour)                  |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _structures-constantscalarexpression:

.. _constant-scalar-expressions:

Constant Scalar Expressions
+++++++++++++++++++++++++++

 Define constant with the result of `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expressions. This means that constants may be defined with the const keyword, with the help of various operators but without any functioncalls. 

This feature was introduced in PHP 5.6. It also supports `array() <https://www.php.net/array>`_, and expressions in arrays.

Those expressions (using simple operators) may only manipulate other constants, and all values must be known at compile time. 

.. code-block:: php

   <?php
   
   // simple definition
   const A = 1;
   
   // constant scalar expression
   const B = A * 3;
   
   // constant scalar expression
   const C = [A ** 3, '3' => B];
   
   ?>


See also `Constant Scalar Expressions <https://wiki.php.net/rfc/const_scalar_exprs>`_.

Specs
^^^^^
+--------------+-------------------------------------+
| Short name   | Structures/ConstantScalarExpression |
+--------------+-------------------------------------+
| Rulesets     | :ref:`Appinfo`                      |
+--------------+-------------------------------------+
| Exakat since | 0.8.4                               |
+--------------+-------------------------------------+
| PHP Version  | 5.6+                                |
+--------------+-------------------------------------+
| Severity     | Major                               |
+--------------+-------------------------------------+
| Time To Fix  | Quick (30 mins)                     |
+--------------+-------------------------------------+
| Precision    | High                                |
+--------------+-------------------------------------+


.. _structures-couldusedir:

.. _could-use-\_\_dir\_\_:

Could Use __DIR__
+++++++++++++++++

 Use `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ constant to access the current file's `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ directory. 

Avoid using `dirname() <https://www.php.net/dirname>`_ on `__FILE__ <https://www.php.net/manual/en/language.constants.predefined.php>`_.

.. code-block:: php

   <?php
   
   // Better way
   $fp = fopen(__DIR__.'/myfile.txt', 'r');
   
   // compatible, but slow way
   $fp = fopen(dirname(__FILE__).'/myfile.txt', 'r');
   
   // Since PHP 5.3
   assert(dirname(__FILE__) == __DIR__);
   
   ?>


`__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ has been introduced in PHP 5.3.0.

See also `Magic Constants <https://www.php.net/manual/en/language.constants.predefined.php>`_.



Suggestions
^^^^^^^^^^^

* Use __DIR__ instead of ``dirname(__FILE__);``

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/CouldUseDir                                                                    |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                           |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-woocommerce-structures-couldusedir`, :ref:`case-piwigo-structures-couldusedir` |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-coulduseshortassignation:

.. _could-use-short-assignation:

Could Use Short Assignation
+++++++++++++++++++++++++++

 Use short assignment operator, to speed up code, and keep syntax clear.  

Some operators, like * or +, have a compact and fast 'do-and-assign' version. They looks like a compacted version for = and the operator. This syntax is good for readability, and saves some memory in the process. 

Depending on the operator, not all permutations of arguments are possible. 

Addition and short assignation of addition have a different set of features when applied to arrays. Do not exchange one another in that case.

.. code-block:: php

   <?php
   
   $a = 10 + $a;
   $a += 10;
   
   $b = $b - 1;
   $b -= 1;
   
   $c = $c * 2;
   $c *= 2;
   
   $d = $d / 3;
   $d /= 3;
   
   $e = $e % 4;
   $e %= 4;
   
   $f = $f | 5;
   $f |= 5;
   
   $g = $g & 6;
   $g &= 6;
   
   $h = $h ^ 7;
   $h ^= 7;
   
   $i = $i >> 8;
   $i >>= 8;
   
   $j = $j << 9;
   $j <<= 9;
   
   // PHP 7.4 and more recent
   $l = $l ?? 'value';
   $l ??= 'value';
   
   ?>


Short operators are faster than the extended version, though it is a micro-optimization.

See also `Assignation Operators <https://www.php.net/manual/en/language.operators.assignment.php>`_.



Suggestions
^^^^^^^^^^^

* Change the expression to use the short assignation

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/CouldUseShortAssignation                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                    |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `use-short-assignations <https://github.com/dseguy/clearPHP/tree/master/rules/use-short-assignations.md>`__       |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-structures-coulduseshortassignation`, :ref:`case-thelia-structures-coulduseshortassignation` |
+--------------+-------------------------------------------------------------------------------------------------------------------+


.. _structures-couldusestrrepeat:

.. _could-use-str\_repeat():

Could Use str_repeat()
++++++++++++++++++++++

 Use `str_repeat() <https://www.php.net/str_repeat>`_ or `str_pad() <https://www.php.net/str_pad>`_ instead of making a loop.

Making a loop to repeat the same concatenation is actually much longer than using `str_repeat() <https://www.php.net/str_repeat>`_. As soon as the loop repeats more than twice, `str_repeat() <https://www.php.net/str_repeat>`_ is much faster. With arrays of 30, the difference is significant, though the whole operation is short by itself. 

.. code-block:: php

   <?php
   
   // This adds 7 'e' to $x
   $x .= str_repeat('e', 7);
   
   // This is the same as above, 
   for($a = 3; $a < 10; ++$a) {
       $x .= 'e';
   }
   
   // here, $default must contains 7 elements to be equivalent to the previous code
   foreach($default as $c) {
       $x .= 'e';
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use strrepeat() whenever possible

Specs
^^^^^
+--------------+--------------------------------------------------+
| Short name   | Structures/CouldUseStrrepeat                     |
+--------------+--------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                   |
+--------------+--------------------------------------------------+
| Exakat since | 0.11.0                                           |
+--------------+--------------------------------------------------+
| PHP Version  | All                                              |
+--------------+--------------------------------------------------+
| Severity     | Minor                                            |
+--------------+--------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                    |
+--------------+--------------------------------------------------+
| Precision    | Very high                                        |
+--------------+--------------------------------------------------+
| Examples     | :ref:`case-zencart-structures-couldusestrrepeat` |
+--------------+--------------------------------------------------+


.. _structures-curlversionnow:

.. _curl\_version()-has-no-argument:

curl_version() Has No Argument
++++++++++++++++++++++++++++++

 `curl_version() <https://www.php.net/curl_version>`_ used to accept ``CURLVERSION_NOW`` as argument. Since PHP 7.4, it is a function without arguments.

.. code-block:: php

   <?php
   
   // Compatible syntax
   $details = curl_version(CURLVERSION_NOW);
   
   // New PHP 7.4 syntax
   $details = curl_version();
   
   ?>


See also `curl_version <https://www.php.net/manual/en/function.curl-version.php>`_.

Suggestions
^^^^^^^^^^^

* Drop all arguments from curl_version() calls.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Structures/CurlVersionNow |
+--------------+---------------------------+
| Rulesets     | :ref:`CompatibilityPHP74` |
+--------------+---------------------------+
| Exakat since | 1.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Quick (30 mins)           |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _structures-danglingarrayreferences:

.. _dangling-array-references:

Dangling Array References
+++++++++++++++++++++++++

 Always unset a referenced-variable used in a loop.

It is highly recommended to unset blind variables when they are set up as references after a loop. 

.. code-block:: php

   <?php
   
   $array = array(1,2,3,4);
   
   foreach($array as &$a) {
       $a += 1;
   }
   // This only unset the reference, not the value
   unset($a);
   
   
   // Dangling array problem
   foreach($array as &$a) {
       $a += 1;
   }
   //$array === array(3,4,5,6);
   
   // This does nothing (apparently)
   // $a is already a reference, even if it doesn't show here.
   foreach($array as $a) {}
   //$array === array(3,4,5,5);
   
   ?>


When omitting this step, the next loop that will also require this variable will deal with garbage values, and produce unexpected results.

See also : `No Dangling Reference <https://github.com/dseguy/clearPHP/blob/master/rules/no-dangling-reference.md>`_, `PHP foreach pass-by-reference: Do it right, or better not at all <https://coderwall.com/p/qx3fpa/php-foreach-pass-by-reference-do-it-right-or-better-not-at-all>`_, `How does PHP 'foreach' actually work? <https://stackoverflow.com/questions/10057671/how-does-php-foreach-actually-work/14854568#14854568>`_, `References and foreach <https://schlueters.de/blog/archives/141-references-and-foreach.html>`_.


Suggestions
^^^^^^^^^^^

* Avoid using the reference altogether : sometimes, the reference is not needed.
* Add unset() right after the loop, to avoid reusing the reference.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/DanglingArrayReferences                                                                            |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                           |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                              |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                          |
+--------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-dangling-reference <https://github.com/dseguy/clearPHP/tree/master/rules/no-dangling-reference.md>`__     |
+--------------+---------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-typo3-structures-danglingarrayreferences`, :ref:`case-sugarcrm-structures-danglingarrayreferences` |
+--------------+---------------------------------------------------------------------------------------------------------------+


.. _structures-dereferencingas:

.. _dereferencing-string-and-arrays:

Dereferencing String And Arrays
+++++++++++++++++++++++++++++++

 PHP allows the direct dereferencing of strings and arrays. 

This was added in PHP 5.5. There is no need anymore for an intermediate variable between a string and array (or any expression generating such value) and accessing an index.

.. code-block:: php

   <?php
   $x = array(4,5,6); 
   $y = $x[2] ; // is 6
   
   May be replaced by 
   $y = array(4,5,6)[2];
   $y = [4,5,6][2];
   ?>

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Structures/DereferencingAS |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | 5.3-                       |
+--------------+----------------------------+
| Severity     | Major                      |
+--------------+----------------------------+
| Time To Fix  | Quick (30 mins)            |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _structures-dirthenslash:

.. _\_\_dir\_\_-then-slash:

__DIR__ Then Slash
++++++++++++++++++

 `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ must be concatenated with a string starting with /.

The magic constant `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ holds the name of the current directory, without final /. When it is used to build path, then the following path fragment must start with /. Otherwise, two directories names will be merged together. 

.. code-block:: php

   <?php
   
   // __DIR__ = /a/b/c
   // $filePath = /a/b/c/g.php
   
   // /a/b/c/d/e/f.txt : correct path
   echo __DIR__.'/d/e/f.txt';
   echo dirname($filePath).'/d/e/f.txt';
   
   // /a/b/cd/e/f.txt : most probably incorrect path
   echo __DIR__.'d/e/f.txt';
   echo dirname($filePath).'d/e/f.txt';
   
   ?>




Suggestions
^^^^^^^^^^^

* Add a check on __DIR__, as it may be '/' when run at the root of the server
* Add a '/' at the beginning of the path after __DIR__.
* Add a call to realpath() or file_exists(), before accessing the file.

Specs
^^^^^
+--------------+------------------------------------------+
| Short name   | Structures/DirThenSlash                  |
+--------------+------------------------------------------+
| Rulesets     | :ref:`Analyze`                           |
+--------------+------------------------------------------+
| Exakat since | 0.10.3                                   |
+--------------+------------------------------------------+
| PHP Version  | All                                      |
+--------------+------------------------------------------+
| Severity     | Major                                    |
+--------------+------------------------------------------+
| Time To Fix  | Instant (5 mins)                         |
+--------------+------------------------------------------+
| Precision    | Very high                                |
+--------------+------------------------------------------+
| Examples     | :ref:`case-traq-structures-dirthenslash` |
+--------------+------------------------------------------+


.. _structures-dontreadandwriteinoneexpression:

.. _don't-read-and-write-in-one-expression:

Don't Read And Write In One Expression
++++++++++++++++++++++++++++++++++++++

 Avoid giving value and using it at the same time, in one expression. This is an undefined behavior of PHP, and may change without warning.

One of those changes happens between PHP 7.2 and 7.3 : 

.. code-block:: php

   <?php
   
   $arr = [1];
   $ref =& $arr[0];
   var_dump($arr[0] + ($arr[0] = 2));
   // PHP 7.2: int(4)
   // PHP 7.3: int(3)
   
   ?>


See also `UPGRADING 7.3 <https://github.com/php/php-src/blob/PHP-7.3/UPGRADING#L83-L95>`_.


Suggestions
^^^^^^^^^^^

* Split the expression in two separate expressions

Specs
^^^^^
+--------------+--------------------------------------------+
| Short name   | Structures/DontReadAndWriteInOneExpression |
+--------------+--------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP74`  |
+--------------+--------------------------------------------+
| Exakat since | 1.4.9                                      |
+--------------+--------------------------------------------+
| PHP Version  | All                                        |
+--------------+--------------------------------------------+
| Severity     | Critical                                   |
+--------------+--------------------------------------------+
| Time To Fix  | Quick (30 mins)                            |
+--------------+--------------------------------------------+
| Precision    | High                                       |
+--------------+--------------------------------------------+


.. _structures-dropelseafterreturn:

.. _drop-else-after-return:

Drop Else After Return
++++++++++++++++++++++

 Avoid else clause when the then clause returns, but not the else. And vice-versa.

This way, the else block disappears, and is now the main sequence of the function. 

This is also true if else has a return, and then not. When doing so, don't forget to reverse the condition. 

.. code-block:: php

   <?php
   
   // drop the else
   if ($a) {
       return $a;
   } else {
       doSomething();
   }
   
   // drop the then
   if ($b) {
       doSomething();
   } else {
       return $a;
   }
   
   // return in else and then
   if ($a3) {
       return $a;
   } else {
       $b = doSomething();
       return $b;
   }
   
   ?>


Suggestions
^^^^^^^^^^^

* Remove the else clause and move its code to the main part of the method

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Structures/DropElseAfterReturn |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.6                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Quick (30 mins)                |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _structures-dynamiccalls:

.. _dynamic-calls:

Dynamic Calls
+++++++++++++

 List of dynamic calls. They will probably need to be review manually.

.. code-block:: php

   <?php
   
   $a = 'b';
   
   // Dynamic call of a constant
   echo constant($a);
   
   // Dynamic variables
   $$a = 2;
   echo $b;
   
   // Dynamic call of a function
   $a('b'); 
   
   // Dynamic call of a method
   $object->$a('b'); 
   
   // Dynamic call of a static method
   A::$a('b'); 
   
   ?>


See also `Variable functions <https://www.php.net/manual/en/functions.variable-functions.php>`_.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Structures/DynamicCalls |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _structures-dynamiccode:

.. _dynamic-code:

Dynamic Code
++++++++++++

 List of instructions that were left during analysis, as they rely on dynamic data. 

.. code-block:: php

   <?php
   
   // Dynamic call to 'method';
   $name = 'method';
   $object->$name();
   
   // Hard coded call to 'method';
   $object->method();
   
   ?>


Any further analysis will need to start from here.

See also `Variable functions <https://www.php.net/manual/en/functions.variable-functions.php>`_.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/DynamicCode |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-elseifelseif:

.. _else-if-versus-elseif:

Else If Versus Elseif
+++++++++++++++++++++

 Always use elseif instead of else and if. 

"The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words". Quoted from the PHP-FIG documentation

.. code-block:: php

   <?php
   
   // Using elseif 
   if ($a == 1) { doSomething(); }
   elseif ($a == 2) { doSomethingElseIf(); }
   else { doSomethingElse(); }
   
   // Using else if 
   if ($a == 1) { doSomething(); }
   else if ($a == 2) { doSomethingElseIf(); }
   else { doSomethingElse(); }
   
   // Using else if, no {}
   if ($a == 1)  doSomething(); 
   else if ($a == 2) doSomethingElseIf(); 
   else  doSomethingElse(); 
   
   ?>


See also `elseif/else if <https://www.php.net/manual/en/control-structures.elseif.php>`_.


Suggestions
^^^^^^^^^^^

* Merge else and if into elseif
* Turn the else expression into a block, and have more than the second if in this block
* Turn the if / else if / else into a switch structure

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------+
| Short name   | Structures/ElseIfElseif                                                                         |
+--------------+-------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-teampass-structures-elseifelseif`, :ref:`case-phpdocumentor-structures-elseifelseif` |
+--------------+-------------------------------------------------------------------------------------------------+


.. _structures-elseusage:

.. _else-usage:

Else Usage
++++++++++

 Else should be avoided by various means. For example, defaulting values before, or short-circuiting the method as soon as the condition is not met.

.. code-block:: php

   <?php
   
   // $a is always set
   $a = 'default';
   if ($condition) {
       $a = foo($condition);
   }
   
   // Don't use else for default : set default before
   if ($condition) {
       $a = foo($condition);
   } else {
       $a = 'default';
   }
   
   // Use then to exit 
   if ( ! $condition) {
       return;
   }
   $a = foo($condition);
   
   // don't use else to return
   if ($condition) {
       $a = foo($condition);
   } else {
       return;
   }
   
   ?>


See also `Avoid Else, Return Early <http://blog.timoxley.com/post/47041269194/avoid-else-return-early>`_ and `Why does clean code forbid else expression <https://stackoverflow.com/questions/32677046/why-does-clean-code-forbid-else-expression>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Structures/ElseUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _structures-emptyblocks:

.. _empty-blocks:

Empty Blocks
++++++++++++

 Full empty block, part of a control structures. 

It is recommended to remove those blocks, so as to reduce confusion in the code. 

.. code-block:: php

   <?php
   
   foreach($foo as $bar) ; // This block seems erroneous
       $foobar++;
   
   if ($a === $b) {
       doSomething();
   } else {
       // Empty block. Remove this
   }
   
   // Blocks containing only empty expressions are also detected
   for($i = 0; $i < 10; $i++) {
       ;
   }
   
   // Although namespaces are not control structures, they are reported here
   namespace A;
   namespace B;
   
   ?>




Suggestions
^^^^^^^^^^^

* Fill the block with a command
* Fill the block with a comment that explain the situation
* Remove the block and its commanding operator

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------+
| Short name   | Structures/EmptyBlocks                                                                     |
+--------------+--------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                             |
+--------------+--------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                        |
+--------------+--------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                           |
+--------------+--------------------------------------------------------------------------------------------+
| Precision    | High                                                                                       |
+--------------+--------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-cleverstyle-structures-emptyblocks`, :ref:`case-phpipam-structures-emptyblocks` |
+--------------+--------------------------------------------------------------------------------------------+


.. _structures-errormessages:

.. _error-messages:

Error Messages
++++++++++++++

 Error message when an error is reported in the code. Those messages will be read by whoever is triggering the error, and it has to be helpful. 

It is a good exercise to read the messages out of context, and try to understand what is about.

.. code-block:: php

   <?php
   
   // Not so helpful messages
   die('Here be monsters');
   exit('An error happened');
   throw new Exception('Exception thrown at runtime');
   
   ?>


Error messages are spotted via `die <https://www.php.net/die>`_, `exit <https://www.www.php.net/exit>`_ or throw.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Structures/ErrorMessages |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _structures-errorreportingwithinteger:

.. _error\_reporting()-with-integers:

error_reporting() With Integers
+++++++++++++++++++++++++++++++

 Using named constants with error_reporting is strongly encouraged to ensure compatibility for future versions. As error levels are added, the range of integers increases, so older integer-based error levels will not always behave as expected. (Adapted from the documentation).

.. code-block:: php

   <?php
   
   // This is ready for PHP next version
   error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_NOTICE & ~E_WARNING);
   
   // This is not ready for PHP next version
   error_reporting(2047);
   
   // -1 and 0 are omitted, as they will be valid even is constants changes.
   error_reporting(-1);
   error_reporting(0);
   
   ?>


See also `directive error_reporting <https://www.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting>`_ and `error_reporting <https://www.php.net/manual/en/function.error-reporting.php>`_.


Suggestions
^^^^^^^^^^^

* Always use the constant combination when configuring error_reporting or any PHP native function

Specs
^^^^^
+--------------+-----------------------------------------------------------+
| Short name   | Structures/ErrorReportingWithInteger                      |
+--------------+-----------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                            |
+--------------+-----------------------------------------------------------+
| Exakat since | 0.8.4                                                     |
+--------------+-----------------------------------------------------------+
| PHP Version  | All                                                       |
+--------------+-----------------------------------------------------------+
| Severity     | Minor                                                     |
+--------------+-----------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                          |
+--------------+-----------------------------------------------------------+
| Precision    | High                                                      |
+--------------+-----------------------------------------------------------+
| Examples     | :ref:`case-sugarcrm-structures-errorreportingwithinteger` |
+--------------+-----------------------------------------------------------+


.. _structures-evalusage:

.. _eval()-usage:

Eval() Usage
++++++++++++

 Using `eval() <https://www.php.net/eval>`_ is evil. 

Using `eval() <https://www.php.net/eval>`_ is bad for performances (compilation time), for caches (it won't be compiled), and for security (if it includes external data).

.. code-block:: php

   <?php
       // Avoid using incoming data to build the eval() expression : any filtering error leads to PHP injection
       $mathExpression = $_GET['mathExpression']; 
       $mathExpression = preg_replace('#[^0-9+\-*/\(/)]#is', '', $mathExpression); // expecting 1+2
       $literalCode = '$a = '.$mathExpression.';';
       eval($literalCode);
       echo $a;
   
       // If the code code given to eval() is known at compile time, it is best to put it inline
       $literalCode = 'phpinfo();';
       eval($literalCode);
   
   ?>


Most of the time, it is possible to replace the code by some standard PHP, like variable variable for accessing a variable for which you have the name.
At worse, including a pregenerated file is faster and cacheable. 

There are several situations where `eval() <https://www.php.net/eval>`_ is actually the only solution : 

For PHP 7.0 and later, it is important to put `eval() <https://www.php.net/eval>`_ in a try..catch expression.

See also `eval <http://www.php.net/eval>`_ and `The Land Where PHP Uses `eval() <https://www.php.net/eval>`_ <https://www.exakat.io/land-where-php-uses-eval/>`_.


Suggestions
^^^^^^^^^^^

* Use a dynamic feature of PHP to replace the dynamic code
* Store the code on the disk, and use include
* Replace create_function() with a closure!

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------+
| Short name   | Structures/EvalUsage                                                            |
+--------------+---------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                  |
+--------------+---------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                           |
+--------------+---------------------------------------------------------------------------------+
| PHP Version  | All                                                                             |
+--------------+---------------------------------------------------------------------------------+
| Severity     | Major                                                                           |
+--------------+---------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                 |
+--------------+---------------------------------------------------------------------------------+
| Precision    | High                                                                            |
+--------------+---------------------------------------------------------------------------------+
| ClearPHP     | `no-eval <https://github.com/dseguy/clearPHP/tree/master/rules/no-eval.md>`__   |
+--------------+---------------------------------------------------------------------------------+
| Examples     | :ref:`case-xoops-structures-evalusage`, :ref:`case-mautic-structures-evalusage` |
+--------------+---------------------------------------------------------------------------------+


.. _structures-evalwithouttry:

.. _eval()-without-try:

eval() Without Try
++++++++++++++++++

 ``eval()`` emits a ``ParseError`` exception with PHP 7 and later. Catching this exception is the recommended way to handle errors when using the ``eval()`` function.

.. code-block:: php

   <?php
   
   $code = 'This is no PHP code.';
   
   //PHP 5 style
   eval($code);
   // Ends up with a Fatal error, at execution time
   
   //PHP 7 style
   try {
       eval($code);
   } catch (ParseError $e) {
       cleanUpAfterEval();
   }
   
   ?>


Note that it will catch situations where ``eval()`` is provided with code that can't be used, but it will not catch security problems. Avoid using ``eval()`` with incoming data.


Suggestions
^^^^^^^^^^^

* Always add a try/catch block around eval() call

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------+
| Short name   | Structures/EvalWithoutTry                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------------+
| PHP Version  | 7.0+                                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-fuelcms-structures-evalwithouttry`, :ref:`case-expressionengine-structures-evalwithouttry` |
+--------------+-------------------------------------------------------------------------------------------------------+


.. _structures-exitusage:

.. _exit()-usage:

Exit() Usage
++++++++++++

 Using `exit <https://www.www.php.net/exit>`_ or `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_ in the code makes the code untestable (it will `break <https://www.php.net/manual/en/control-structures.break.php>`_ unit tests). Moreover, if there is no reason or string to display, it may take a long time to spot where the application is stuck. 

.. code-block:: php

   <?php
   
   // Throw an exception, that may be caught somewhere
   throw new \Exception('error');
   
   // Dying with error message. 
   die('error');
   
   function foo() {
       //exiting the function but not dying
       if (somethingWrong()) {
           return true;
       }
   }
   ?>


Try exiting the function/class with return, or throw exception that may be caught later in the code.


Suggestions
^^^^^^^^^^^

* Avoid exit and die. Let the script finish.
* Throw an exception and let it be handled before finishing

Specs
^^^^^
+--------------+----------------------------------------------------------------------------------+
| Short name   | Structures/ExitUsage                                                             |
+--------------+----------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                   |
+--------------+----------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                            |
+--------------+----------------------------------------------------------------------------------+
| PHP Version  | All                                                                              |
+--------------+----------------------------------------------------------------------------------+
| Severity     | Major                                                                            |
+--------------+----------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                  |
+--------------+----------------------------------------------------------------------------------+
| Precision    | High                                                                             |
+--------------+----------------------------------------------------------------------------------+
| ClearPHP     | `no-exit <https://github.com/dseguy/clearPHP/tree/master/rules/no-exit.md>`__    |
+--------------+----------------------------------------------------------------------------------+
| Examples     | :ref:`case-traq-structures-exitusage`, :ref:`case-thinkphp-structures-exitusage` |
+--------------+----------------------------------------------------------------------------------+


.. _structures-failingsubstrcomparison:

.. _failed-substr-comparison:

Failed Substr Comparison
++++++++++++++++++++++++

 The extracted string must be of the size of the compared string.

This is also true for negative lengths.

.. code-block:: php

   <?php
   
   // Possible comparison
   if (substr($a, 0, 3) === 'abc') { }
   if (substr($b, 4, 3) === 'abc') { }
   
   // Always failing
   if (substr($a, 0, 3) === 'ab') { }
   if (substr($a, 3, -3) === 'ab') { }
   
   // Omitted in this analysis
   if (substr($a, 0, 3) !== 'ab') { }
   
   ?>

 

Suggestions
^^^^^^^^^^^

* Fix the string
* Fix the length of the string
* Put the string in a constant, and use strlen() or mb_strlen()

Specs
^^^^^
+--------------+----------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/FailingSubstrComparison                                                                             |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                 |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                          |
+--------------+----------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                            |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                          |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                               |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                           |
+--------------+----------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zurmo-structures-failingsubstrcomparison`, :ref:`case-mediawiki-structures-failingsubstrcomparison` |
+--------------+----------------------------------------------------------------------------------------------------------------+


.. _structures-fileuploadusage:

.. _file-uploads:

File Uploads
++++++++++++

 This code makes usage of file upload features of PHP.

Upload file feature is detected through the usage of specific functions : 

.. code-block:: php

   <?php
   $uploaddir = '/var/www/uploads/';
   $uploadfile = $uploaddir . basename($_FILES['userfile']['name']);
   
   echo '<pre>';
   if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile)) {
       echo 'File is valid, and was successfully uploaded.'.PHP_EOL;
   } else {
       echo 'Possible file upload attack!'.PHP_EOL;
   }
   
   echo 'Here is some more debugging info:';
   print_r($_FILES);
   
   print '</pre>';
   
   ?>


See also `Handling file uploads <https://www.php.net/manual/en/features.file-upload.php>`_.

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Structures/FileUploadUsage |
+--------------+----------------------------+
| Rulesets     | :ref:`Appinfo`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Slow (1 hour)              |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _structures-fileusage:

.. _file-usage:

File Usage
++++++++++

 The application makes usage of files on the system (read, write, delete, etc.).

Files usage is based on the usage of file functions.

.. code-block:: php

   <?php
       $fp = fopen('/tmp/file.txt', 'w+');
       // ....
   ?>


See also `filesystem <http://www.php.net/manual/en/book.filesystem.php>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Structures/FileUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _structures-foreachreferenceisnotmodified:

.. _foreach-reference-is-not-modified:

Foreach Reference Is Not Modified
+++++++++++++++++++++++++++++++++

 Foreach statement may loop using a reference, especially when the loop has to change values of the array it is looping on. 

In the spotted loop, reference are used but never modified. They may be removed.

.. code-block:: php

   <?php
   
   $letters = range('a', 'z');
   
   // $letter is not used here
   foreach($letters as &$letter) {
       $alphabet .= $letter;
   }
   
   // $letter is actually used here
   foreach($letters as &$letter) {
       $letter = strtoupper($letter);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the reference from the foreach
* Actually modify the content of the reference

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/ForeachReferenceIsNotModified                                                                                    |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                              |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                                       |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                                       |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                             |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                                        |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolibarr-structures-foreachreferenceisnotmodified`, :ref:`case-vanilla-structures-foreachreferenceisnotmodified` |
+--------------+-----------------------------------------------------------------------------------------------------------------------------+


.. _structures-forgottenwhitespace:

.. _forgotten-whitespace:

Forgotten Whitespace
++++++++++++++++++++

 Forgotten whitespaces only bring misery to the code.

White spaces have been left at either end of a file : before the PHP opening tag, or after the closing tag. 

Usually, such whitespaces are forgotten, and may end up summoning the infamous 'headers already sent' error. It is better to remove them. 

.. code-block:: php

   <?php
       // This script has no forgotten whitespace, not at the beginning
       function foo() {}
   
       // This script has no forgotten whitespace, not at the end
   ?>


See also `How to fix Headers already sent error in PHP <http://stackoverflow.com/questions/8028957/how-to-fix-headers-already-sent-error-in-php>`_.


Suggestions
^^^^^^^^^^^

* Remove all whitespaces before and after a script. This doesn't apply to template, which may need to use those spaces.
* Remove the final tag, to prevent any whitespace to be forgotten at the end of the file. This doesn't apply to the opening PHP tag, which is always necessary.

Specs
^^^^^
+--------------+--------------------------------+
| Short name   | Structures/ForgottenWhiteSpace |
+--------------+--------------------------------+
| Rulesets     | :ref:`Analyze`                 |
+--------------+--------------------------------+
| Exakat since | 0.8.4                          |
+--------------+--------------------------------+
| PHP Version  | All                            |
+--------------+--------------------------------+
| Severity     | Minor                          |
+--------------+--------------------------------+
| Time To Fix  | Instant (5 mins)               |
+--------------+--------------------------------+
| Precision    | High                           |
+--------------+--------------------------------+


.. _structures-functionsubscripting:

.. _function-subscripting:

Function Subscripting
+++++++++++++++++++++

 It is possible to use the result of a methodcall directly as an array, without storing the result in a temporary variable.

This works, given that the method actually returns an array. 

This syntax was not possible until PHP 5.4. Until then, it was compulsory to store the result in a variable first. Although this is now superfluous, it has been a standard syntax in PHP, and is still being used.

.. code-block:: php

   <?php
   
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   echo foo()[1]; // displays 'a';
   
   // Function subscripting, the old way
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   $x = foo();
   echo $x[1]; // displays 'a';
   
   ?>


Storing the result in a variable is still useful if the result is actually used more than once.

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Structures/FunctionSubscripting |
+--------------+---------------------------------+
| Rulesets     | :ref:`Appinfo`                  |
+--------------+---------------------------------+
| Exakat since | 0.8.4                           |
+--------------+---------------------------------+
| PHP Version  | 5.4+                            |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Instant (5 mins)                |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _structures-globalinglobal:

.. _global-in-global:

Global In Global
++++++++++++++++

 List of global variables. There are the global variables, defined with the global keyword, and the implicit global variables, defined in the global scope.

.. code-block:: php

   <?php
       global $explicitGlobal; // in global namespace
       
       $implicitGlobal = 1; // in global namespace, variables are automatically global
       
       function foo() {
           global $explicitGlobalInFoo; // in functions, globals must be declared with global
       }
   ?>


See also `Variable Scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Structures/GlobalInGlobal |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _structures-globalusage:

.. _global-usage:

Global Usage
++++++++++++

 List usage of globals variables, with global keywords or direct access to $GLOBALS.

.. code-block:: php

   <?php
   $a = 1; /* global scope */ 
   
   function test()
   { 
       echo $a; /* reference to local scope variable */ 
   } 
   
   test();
   
   ?>

It is recommended to avoid using global variables, at it makes it very difficult to track changes in values across the whole application. 

See also `Variable scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------+
| Short name   | Structures/GlobalUsage                                                            |
+--------------+-----------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                    |
+--------------+-----------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                             |
+--------------+-----------------------------------------------------------------------------------+
| PHP Version  | All                                                                               |
+--------------+-----------------------------------------------------------------------------------+
| Severity     | Minor                                                                             |
+--------------+-----------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                     |
+--------------+-----------------------------------------------------------------------------------+
| Precision    | High                                                                              |
+--------------+-----------------------------------------------------------------------------------+
| ClearPHP     | `no-global <https://github.com/dseguy/clearPHP/tree/master/rules/no-global.md>`__ |
+--------------+-----------------------------------------------------------------------------------+


.. _structures-htmlentitiescall:

.. _htmlentities-calls:

Htmlentities Calls
++++++++++++++++++

 `htmlentities() <https://www.php.net/htmlentities>`_ and `htmlspecialchars() <https://www.php.net/htmlspecialchars>`_ are used to prevent injecting special characters in HTML code. As a bare minimum, they take a string and encode it for HTML.

The second argument of the functions is the type of protection. The protection may apply to quotes or not, to HTML 4 or 5, etc. It is highly recommended to set it explicitly.

The third argument of the functions is the encoding of the string. In PHP 5.3, it is ``ISO-8859-1``, in 5.4, was ``UTF-8``, and in 5.6, it is now default_charset, a ``php.ini`` configuration that has the default value of ``UTF-8``. It is highly recommended to set this argument too, to avoid distortions from the configuration.

.. code-block:: php

   <?php
   $str = 'A quote is <b>bold</b>';
   
   // Outputs, without depending on the php.ini: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt; 
   echo htmlentities($str, ENT_QUOTES, 'UTF-8');
   
   // Outputs, while depending on the php.ini: A quote is &lt;b&gt;bold&lt;/b&gt;
   echo htmlentities($str);
   
   ?>


Also, note that arguments 2 and 3 are constants and string, respectively, and should be issued from the list of values available in the manual. Other values than those will make PHP use the default values. 

See also `htmlentities <https://www.php.net/htmlentities>`_ and `htmlspecialchars <https://www.php.net/htmlspecialchars>`_.


Suggestions
^^^^^^^^^^^

* Always use the third argument with htmlentities()

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Structures/Htmlentitiescall |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Major                       |
+--------------+-----------------------------+
| Time To Fix  | Instant (5 mins)            |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _structures-identicalconditions:

.. _identical-conditions:

Identical Conditions
++++++++++++++++++++

 These logical expressions contain members that are identical. 

This means those expressions may be simplified. 

.. code-block:: php

   <?php
   
   // twice $a
   if ($a || $b || $c || $a) {  }
   
   // Hiding in parenthesis is bad
   if (($a) ^ ($a)) {}
   
   // expressions may be large
   if ($a === 1 && 1 === $a) {}
   
   ?>


Suggestions
^^^^^^^^^^^

* Merge the two structures into one unique test
* Add extra expressions between the two structures
* Nest the structures, to show that different attempts are made

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------+
| Short name   | Structures/IdenticalConditions                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                       |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                                  |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-wordpress-structures-identicalconditions`, :ref:`case-dolibarr-structures-identicalconditions` |
+--------------+-----------------------------------------------------------------------------------------------------------+


.. _structures-identicalonbothsides:

.. _identical-on-both-sides:

Identical On Both Sides
+++++++++++++++++++++++

 Operands should be different when comparing or making a logical combination. Of course, the value each operand holds may be identical. When the same operand appears on both sides of the expression, the result is know before execution. 

.. code-block:: php

   <?php
   
   // Trying to confirm consistency
   if ($login == $login) {
       doSomething();
   }
   
   // Works with every operators
   if ($object->login( ) !== $object->login()) {
       doSomething();
   }
   
   if ($sum >= $sum) {
       doSomething();
   }
   
   //
   if ($mask && $mask) {
       doSomething();
   }
   
   if ($mask || $mask) {
       doSomething();
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove one of the alternative, and remove the logical link
* Modify one of the alternative, and make it different from the other

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/IdenticalOnBothSides                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                               |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Exakat since | 1.0.8                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                          |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                         |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phpmyadmin-structures-identicalonbothsides`, :ref:`case-humo-gen-structures-identicalonbothsides` |
+--------------+--------------------------------------------------------------------------------------------------------------+


.. _structures-ifwithsameconditions:

.. _if-with-same-conditions:

If With Same Conditions
+++++++++++++++++++++++

 Successive If / then structures that have the same condition may be either merged or have one of the condition changed. 

.. code-block:: php

   <?php
   
   if ($a == 1) {
       doSomething();
   }
   
   if ($a == 1) {
       doSomethingElse();
   }
   
   // May be replaced by 
   if ($a == 1) {
       doSomething();
       doSomethingElse();
   }
   
   ?>


Note that if the values used in the condition have been modified in the first if/then structure, the two distinct conditions may be needed. 

.. code-block:: php

   <?php
   
   // May not be merged
   if ($a == 1) {
       // Check that this is really the situation
       $a = checkSomething();
   }
   
   if ($a == 1) {
       doSomethingElse();
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two conditions so the condition is used once.
* Change one of the condition, so they are different
* Make it obvious that the first condition is a try, preparing the normal conditions.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/IfWithSameConditions                                                                                   |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                    |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                   |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phpmyadmin-structures-ifwithsameconditions`, :ref:`case-phpdocumentor-structures-ifwithsameconditions` |
+--------------+-------------------------------------------------------------------------------------------------------------------+


.. _structures-impliedif:

.. _implied-if:

Implied If
++++++++++

 It is confusing to emulate if/then with boolean operators.

It is possible to emulate a if/then structure by using the operators 'and' and 'or'. Since optimizations will be applied to them : 
when the left operand of 'and' is false, the right one is not executed, as its result is useless; 
when the left operand of 'or' is true, the right one is not executed, as its result is useless; 

However, such structures are confusing. It is easy to misread them as conditions, and ignore an important logic step. 

.. code-block:: php

   <?php
   
   // Either connect, or die
   mysql_connect('localhost', $user, $pass) or die();
   
   // Defines a constant if not found. 
   defined('SOME_CONSTANT') and define('SOME_CONSTANT', 1);
   
   // Defines a default value if provided is empty-ish 
   // Warning : this is 
   $user = $_GET['user'] || 'anonymous';
   
   ?>


It is recommended to use a real 'if then' structures, to make the condition readable.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/ImpliedIf                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                          |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| ClearPHP     | `no-implied-if <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-if.md>`__ |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-implodeargsorder:

.. _implode()-arguments-order:

Implode() Arguments Order
+++++++++++++++++++++++++

 `implode() <https://www.php.net/implode>`_ accepted two signatures, but is only recommending one. Both types orders of string then array, and array then string have been possible until PHP 7.4.

In PHP 7.4, the order array then string is deprecated, and emits a warning. It will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
   $glue = ',';
   $pieces = range(0, 4);
   
   // documented argument order
   $s = implode($glue, $pieces);
   
   // Pre 7.4 argument order
   $s = implode($pieces, $glue);
   
   // both produces 0,1,2,3,4
   
   ?>


See also `implode() <https://www.php.net/implode>`_.


Suggestions
^^^^^^^^^^^

* Always use the array as the second argument

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Structures/ImplodeArgsOrder |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.9.2                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _structures-includeusage:

.. _inclusions:

Inclusions
++++++++++

 List of all inclusions. Inclusions are made with include(), include_once(), require() and require_once().

.. code-block:: php

   <?php
   
   include 'library.php';
   
   // display is a function defined in 'library.php';
   display('Message');
   
   ?>

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Structures/IncludeUsage |
+--------------+-------------------------+
| Rulesets     | :ref:`Appinfo`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _structures-indicesareintorstring:

.. _indices-are-int-or-string:

Indices Are Int Or String
+++++++++++++++++++++++++

 Indices in an array notation such as ``$array['indice']`` may only be integers or string.

Boolean, Null or float will be converted to their integer or string equivalent.

.. code-block:: php

   <?php
       $a = [true => 1,
             1.0  => 2,
             1.2  => 3,
             1    => 4,
             '1'  => 5,
             0.8  => 6,
             0x1  => 7,
             01   => 8,
             
             null  => 1,
             ''    => 2,
             
             false => 1,
             0     => 2,
   
             '0.8' => 3,
             '01'  => 4,
             '2a'  => 5
             ];
             
       print_r($a);
   
   /*
   The above displays
   Array
   (
       [1] => 8
       [0] => 2
       [] => 2
       [0.8] => 3
       [01] => 4
       [2a] => 5
   )
   */
   ?>


Decimal numbers are rounded to the closest integer; Null is transtyped to '' (empty string); true is 1 and false is 0; Integers in strings are transtyped, while partial numbers or decimals are not analyzed in strings. 

As a general rule of thumb, only use integers or strings that don\'t look like integers. 

This analyzer may find constant definitions, when available.

Note also that PHP detects integer inside strings, and silently turn them into integers. Partial and octal numbers are not transformed.

.. code-block:: php

   <?php
       $a = [1      => 1,
             '2'    => 2,
             '011'  => 9, // octal number
             '11d'  => 11, // partial number 
             ];
             
       var_dump($a);
   
   /*
   The above displays
   array(4) {
     [1]=>
     int(1)
     [2]=>
     int(2)
     [011]=>
     int(9)
     [11d]=>
     int(11)
   }*/
   ?>


See also `Arrays syntax <https://www.php.net/manual/en/language.types.array.php>`_.


Suggestions
^^^^^^^^^^^

* Do not use any type but string or integer
* Force typecast the keys when building an array

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------+
| Short name   | Structures/IndicesAreIntOrString                                                                          |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                       |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zencart-structures-indicesareintorstring`, :ref:`case-mautic-structures-indicesareintorstring` |
+--------------+-----------------------------------------------------------------------------------------------------------+


.. _structures-invalidpackformat:

.. _invalid-pack-format:

Invalid Pack Format
+++++++++++++++++++

 Some characters are invalid in a `pack() <https://www.php.net/pack>`_ format string.

`pack() <https://www.php.net/pack>`_ and `unpack() <https://www.php.net/unpack>`_ accept the following format specifiers : ``aAhHcCsSnviIlLNVqQJPfgGdeExXZ``. 

`unpack() <https://www.php.net/unpack>`_ also accepts a name after the format specifier and an optional quantifier. 

All other situations is not a valid, and produces a warning : ``pack(): Type t: unknown format code``

.. code-block:: php

   <?php
       $binarydata = pack(nvc*, 0x1234, 0x5678, 65, 66);
       
       // the first unsigned short is stored as 'first'. The next matches are names with numbers.
       $res = unpack('nfirst/vc*', $binarydata);
   ?>


Check `pack() <https://www.php.net/pack>`_ documentation for format specifiers that were introduced in various PHP version, namely 7.0, 7.1 and 7.2.

See also `pack <https://www.php.net/pack>`_ and `unpack <https://www.php.net/pack>`_.


Suggestions
^^^^^^^^^^^

* Fix the packing format with correct values

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/InvalidPackFormat |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 1.4.9                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-invalidregex:

.. _invalid-regex:

Invalid Regex
+++++++++++++

 The PCRE regex doesn't compile. It isn't a valid regex.

Several reasons may lead to this situation : syntax error, Unknown modifier, missing parenthesis or reference.

.. code-block:: php

   <?php
   
   // valid regex
   preg_match('/[abc]/', $string);
   
   // invalid regex (missing terminating ] for character class 
   preg_match('/[abc/', $string);
   
   ?>


Regex are check with the Exakat version of PHP. 

Dynamic regex are only checked for simple values. Dynamic values may eventually generate a compilation error.



Suggestions
^^^^^^^^^^^

* Fix the regex before running it

Specs
^^^^^
+--------------+----------------------------------------------+
| Short name   | Structures/InvalidRegex                      |
+--------------+----------------------------------------------+
| Rulesets     | :ref:`Analyze`                               |
+--------------+----------------------------------------------+
| Exakat since | 1.0.5                                        |
+--------------+----------------------------------------------+
| PHP Version  | All                                          |
+--------------+----------------------------------------------+
| Severity     | Major                                        |
+--------------+----------------------------------------------+
| Time To Fix  | Quick (30 mins)                              |
+--------------+----------------------------------------------+
| Precision    | High                                         |
+--------------+----------------------------------------------+
| Examples     | :ref:`case-sugarcrm-structures-invalidregex` |
+--------------+----------------------------------------------+


.. _structures-iszero:

.. _is-actually-zero:

Is Actually Zero
++++++++++++++++

 This addition actually may be simplified because one term is actually negated by another. 

This kind of error happens when the expression is very large : the more terms are included, the more chances are that some auto-annihilation happens. 

This error may also be a simple typo : for example, calculating the difference between two consecutive terms.

.. code-block:: php

   <?php
   
   // This is quite obvious
   $a = 2 - 2;
   
   // This is obvious too. This may be a typo-ed difference between two consecutive terms. 
   // Could have been $c = $fx[3][4] - $fx[3][3] or $c = $fx[3][5] - $fx[3][4];
   $c = $fx[3][4] - $fx[3][4];
   
   // This is less obvious
   $a = $b[3] - $c + $d->foo(1,2,3) + $c + $b[3];
   
   ?>




Suggestions
^^^^^^^^^^^

* Clean the code and remove the null sum
* Fix one of the variable : this expression needs another variable here
* When adding differences, calculate the difference in a temporary variable first.

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------+
| Short name   | Structures/IsZero                                                              |
+--------------+--------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                 |
+--------------+--------------------------------------------------------------------------------+
| Exakat since | 0.12.15                                                                        |
+--------------+--------------------------------------------------------------------------------+
| PHP Version  | All                                                                            |
+--------------+--------------------------------------------------------------------------------+
| Severity     | Minor                                                                          |
+--------------+--------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                               |
+--------------+--------------------------------------------------------------------------------+
| Precision    | High                                                                           |
+--------------+--------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolibarr-structures-iszero`, :ref:`case-suitecrm-structures-iszero` |
+--------------+--------------------------------------------------------------------------------+


.. _structures-listomissions:

.. _list()-may-omit-variables:

list() May Omit Variables
+++++++++++++++++++++++++

 Simply omit any unused variable in a `list() <https://www.php.net/list>`_ call. 

`list() <https://www.php.net/list>`_ is the only PHP function that accepts to have omitted arguments. If the following code makes no usage of a listed variable, just omit it. 

.. code-block:: php

   <?php
       // No need for '2', so no assignation
       list ($a, , $b) = array(1, 2, 3);
       
       // works with PHP 7.1 short syntax
       [$a, , $b] = array(1, 2, 3);
   
       // No need for '2', so no assignation
       list ($a, $c, $b) = array(1, 2, 3);
   ?>


See also `list <https://www.php.net/manual/en/function.list.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the unused variables from the list call
* When the ignored values are at the beginning or the end of the array, array_slice() may be used to shorten the array.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------+
| Short name   | Structures/ListOmissions                                                                    |
+--------------+---------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                              |
+--------------+---------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                         |
+--------------+---------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                             |
+--------------+---------------------------------------------------------------------------------------------+
| Precision    | Very high                                                                                   |
+--------------+---------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-openconf-structures-listomissions`, :ref:`case-fuelcms-structures-listomissions` |
+--------------+---------------------------------------------------------------------------------------------+


.. _structures-logicalmistakes:

.. _logical-mistakes:

Logical Mistakes
++++++++++++++++

 Avoid logical mistakes within long expressions. 

Sometimes, the logic is not what it seems. It is important to check the actual impact of every part of the logical expression. Do not hesitate to make a table with all possible cases. If those cases are too numerous, it may be time to rethink the whole expression. 

.. code-block:: php

   <?php 
   
   // Always true
   if ($a != 1 || $a != 2) { } 
   
   // $a == 1 is useless
   if ($a == 1 || $a != 2) {}
   
   // Always false
   if ($a == 1 && $a == 2) {}
   
   // $a != 2 is useless
   if ($a == 1 && $a != 2) {}
   
   ?>


Based on article from ``Andrey Karpov``  `Logical Expressions in C/C++. Mistakes Made by Professionals <http://www.viva64.com/en/b/0390/>`_



Suggestions
^^^^^^^^^^^

* Change the expressions for them to have a real meaning

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------+
| Short name   | Structures/LogicalMistakes                                                                          |
+--------------+-----------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                 |
+--------------+-----------------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                |
+--------------+-----------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-dolibarr-structures-logicalmistakes`, :ref:`case-cleverstyle-structures-logicalmistakes` |
+--------------+-----------------------------------------------------------------------------------------------------+


.. _structures-loneblock:

.. _lone-blocks:

Lone Blocks
+++++++++++

 Any grouped code without a commanding structure is useless. 

Blocks are compulsory when defining a structure, such as a class or a function. They are most often used with flow control instructions, like if then or switch. 

Blocks are also valid syntax that group several instructions together, though they have no effect at all, except confuse the reader. Most often, it is a ruin from a previous flow control instruction, whose condition was removed or commented. They should be removed. 

.. code-block:: php

   <?php
   
       // Lone block
       //foreach($a as $b) 
       {
           $b++;
       }
   ?>




Suggestions
^^^^^^^^^^^

* Remove the useless curly brackets

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------+
| Short name   | Structures/LoneBlock                                                               |
+--------------+------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                     |
+--------------+------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                              |
+--------------+------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                |
+--------------+------------------------------------------------------------------------------------+
| Severity     | Minor                                                                              |
+--------------+------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                   |
+--------------+------------------------------------------------------------------------------------+
| Precision    | High                                                                               |
+--------------+------------------------------------------------------------------------------------+
| Examples     | :ref:`case-thinkphp-structures-loneblock`, :ref:`case-tine20-structures-loneblock` |
+--------------+------------------------------------------------------------------------------------+


.. _structures-mailusage:

.. _mail-usage:

Mail Usage
++++++++++

 Report usage of mail from PHP. 

The analysis is based on `mail() <https://www.php.net/mail>`_ function and various classes used to send mail.

.. code-block:: php

   <?php
   // The message
   $message = Line 1\r\nLine 2\r\nLine 3;
   
   // In case any of our lines are larger than 70 characters, we should use wordwrap()
   $message = wordwrap($message, 70, \r\n);
   
   // Send
   mail('caffeinated@example.com', 'My Subject', $message);
   ?>


See also `mail <https://www.php.net/mail>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Structures/MailUsage |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _structures-mbstringthirdarg:

.. _mbstring-third-arg:

Mbstring Third Arg
++++++++++++++++++

 Some mbstring functions use the third argument for offset, not for encoding.

Those are the following functions : 

* `mb_strrichr() <https://www.php.net/mb_strrichr>`_
* `mb_stripos() <https://www.php.net/mb_stripos>`_
* `mb_strrpos() <https://www.php.net/mb_strrpos>`_
* `mb_strstr() <https://www.php.net/mb_strstr>`_
* `mb_stristr() <https://www.php.net/mb_stristr>`_
* `mb_strpos() <https://www.php.net/mb_strpos>`_
* `mb_strripos() <https://www.php.net/mb_strripos>`_
* `mb_strrchr() <https://www.php.net/mb_strrchr>`_
* `mb_strrichr() <https://www.php.net/mb_strrichr>`_
* `mb_substr() <https://www.php.net/mb_substr>`_

.. code-block:: php

   <?php
   
   // Display BC
   echo mb_substr('ABC', 1 , 2, 'UTF8');
   
   // Yields Warning: mb_substr() expects parameter 3 to be int, string given
   // Display 0 (aka, substring from 0, for length (int) 'UTF8' => 0)
   echo mb_substr('ABC', 1 ,'UTF8');
   
   ?>


See also `mb_substr() <https://www.php.net/mb_substr>`_ manual pages.



Suggestions
^^^^^^^^^^^

* Add a third argument
* Use the default encoding (aka, omit both third AND fourth argument)

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Structures/MbstringThirdArg |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.9.9                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _structures-mbstringunknownencoding:

.. _mbstring-unknown-encoding:

Mbstring Unknown Encoding
+++++++++++++++++++++++++

 The encoding used is not known to the ext/mbstring extension.

This analysis takes in charge all ``mbstring`` encoding and aliases. The full list of supported mbstring encoding is available with `mb_list_encodings() <https://www.php.net/mb_list_encodings>`_. Each encoding alias is available with `mb_encoding_aliases() <https://www.php.net/mb_encoding_aliases>`_.

.. code-block:: php

   <?php
   
   // Invalid encoding
   $str = mb_strtolower($str, 'utf_8');
   
   // Valid encoding
   $str = mb_strtolower($str, 'utf8');
   $str = mb_strtolower($str, 'UTF8');
   $str = mb_strtolower($str, 'UTF-8');
   
   ?>


See also `ext/mbstring <http://www.php.net/manual/en/book.mbstring.php>`_.


Suggestions
^^^^^^^^^^^

* Use a valid mbstring encoding

Specs
^^^^^
+--------------+------------------------------------+
| Short name   | Structures/MbstringUnknownEncoding |
+--------------+------------------------------------+
| Rulesets     | :ref:`Analyze`                     |
+--------------+------------------------------------+
| Exakat since | 1.9.9                              |
+--------------+------------------------------------+
| PHP Version  | All                                |
+--------------+------------------------------------+
| Severity     | Minor                              |
+--------------+------------------------------------+
| Time To Fix  | Quick (30 mins)                    |
+--------------+------------------------------------+
| Precision    | High                               |
+--------------+------------------------------------+


.. _structures-mergeifthen:

.. _merge-if-then:

Merge If Then
+++++++++++++

 Two successive if/then into one, by merging the two conditions.

.. code-block:: php

   <?php
   
   // two merge conditions
   if ($a == 1 && $b == 2) {
       // doSomething()
   }
   
   // two distinct conditions
   // two nesting
   if ($a == 1) {
       if ($b == 2) {
           // doSomething()
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two structures into one

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/MergeIfThen |
+--------------+------------------------+
| Rulesets     | :ref:`Analyze`         |
+--------------+------------------------+
| Exakat since | 1.9.9                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-missingparenthesis:

.. _missing-parenthesis:

Missing Parenthesis
+++++++++++++++++++

 Add parenthesis to those expression to prevent bugs. 

.. code-block:: php

   <?php
   
   // Missing some parenthesis!!
   if (!$a instanceof Stdclass) {
       print Not\n;
   } else {
       print Is\n;
   }
   
   // Could this addition be actually
   $c = -$a + $b;
   
   // This one ? 
   $c = -($a + $b);
   
   ?>


See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Structures/MissingParenthesis |
+--------------+-------------------------------+
| Rulesets     | :ref:`Analyze`                |
+--------------+-------------------------------+
| Exakat since | 1.2.6                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Major                         |
+--------------+-------------------------------+
| Time To Fix  | Instant (5 mins)              |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _structures-multiplecatch:

.. _multiple-catch:

Multiple Catch
++++++++++++++

 Indicates if a try structure have several catch statement.

.. code-block:: php

   <?php
   
   // This try has several catch
   try {
       doSomething();
   } catch (RuntimeException $e) {
       processRuntimeException();
   } catch (OtherException $e) {
       processOtherException();
   }
   
   ?>

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Structures/MultipleCatch |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _structures-multipledefinedcase:

.. _multiples-identical-case:

Multiples Identical Case
++++++++++++++++++++++++

 Some cases are defined multiple times, but only one will be processed. Check the list of cases, and remove the extra one.

Exakat tries to find the value of the case as much as possible, and ignore any dynamic cases (using variables).

.. code-block:: php

   <?php
   
   const A = 1;
   
   case ($x) {
       case 1 : 
           break;
       case true:    // This is a duplicate of the previous
           break; 
       case 1 + 0:   // This is a duplicate of the previous
           break; 
       case 1.0 :    // This is a duplicate of the previous
           break; 
       case A :      // The A constant is actually 1
           break; 
       case $y  :    // This is not reported.
           break; 
       default:
           
   }
   ?>



Suggestions
^^^^^^^^^^^

* Remove the double case
* Change the case to another and rightful value

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/MultipleDefinedCase                                                                                   |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                   |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                              |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                            |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                  |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                             |
+--------------+------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-duplicate-case <https://github.com/dseguy/clearPHP/tree/master/rules/no-duplicate-case.md>`__                |
+--------------+------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-sugarcrm-structures-multipledefinedcase`, :ref:`case-expressionengine-structures-multipledefinedcase` |
+--------------+------------------------------------------------------------------------------------------------------------------+


.. _structures-multiplybyone:

.. _multiply-by-one:

Multiply By One
+++++++++++++++

 Multiplying by 1 is a fancy type cast. 

If it is used to type cast a value to number, then casting (int) or (float) is clearer. This behavior may change with PHP 7.1, which has unified the behavior of all hidden casts. 

.. code-block:: php

   <?php
   
   // Still the same value than $m, but now cast to integer or float
   $m = $m * 1; 
   
   // Still the same value than $m, but now cast to integer or float
   $n *= 1; 
   
   // make typecasting clear, and merge it with the producing call.
   $n = (int) $n;
   
   ?>


See also `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_



Suggestions
^^^^^^^^^^^

* Typecast to (int) or (float) for better readability
* Skip useless math operation altogether

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Structures/MultiplyByOne                                                                      |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                              |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| ClearPHP     | `no-useless-math <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-math.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-sugarcrm-structures-multiplybyone`, :ref:`case-edusoho-structures-multiplybyone`   |
+--------------+-----------------------------------------------------------------------------------------------+


.. _structures-negativepow:

.. _negative-power:

Negative Power
++++++++++++++

 The power operator `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ has higher precedence than the sign operators + and -.

This means that -2 `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ 2 == -4. It is in fact, -(2 `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ 2). 

When using negative power, it is clearer to add parenthesis or to use the `pow() <https://www.php.net/pow>`_ function, which has no such ambiguity : 

.. code-block:: php

   <?php
   
   // -2 to the power of 2 (a square)
   pow(-2, 2) == 4;
   
   // minus 2 to the power of 2 (a negative square)
   -2 ** 2 == -(2 ** 2) == 4;
   
   ?>


Suggestions
^^^^^^^^^^^

* Avoid negative number, as operands of **
* Use parenthesis with negative numbers and **

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/NegativePow |
+--------------+------------------------+
| Rulesets     | :ref:`Analyze`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Major                  |
+--------------+------------------------+
| Time To Fix  | Instant (5 mins)       |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-nestedloops:

.. _nested-loops:

Nested Loops
++++++++++++

 Nested loops happens when a loop (while, do..while, for, foreach), is used inside another loop. 

.. code-block:: php

   <?php
   
   // Nested loops
   foreach($array as $a) {
       foreach ($letters as $b) {
           // This is performed count($array) * count($letters) times. 
           doSomething();
       }
   }
   
   ?>


Such structure tends to require a lot of processing, as the size of both loops have to be multiplied to estimate the actual payload. They should be avoided as much as possible. This may no be always possible, though.

Nested loops are worth a check for performances reasons, as they will process a lot of times the same instructions.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/NestedLoops |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-nestedternary:

.. _nested-ternary:

Nested Ternary
++++++++++++++

 Ternary operators should not be nested too deep.

They are a convenient instruction to apply some condition, and avoid a if() structure. It works best when it is simple, like in a one liner. 

However, ternary operators tends to make the syntax very difficult to read when they are nested. It is then recommended to use an if() structure, and make the whole code readable.

.. code-block:: php

   <?php
   
   // Simple ternary expression
   echo ($a == 1 ? $b : $c) ;
   
   // Nested ternary expressions
   echo ($a === 1 ? $d === 2 ? $b : $d : $d === 3 ? $e : $c) ;
   echo ($a === 1 ? $d === 2 ? $f ===4 ? $g : $h : $d : $d === 3 ? $e : $i === 5 ? $j : $k) ;
   
   //Previous expressions, written as a if / Then expression
   if ($a === 1) {
       if ($d === 2) {
           echo $b;
       } else {
           echo $d;
       }
   } else {
       if ($d === 3) {
           echo $e;
       } else {
           echo $c;
       }
   }
   
   if ($a === 1) {
       if ($d === 2) {
           if ($f === 4) {
               echo $g;
           } else {
               echo $h;
           }
       } else {
           echo $d;
       }
   } else {
       if ($d === 3) {
           echo $e;
       } else {
           if ($i === 5) {
               echo $j;
           } else {
               echo $k;
           }
       }
   }
   
   ?>


See also `Nested Ternaries are Great <https://medium.com/javascript-scene/nested-ternaries-are-great-361bddd0f340>`_.



Suggestions
^^^^^^^^^^^

* Replace ternaries by if/then structures.
* Replace ternaries by a functioncall : this provides more readability, offset the actual code, and gives room for making it different.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------+
| Short name   | Structures/NestedTernary                                                                          |
+--------------+---------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                              |
+--------------+---------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-nested-ternary <https://github.com/dseguy/clearPHP/tree/master/rules/no-nested-ternary.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-spip-structures-nestedternary`, :ref:`case-zencart-structures-nestedternary`           |
+--------------+---------------------------------------------------------------------------------------------------+


.. _structures-nevernegative:

.. _always-positive-comparison:

Always Positive Comparison
++++++++++++++++++++++++++

 Some PHP native functions, such as `count() <https://www.php.net/count>`_, `strlen() <https://www.php.net/strlen>`_, or `abs() <https://www.php.net/abs>`_ only returns positive or null values. 

When comparing them to 0, the following expressions are always true and should be avoided. 

.. code-block:: php

   <?php
   
   $a = [1, 2, 3];
   
   var_dump(count($a) >= 0);
   var_dump(count($a) < 0); 
   
   ?>



Suggestions
^^^^^^^^^^^

* Compare count() to non-zero values
* Use empty()

Specs
^^^^^
+--------------+----------------------------------------------+
| Short name   | Structures/NeverNegative                     |
+--------------+----------------------------------------------+
| Rulesets     | :ref:`Analyze`                               |
+--------------+----------------------------------------------+
| Exakat since | 0.8.4                                        |
+--------------+----------------------------------------------+
| PHP Version  | All                                          |
+--------------+----------------------------------------------+
| Severity     | Major                                        |
+--------------+----------------------------------------------+
| Time To Fix  | Instant (5 mins)                             |
+--------------+----------------------------------------------+
| Precision    | High                                         |
+--------------+----------------------------------------------+
| Examples     | :ref:`case-magento-structures-nevernegative` |
+--------------+----------------------------------------------+


.. _structures-nextmonthtrap:

.. _next-month-trap:

Next Month Trap
+++++++++++++++

 Avoid using +1 month with `strtotime() <https://www.php.net/strtotime>`_. 

`strtotime() <https://www.php.net/strtotime>`_ calculates the next month by incrementing the month number. For day number that do not exist from one month to the next, `strtotime() <https://www.php.net/strtotime>`_ fixes them by setting them in the next-next month. 

This happens to January, March, May, July, August and October. January is also vulnerable for 29 (not every year), 30 and 31. 

Avoid using '+1 month', and rely on 'first day of next month' or 'last day of next month' to extract the next month's name.

.. code-block:: php

   <?php
   
   // Base date is October 31 => 10/31
   // +1 month adds +1 to 10 => 11/31 
   // Since November 31rst doesn't exists, it is corrected to 12/01. 
   echo date('F', strtotime('+1 month',mktime(0,0,0,$i,31,2017))).PHP_EOL;
   
   // Base date is October 31 => 10/31
   echo date('F', strtotime('first day of next month',mktime(0,0,0,$i,31,2017))).PHP_EOL;
   
   ?>


See also `It is the 31st again <https://twitter.com/rasmus/status/925431734128197632>`_.


Suggestions
^^^^^^^^^^^

* Review strtotime() usage for month additions
* Use datetime() and other classes, not PHP native functions
* Use a external library, like carbon, to handle dates

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/NextMonthTrap                                                                  |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 1.0.1                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                          |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-contao-structures-nextmonthtrap`, :ref:`case-edusoho-structures-nextmonthtrap` |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-nochoice:

.. _no-choice:

No Choice
+++++++++

 A conditional structure is being used, but both alternatives are the same, leading to the illusion of choice. 

Either the condition is useless, and may be removed, or the alternatives need to be distinguished.

.. code-block:: php

   <?php
   
   if ($condition == 2) {
       doSomething();
   } else {
       doSomething();
   }
   
   $condition == 2 ?     doSomething() :     doSomething();
   
   ?>





Suggestions
^^^^^^^^^^^

* Remove the conditional, and call the expression directly
* Replace one of the alternative with a distinct call
* Remove the whole conditional : it may end up being useless

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------+
| Short name   | Structures/NoChoice                                                                |
+--------------+------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                     |
+--------------+------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                              |
+--------------+------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                |
+--------------+------------------------------------------------------------------------------------+
| Severity     | Major                                                                              |
+--------------+------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                   |
+--------------+------------------------------------------------------------------------------------+
| Precision    | High                                                                               |
+--------------+------------------------------------------------------------------------------------+
| Examples     | :ref:`case-nextcloud-structures-nochoice`, :ref:`case-zencart-structures-nochoice` |
+--------------+------------------------------------------------------------------------------------+


.. _structures-nodirectaccess:

.. _no-direct-access:

No Direct Access
++++++++++++++++

 This expression protects files against direct access. It will kill the process if it realizes this is not supposed to be directly accessed.

Those expressions are used in applications and framework, to prevent direct access to definition files. 

.. code-block:: php

   <?php
   
     // CONSTANT_EXEC is defined in the main file of the application
     defined('CONSTANT_EXEC') or die('Access not allowed'); : Constant used!
   
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Structures/NoDirectAccess |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _structures-noemptyregex:

.. _no-empty-regex:

No Empty Regex
++++++++++++++

 PHP regex don't accept empty regex, nor regex with alphanumeric delimiter.

Most of those errors happen at execution time, when the regex is build dynamically, but still may end empty. At compile time, such error are made when the code is not tested before commit.

.. code-block:: php

   <?php
   
   // No empty regex
   preg_match('', $string, $r); 
   
   // Delimiter must be non-alphanumerical
   preg_replace('1abc1', $string, $r); 
   
   // Delimiter must be non-alphanumerical
   preg_replace('1'.$regex.'1', $string, $r); 
   
   ?>


See also `PCRE <https://www.php.net/pcre>`_ and `Delimiters <https://www.php.net/manual/en/regexp.reference.delimiters.php>`_.


Suggestions
^^^^^^^^^^^

* Fix the regex by adding regex delimiters

Specs
^^^^^
+--------------+----------------------------------------------+
| Short name   | Structures/NoEmptyRegex                      |
+--------------+----------------------------------------------+
| Rulesets     | :ref:`Analyze`                               |
+--------------+----------------------------------------------+
| Exakat since | 0.11.1                                       |
+--------------+----------------------------------------------+
| PHP Version  | All                                          |
+--------------+----------------------------------------------+
| Severity     | Critical                                     |
+--------------+----------------------------------------------+
| Time To Fix  | Quick (30 mins)                              |
+--------------+----------------------------------------------+
| Precision    | High                                         |
+--------------+----------------------------------------------+
| Examples     | :ref:`case-tikiwiki-structures-noemptyregex` |
+--------------+----------------------------------------------+


.. _structures-noissetwithempty:

.. _no-isset()-with-empty():

No isset() With empty()
+++++++++++++++++++++++

 `empty() <https://www.php.net/empty>`_ actually does the job of `isset() <https://www.www.php.net/isset>`_ too. 

From the manual : ``No warning is generated if the variable does not exist. That means `empty() <https://www.php.net/empty>`_ is essentially the concise equivalent to !`isset( <https://www.www.php.net/isset>`_$var) || $var == false.`` The main difference is that `isset() <https://www.www.php.net/isset>`_ only works with variables, while `empty() <https://www.php.net/empty>`_ works with other structures, such as constants.

.. code-block:: php

   <?php
   
   
   // Enough validation
   if (!empty($a)) {
       doSomething();
   }
   
   // Too many tests
   if (isset($a) && !empty($a)) {
       doSomething();
   }
   
   ?>


See also `Isset <http://www.php.net/`isset <https://www.www.php.net/isset>`_>`_ and `empty <http://www.php.net/empty>`_.


Suggestions
^^^^^^^^^^^

* Only use isset(), just drop the empty()
* Only use empty(), just drop the empty()
* Use a null value, so the variable is always set

Specs
^^^^^
+--------------+-----------------------------------------------+
| Short name   | Structures/NoIssetWithEmpty                   |
+--------------+-----------------------------------------------+
| Rulesets     | :ref:`Analyze`                                |
+--------------+-----------------------------------------------+
| Exakat since | 0.8.7                                         |
+--------------+-----------------------------------------------+
| PHP Version  | All                                           |
+--------------+-----------------------------------------------+
| Severity     | Minor                                         |
+--------------+-----------------------------------------------+
| Time To Fix  | Instant (5 mins)                              |
+--------------+-----------------------------------------------+
| Precision    | High                                          |
+--------------+-----------------------------------------------+
| Examples     | :ref:`case-xoops-structures-noissetwithempty` |
+--------------+-----------------------------------------------+


.. _structures-noparenthesisforlanguageconstruct:

.. _no-parenthesis-for-language-construct:

No Parenthesis For Language Construct
+++++++++++++++++++++++++++++++++++++

 Some PHP language constructs, such are ``include``, ``require``, ``include_once``, ``require_once``, ``print``, ``echo`` don't need parenthesis. They accept parenthesis, but it is may lead to strange situations. 

.. code-block:: php

   <?php
   
   // This is an attempt to load 'foo.inc', or kill the script
   include('foo.inc') or die();
   // in fact, this is read by PHP as : include 1 
   // include  'foo.inc' or die();
   
   ?>


It it better to avoid using parenthesis with ``echo``, ``print``, ``return``, ``throw``, ``yield``, ``yield from``, ``include``, ``require``, ``include_once``, ``require_once``.

See also `include <https://www.php.net/manual/en/function.include.php>`_.


Suggestions
^^^^^^^^^^^

* Remove parenthesis

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/NoParenthesisForLanguageConstruct                                                                                                |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                                              |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                                                       |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                                                       |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                                                        |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-parenthesis-for-language-construct <https://github.com/dseguy/clearPHP/tree/master/rules/no-parenthesis-for-language-construct.md>`__   |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phpdocumentor-structures-noparenthesisforlanguageconstruct`, :ref:`case-phpmyadmin-structures-noparenthesisforlanguageconstruct` |
+--------------+---------------------------------------------------------------------------------------------------------------------------------------------+


.. _structures-noreferenceonleft:

.. _no-reference-on-left-side:

No Reference On Left Side
+++++++++++++++++++++++++

 Do not use references as the right element in an assignation. 

.. code-block:: php

   <?php
   
   $b = 2;
   $c = 3;
   
   $a = &$b + $c;
   // $a === 2 === $b;
   
   $a = $b + $c;
   // $a === 5
   
   ?>


This is the case for most situations : addition, multiplication, bitshift, logical, power, concatenation.
Note that PHP won't compile the code if the operator is a short operator (+=, .=, etc.), nor if the & is on the right side of the operator.

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/NoReferenceOnLeft |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 0.11.5                       |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Critical                     |
+--------------+------------------------------+
| Time To Fix  | Quick (30 mins)              |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-nosubstrone:

.. _avoid-substr()-one:

Avoid Substr() One
++++++++++++++++++

 Use array notation ``$string[$position]`` to reach a single byte in a string.

There are two ways to access a byte in a string : `substr() <https://www.php.net/substr>`_ and ``$v[$pos]``.

The second style is more readable. It may be up to four times faster, though it is a micro-optimization. It is recommended to use it. 

PHP 7.1 also introduces the support of negative offsets as string index : negative offset are also reported.

.. code-block:: php

   <?php
   
   $string = 'ab人cde';
   
   echo substr($string, $pos, 1);
   echo $string[$pos];
   
   echo mb_substr($string, $pos, 1);
   
   // when $pos = 1
   // displays bbb
   // when $pos = 2
   // displays ??人
   
   ?>


Beware that `substr() <https://www.php.net/substr>`_ and ``$v[$pos]`` are similar, while `mb_substr() <https://www.php.net/mb_substr>`_ is not. The first function works on bytes, while the latter works on characters.

Suggestions
^^^^^^^^^^^

* Replace substr() with the array notations for strings.
* Replace substr() with a call to mb_substr().

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------+
| Short name   | Structures/NoSubstrOne                                                                     |
+--------------+--------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                             |
+--------------+--------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                        |
+--------------+--------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                           |
+--------------+--------------------------------------------------------------------------------------------+
| Precision    | High                                                                                       |
+--------------+--------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-structures-nosubstrone`, :ref:`case-livezilla-structures-nosubstrone` |
+--------------+--------------------------------------------------------------------------------------------+


.. _structures-nonbreakablespaceinnames:

.. _non-breakable-space-in-names:

Non Breakable Space In Names
++++++++++++++++++++++++++++

 PHP allows non-breakable spaces in structures names, such as class, interfaces, traits, and variables.

This may be a nice trick to make names more readable outside code context, like long-named methods for tests. 

.. code-block:: php

   <?php
   
   class class with non breakable spaces {}
   
   class ClassWithoutNonBreakableSpaces {}
   
   ?>


See also the original post by ``Matthieu Napoli`` : `Using non-breakable spaces in test method names <http://mnapoli.fr/using-non-breakable-spaces-in-test-method-names/>`_ and `PHP Variable Names <http://schappo.blogspot.nl/2015/06/php-variable-names.html>`_.

Specs
^^^^^
+--------------+-------------------------------------+
| Short name   | Structures/NonBreakableSpaceInNames |
+--------------+-------------------------------------+
| Rulesets     | :ref:`Appinfo`                      |
+--------------+-------------------------------------+
| Exakat since | 0.12.0                              |
+--------------+-------------------------------------+
| PHP Version  | All                                 |
+--------------+-------------------------------------+
| Severity     | Minor                               |
+--------------+-------------------------------------+
| Time To Fix  | Slow (1 hour)                       |
+--------------+-------------------------------------+
| Precision    | High                                |
+--------------+-------------------------------------+


.. _structures-noscream:

.. _@-operator:

@ Operator
++++++++++

 `@ <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_ is the 'no scream' operator : it suppresses error output. 

.. code-block:: php

   <?php
   
   // Set x with incoming value, or else null. 
   $x = @$_GET['x'];
   
   ?>


This operator is actually very slow : it will process the error all the way up, and finally decide not to display it. It is often faster to check the conditions first, then run the method without ``@``.

You may also set display_error to 0 in the ``php.ini`` : this will avoid user's error display, but will keep the error in the PHP logs, for later processing. 

The only situation where ``@`` is useful is when a native PHP function displays errors messages when error happens and there is no way to check it from the code. 

This is the case with `fopen() <https://www.php.net/fopen>`_, `stream_socket_server() <https://www.php.net/stream_socket_server>`_, `token_get_all() <https://www.php.net/token_get_all>`_. 

See also `Error Control Operators <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_ and `Five reasons why the shut-op operator should be avoided <https://derickrethans.nl/five-reasons-why-the-shutop-operator-should-be-avoided.html>`_. 


Suggestions
^^^^^^^^^^^

* Remove the @ operator by default

+---------------------+-------------------------+------+----------------------------------------------+
| Name                | Default                 | Type | Description                                  |
+---------------------+-------------------------+------+----------------------------------------------+
| authorizedFunctions | noscream_functions.json | data | Functions that are authorized to sports a @. |
+---------------------+-------------------------+------+----------------------------------------------+



Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------+
| Short name   | Structures/Noscream                                                                   |
+--------------+---------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                        |
+--------------+---------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                 |
+--------------+---------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                   |
+--------------+---------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                 |
+--------------+---------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                       |
+--------------+---------------------------------------------------------------------------------------+
| Precision    | Very high                                                                             |
+--------------+---------------------------------------------------------------------------------------+
| ClearPHP     | `no-noscream <https://github.com/dseguy/clearPHP/tree/master/rules/no-noscream.md>`__ |
+--------------+---------------------------------------------------------------------------------------+
| Examples     | :ref:`case-phinx-structures-noscream`, :ref:`case-phpipam-structures-noscream`        |
+--------------+---------------------------------------------------------------------------------------+


.. _structures-notequal:

.. _not-equal-is-not-!==:

Not Equal Is Not !==
++++++++++++++++++++

 Not and Equal operators, used separately, don't amount to the different operator ``!==``.

``!$a == $b`` first turns ``$a``into the opposite boolean, then compares this boolean value to ``$b``. On the other hand, ``$a !== $b`` compares the two variables for type and value, and returns a boolean. 

.. code-block:: php

   <?php
   
   if ($string != 'abc') {
       // doSomething()
   }
   
   // Here, string will be an boolean, leading 
   if (!$string == 'abc') {
       // doSomething()
   }
   
   // operator priority may be confusing
   if (!$object instanceof OneClass) {
       // doSomething()
   }
   ?>


Note that the ``instanceof`` operator may be use with this syntax, due to operator precedence.

See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Use the != or !==
* Use parenthesis

Specs
^^^^^
+--------------+---------------------+
| Short name   | Structures/NotEqual |
+--------------+---------------------+
| Rulesets     | :ref:`Analyze`      |
+--------------+---------------------+
| Exakat since | 2.0.6               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Quick (30 mins)     |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _structures-notnot:

.. _not-not:

Not Not
+++++++

 Double not makes a boolean, not a ``true``.

This is a wrong casting to boolean. PHP supports ``(boolean)`` to do the same, faster and cleaner.

.. code-block:: php

   <?php
       // Explicit code
       $b = (boolean) $x; 
       $b = (bool) $x; 
   
       // Wrong type casting
       $b = !!$x; 
   
   ?>


See also `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_ and `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Use ``(bool)`` casting operator for that
* Don't typecast, and let PHP handle it. This works in situations where the boolean is immediately used.

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Structures/NotNot                                                                             |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                              |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| ClearPHP     | `no-implied-cast <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-cast.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-cleverstyle-structures-notnot`, :ref:`case-tine20-structures-notnot`               |
+--------------+-----------------------------------------------------------------------------------------------+


.. _structures-objectreferences:

.. _objects-don't-need-references:

Objects Don't Need References
+++++++++++++++++++++++++++++

 There is no need to create references for objects, as those are always passed by reference when used as arguments.

Note that when the argument is assigned another value, including another object, then the reference is needed : PHP forgets about reference when they are replaced.

.. code-block:: php

   <?php
       
       $object = new stdClass();
       $object->name = 'a';
       
       foo($object);
       print $object->name; // Name is 'b'
       
       // No need to make $o a reference
       function foo(&$o) {
           $o->name = 'b';
       }
   
       
       // $o is assigned inside the function : it must be called with a &, or the object won't make it out of the foo3 scope
       function foo3(&$o) {
           $o = new stdClass;
       }
       
       $array = array($object);
       foreach($array as &$o) { // No need to make this a reference
           $o->name = 'c';
       }
   
   ?>


See also `Passing by reference <https://www.php.net/manual/en/language.references.pass.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the reference
* Assign the argument with a new value

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/ObjectReferences                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                  |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                             |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                                |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-references-on-objects <https://github.com/dseguy/clearPHP/tree/master/rules/no-references-on-objects.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zencart-structures-objectreferences`, :ref:`case-xoops-structures-objectreferences`                  |
+--------------+-----------------------------------------------------------------------------------------------------------------+


.. _structures-onceusage:

.. _include\_once()-usage:

include_once() Usage
++++++++++++++++++++

 include_once() and require_once() functions should be avoided for performances reasons.

.. code-block:: php

   <?php
   
   // Including a library. 
   include 'lib/helpers.inc';
   
   // Including a library, and avoiding double inclusion
   include_once 'lib/helpers.inc';
   
   ?>


Try using autoload for loading classes, or use include() or require() and make it possible to include several times the same file without errors.


Suggestions
^^^^^^^^^^^

* Avoid using include_once() whenever possible 
* Use autoload() to load classes, and avoid loading them with include

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------+
| Short name   | Structures/OnceUsage                                                              |
+--------------+-----------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`Appinfo`                                                    |
+--------------+-----------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                             |
+--------------+-----------------------------------------------------------------------------------+
| PHP Version  | All                                                                               |
+--------------+-----------------------------------------------------------------------------------+
| Severity     | Minor                                                                             |
+--------------+-----------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                   |
+--------------+-----------------------------------------------------------------------------------+
| Precision    | High                                                                              |
+--------------+-----------------------------------------------------------------------------------+
| Examples     | :ref:`case-xoops-structures-onceusage`, :ref:`case-tikiwiki-structures-onceusage` |
+--------------+-----------------------------------------------------------------------------------+


.. _structures-opensslrandompseudobytesecondarg:

.. _openssl\_random\_pseudo\_byte()-second-argument:

openssl_random_pseudo_byte() Second Argument
++++++++++++++++++++++++++++++++++++++++++++

 openssl_random_pseudo_byte() uses exceptions to signal an error. Since PHP 7.4, there is no need to use the second argument.

On the other hand, it is important to catch the exception that openssl_random_pseudo_byte() may emit.

.. code-block:: php

   <?php
       // PHP 7.4 way to check on random number generation
       try {
           $bytes = openssl_random_pseudo_bytes($i);
       } catch(\Exception $e) {
           die(Error while loading random number);
       }
   
       // Old way to check on random number generation
       $bytes = openssl_random_pseudo_bytes($i, $cstrong);
       if ($cstrong === false) {
           die(Error while loading random number);
       }
   ?>


See also `openssl_random_pseudo_byte <https://www.php.net/openssl_random_pseudo_bytes>`_ and `PHP RFC: Improve `openssl_random_pseudo_bytes() <https://www.php.net/openssl_random_pseudo_bytes>`_ <https://wiki.php.net/rfc/improve-openssl-random-pseudo-bytes>`_.


Suggestions
^^^^^^^^^^^

* Skip the second argument, add a try/catch around the call to openssl_random_pseudo_bytes()

Specs
^^^^^
+--------------+---------------------------------------------+
| Short name   | Structures/OpensslRandomPseudoByteSecondArg |
+--------------+---------------------------------------------+
| Rulesets     | :ref:`CompatibilityPHP74`                   |
+--------------+---------------------------------------------+
| Exakat since | 1.9.3                                       |
+--------------+---------------------------------------------+
| PHP Version  | All                                         |
+--------------+---------------------------------------------+
| Severity     | Minor                                       |
+--------------+---------------------------------------------+
| Time To Fix  | Quick (30 mins)                             |
+--------------+---------------------------------------------+
| Precision    | High                                        |
+--------------+---------------------------------------------+


.. _structures-ordie:

.. _or-die:

Or Die
++++++

 Classic old style failed error management. 

.. code-block:: php

   <?php
   
   // In case the connexion fails, this kills the current script
   mysql_connect('localhost', $user, $pass) or die();
   
   ?>


Interrupting a script will leave the application with a blank page, will make your life miserable for testing. Just don't do that.

See also `pg_last_error <https://www.php.net/manual/en/function.pg-last-error.php>`_ or `PDO\:\:exec <https://www.php.net/manual/en/pdo.exec.php>`_.


Suggestions
^^^^^^^^^^^

* Throw an exception
* Trigger an error with trigger_error()
* Use your own error mechanism

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/OrDie                                                                          |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                           |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| ClearPHP     | `no-implied-if <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-if.md>`__ |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tine20-structures-ordie`, :ref:`case-openconf-structures-ordie`                |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-printanddie:

.. _print-and-die:

Print And Die
+++++++++++++

 `Die() <https://www.php.net/`die <https://www.php.net/die>`_>`_ also prints. 

When stopping a script with `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_, it is possible to provide a message as first argument, that will be displayed at execution. There is no need to make a specific call to print or echo.

.. code-block:: php

   <?php
   
   //  die may do both print and die.
   echo 'Error message';
   die();
   
   //  exit may do both print and die.
   print 'Error message';
   exit;
   
   //  exit cannot print integers only : they will be used as status report to the system.
   print 'Error message';
   exit 1;
   
   ?>

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/PrintAndDie |
+--------------+------------------------+
| Rulesets     | :ref:`Analyze`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Instant (5 mins)       |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-printwithoutparenthesis:

.. _avoid-parenthesis:

Avoid Parenthesis
+++++++++++++++++

 Avoid Parenthesis for language construct. Languages constructs are a few PHP native elements, that looks like functions but are not. 

Among other distinction, those elements cannot be directly used as variable function call, and they may be used with or without parenthesis.

.. code-block:: php

   <?php
   
   // normal usage of include
   include 'file.php';
   
   // This looks like a function and is not
   include('file2.php');
   
   ?>


The usage of parenthesis actually give some feeling of comfort, it won't prevent PHP from combining those argument with any later operators, leading to unexpected results.

Even if most of the time, usage of parenthesis is legit, it is recommended to avoid them.

Specs
^^^^^
+--------------+------------------------------------+
| Short name   | Structures/PrintWithoutParenthesis |
+--------------+------------------------------------+
| Rulesets     | :ref:`Analyze`                     |
+--------------+------------------------------------+
| Exakat since | 0.8.4                              |
+--------------+------------------------------------+
| PHP Version  | All                                |
+--------------+------------------------------------+
| Severity     | Minor                              |
+--------------+------------------------------------+
| Time To Fix  | Quick (30 mins)                    |
+--------------+------------------------------------+
| Precision    | High                               |
+--------------+------------------------------------+


.. _structures-printfarguments:

.. _printf-number-of-arguments:

Printf Number Of Arguments
++++++++++++++++++++++++++

 The number of arguments provided to `printf() <https://www.php.net/printf>`_ or `vprintf() <https://www.php.net/vprintf>`_ doesn't match the format string.

Extra arguments are ignored, and are dead code as such. Missing arguments are reported with a warning, and nothing is displayed.

Omitted arguments produce an error.

.. code-block:: php

   <?php
   
   // not enough
   printf(' a %s ', $a1); 
   // OK
   printf(' a %s ', $a1, $a2); 
   // too many
   printf(' a %s ', $a1, $a2, $a3); 
   
   // not enough
   sprintf(' a %s ', $a1); 
   // OK
   \sprintf(' a %s ', $a1, $a2); 
   // too many
   sprintf(' a %s ', $a1, $a2, $a3); 
   
   ?>


See also `printf <https://www.php.net/printf>`_ and `sprintf <https://www.php.net/sprintf>`_.


Suggestions
^^^^^^^^^^^

* Sync the number of argument with the format command

Specs
^^^^^
+--------------+------------------------------------------------+
| Short name   | Structures/PrintfArguments                     |
+--------------+------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                 |
+--------------+------------------------------------------------+
| Exakat since | 1.0.1                                          |
+--------------+------------------------------------------------+
| PHP Version  | All                                            |
+--------------+------------------------------------------------+
| Severity     | Minor                                          |
+--------------+------------------------------------------------+
| Time To Fix  | Instant (5 mins)                               |
+--------------+------------------------------------------------+
| Precision    | Medium                                         |
+--------------+------------------------------------------------+
| Examples     | :ref:`case-phpipam-structures-printfarguments` |
+--------------+------------------------------------------------+


.. _structures-repeatedprint:

.. _repeated-print():

Repeated print()
++++++++++++++++

 Always merge several print or echo in one call.

It is recommended to use echo with multiple arguments, or a concatenation with print, instead of multiple calls to print echo, when outputting several blob of text.

.. code-block:: php

   <?php
   
   //Write : 
     echo 'a', $b, 'c';
     print 'a' . $b . 'c';
   
   //Don't write :  
     print 'a';
     print $b;
     print 'c';
   ?>
  



Suggestions
^^^^^^^^^^^

* Merge all prints into one echo call, separating arguments by commas.
* Collect all values in one variable, and do only one call to print or echo.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------+
| Short name   | Structures/RepeatedPrint                                                                          |
+--------------+---------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                               |
+--------------+---------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                             |
+--------------+---------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                              |
+--------------+---------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-repeated-print <https://github.com/dseguy/clearPHP/tree/master/rules/no-repeated-print.md>`__ |
+--------------+---------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-edusoho-structures-repeatedprint`, :ref:`case-humo-gen-structures-repeatedprint`       |
+--------------+---------------------------------------------------------------------------------------------------+


.. _structures-repeatedregex:

.. _repeated-regex:

Repeated Regex
++++++++++++++

 Repeated regex should be centralized. 

When a regex is repeatedly used in the code, it is getting harder to update. 

.. code-block:: php

   <?php
   
   // Regex used several times, at least twice.
   preg_match('/^abc_|^square$/i', $_GET['x']);
   
   //.......
   
   preg_match('/^abc_|^square$/i', $row['name']);
   
   // This regex is dynamically built, so it is not reported.
   preg_match('/^circle|^'.$x.'$/i', $string);
   
   // This regex is used once, so it is not reported.
   preg_match('/^circle|^square$/i', $string);
   
   ?>


Regex that are repeated at least once (aka, used twice or more) are reported. Regex that are dynamically build are not reported.


Suggestions
^^^^^^^^^^^

* Create a central library of regex
* Use the regex inventory to spot other regex that are close, and should be identical.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------+
| Short name   | Structures/RepeatedRegex                                                                    |
+--------------+---------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                              |
+--------------+---------------------------------------------------------------------------------------------+
| Exakat since | 0.10.9                                                                                      |
+--------------+---------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                         |
+--------------+---------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                             |
+--------------+---------------------------------------------------------------------------------------------+
| Precision    | High                                                                                        |
+--------------+---------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-vanilla-structures-repeatedregex`, :ref:`case-tikiwiki-structures-repeatedregex` |
+--------------+---------------------------------------------------------------------------------------------+


.. _structures-resourcesusage:

.. _resources-usage:

Resources Usage
+++++++++++++++

 List of situations that are creating resources.

.. code-block:: php

   <?php
       // This functioncall creates a resource to use
       $fp = fopen('/tmp/file.txt', 'r');
       
       if (!is_resource($fp)){
           thrown new RuntimeException('Could not open file.txt');
       }
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Structures/ResourcesUsage |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _structures-resultmaybemissing:

.. _results-may-be-missing:

Results May Be Missing
++++++++++++++++++++++

 `preg_match() <https://www.php.net/preg_match>`_ may return empty values, if the search fails. It is important to check for the existence of results before assigning them to another variable, or using it.

.. code-block:: php

   <?php
       preg_match('/PHP ([0-9\.]+) /', $res, $r);
       $s = $r[1];
       // $s may end up null if preg_match fails.
   ?>

Specs
^^^^^
+--------------+-------------------------------+
| Short name   | Structures/ResultMayBeMissing |
+--------------+-------------------------------+
| Rulesets     | :ref:`Analyze`                |
+--------------+-------------------------------+
| Exakat since | 0.8.4                         |
+--------------+-------------------------------+
| PHP Version  | All                           |
+--------------+-------------------------------+
| Severity     | Major                         |
+--------------+-------------------------------+
| Time To Fix  | Quick (30 mins)               |
+--------------+-------------------------------+
| Precision    | High                          |
+--------------+-------------------------------+


.. _structures-returntruefalse:

.. _return-true-false:

Return True False
+++++++++++++++++

 These conditional expressions return true/false, depending on the condition. This may be simplified by dropping the control structure altogether.

.. code-block:: php

   <?php
   
   if (version_compare($a, $b) >= 0) {
       return true;
   } else {
       return false;
   }
   
   ?>


This may be simplified with : 

.. code-block:: php

   <?php
   
   return version_compare($a, $b) >= 0;
   
   ?>


This may be applied to assignations and ternary operators too.

.. code-block:: php

   <?php
   
   if (version_compare($a, $b) >= 0) {
       $a = true;
   } else {
       $a = false;
   }
   
   $a = version_compare($a, $b) >= 0 ? false : true;
   
   ?>


 

Suggestions
^^^^^^^^^^^

* Return directly the comparison, without using the if/then structure
* Cast the value to (boolean) and use it instead of the ternary

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Structures/ReturnTrueFalse                                                                    |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                               |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | High                                                                                          |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-mautic-structures-returntruefalse`, :ref:`case-fuelcms-structures-returntruefalse` |
+--------------+-----------------------------------------------------------------------------------------------+


.. _structures-sameconditions:

.. _same-conditions-in-condition:

Same Conditions In Condition
++++++++++++++++++++++++++++

 At least two consecutive if/then structures use identical conditions. The latter will probably be ignored.

This analysis returns false positive when there are attempt to fix a situation, or to call an alternative solution. 

Conditions that are shared between if structures, but inside a logical OR expression are also detected.

.. code-block:: php

   <?php
   
   if ($a == 1) { doSomething(); }
   elseif ($b == 1) { doSomething(); }
   elseif ($c == 1) { doSomething(); }
   elseif ($a == 1) { doSomething(); }
   else {}
   
   // Also works on if then else if chains
   if ($a == 1) { doSomething(); }
   else if ($b == 1) { doSomething(); }
   else if ($c == 1) { doSomething(); }
   else if ($a == 1) { doSomething(); }
   else {}
   
   // Also works on if then else if chains
   // Here, $a is common and sufficient in both conditions
   if ($a || $b) { doSomething(); } 
   elseif ($a || $c) { doSomethingElse(); } 
   
   // This sort of situation generate false postive. 
   $config = load_config_from_commandline();
   if (empty($config)) {
       $config = load_config_from_file();
       if (empty($config)) {
           $config = load_default_config();
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Merge the two conditions into one
* Make the two conditions different

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------+
| Short name   | Structures/SameConditions                                                                   |
+--------------+---------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                              |
+--------------+---------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                         |
+--------------+---------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                    |
+--------------+---------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                             |
+--------------+---------------------------------------------------------------------------------------------+
| Precision    | High                                                                                        |
+--------------+---------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-teampass-structures-sameconditions`, :ref:`case-typo3-structures-sameconditions` |
+--------------+---------------------------------------------------------------------------------------------+


.. _structures-shellusage:

.. _shell-usage:

Shell Usage
+++++++++++

 List of shell calls to system.

.. code-block:: php

   <?php
       // Using backtick operator
       $a = `ls -hla`;
       
       // Using one of PHP native or extension functions
       $a = shell_exec('ls -hla');
       $b = \pcntl_exec('/path/to/command');
       
   ?>


See also `shell_exec <http://www.php.net/shell_exec>`_ and `Execution Operators <http://www.php.net/manual/en/language.operators.execution.php>`_.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Structures/ShellUsage |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _structures-shorttags:

.. _using-short-tags:

Using Short Tags
++++++++++++++++

 The code makes use of short tags. Short tags are the following : ``<?`` . A full scripts looks like that : ``<? /* php code */ ?>`` .

It is recommended to not use short tags, and use standard PHP tags. This makes PHP code compatible with XML standards. Short tags used to be popular, but have lost it.

See also `PHP Tags <https://www.php.net/manual/en/language.basic-syntax.phptags.php>`_.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/ShortTags                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Appinfo`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | 7.0-                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                          |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| ClearPHP     | `no-short-tags <https://github.com/dseguy/clearPHP/tree/master/rules/no-short-tags.md>`__ |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-shouldchainexception:

.. _should-chain-exception:

Should Chain Exception
++++++++++++++++++++++

 Chain exception to provide more context.

When catching an exception and rethrowing another one, it is recommended to chain the exception : this means providing the original exception, so that the final recipient has a chance to track the origin of the problem. This doesn't change the thrown message, but provides more information.

Note : Chaining requires PHP > 5.3.0.

.. code-block:: php

   <?php
       try {
           throw new Exception('Exception 1', 1);
       } catch (\Exception $e) {
           throw new Exception('Exception 2', 2, $e); 
           // Chaining here. 
   
       }
   ?>


See also `Exception\:\:`__construct <https://www.php.net/manual/en/language.oop5.decon.php>`_ <https://www.php.net/manual/en/exception.construct.php>`_ and `What are the best practices for catching and re-throwing exceptions? <https://stackoverflow.com/questions/5551668/what-are-the-best-practices-for-catching-and-re-throwing-exceptions/5551828>`_.


Suggestions
^^^^^^^^^^^

* Add the incoming exception to the newly thrown exception

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------+
| Short name   | Structures/ShouldChainException                                                                         |
+--------------+---------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                          |
+--------------+---------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                     |
+--------------+---------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                        |
+--------------+---------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-magento-structures-shouldchainexception`, :ref:`case-tine20-structures-shouldchainexception` |
+--------------+---------------------------------------------------------------------------------------------------------+


.. _structures-shouldmaketernary:

.. _should-make-ternary:

Should Make Ternary
+++++++++++++++++++

 Ternary operators are the best when assigning values to a variable.

This way, they are less verbose, compatible with assignation and easier to read.

.. code-block:: php

   <?php
       // verbose if then structure
       if ($a == 3) {
           $b = 2;
       } else {
           $b = 3;
       }
   
       // compact ternary call
       $b = ($a == 3) ? 2 : 3;
   
       // verbose if then structure
       // Works with short assignations and simple expressions
       if ($a != 3) {
           $b += 2 - $a * 4;
       } else {
           $b += 3;
       }
   
       // compact ternary call
       $b += ($a != 3) ? 2 - $a * 4 : 3;
   
   ?>


See also `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_ and `Shorthand comparisons in PHP <https://stitcher.io/blog/shorthand-comparisons-in-php>`_.

Specs
^^^^^
+--------------+----------------------------------------------------+
| Short name   | Structures/ShouldMakeTernary                       |
+--------------+----------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                     |
+--------------+----------------------------------------------------+
| Exakat since | 0.8.5                                              |
+--------------+----------------------------------------------------+
| PHP Version  | All                                                |
+--------------+----------------------------------------------------+
| Severity     | Minor                                              |
+--------------+----------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                   |
+--------------+----------------------------------------------------+
| Precision    | High                                               |
+--------------+----------------------------------------------------+
| Examples     | :ref:`case-churchcrm-structures-shouldmaketernary` |
+--------------+----------------------------------------------------+


.. _structures-shoulduseexplodeargs:

.. _should-use-explode-args:

Should Use Explode Args
+++++++++++++++++++++++

 `explode() <https://www.php.net/explode>`_ has a third argument, which limits the amount of exploded elements. With it, it is possible to collect only the first elements, or drop the last ones.

.. code-block:: php

   <?php
   
   $exploded = explode(DELIMITER, $string);
   
   // use explode(DELIMITER, $string, -1);
   array_pop($exploded);
   
   // use explode(DELIMITER, $string, -2);
   $c = array_slice($exploded, 0, -2);
   
   // with explode()'s third argument : 
   list($a, $b) = explode(DELIMITER, $string, 2);
   
   // with list() omitted arguments
   list($a, $b, ) = explode(DELIMITER, $string);
   
   ?>


See also `explode <https://www.php.net/manual/en/function.explode.php>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+---------------------------------+
| Short name   | Structures/ShouldUseExplodeArgs |
+--------------+---------------------------------+
| Rulesets     | :ref:`Analyze`                  |
+--------------+---------------------------------+
| Exakat since | 1.9.4                           |
+--------------+---------------------------------+
| PHP Version  | All                             |
+--------------+---------------------------------+
| Severity     | Minor                           |
+--------------+---------------------------------+
| Time To Fix  | Quick (30 mins)                 |
+--------------+---------------------------------+
| Precision    | High                            |
+--------------+---------------------------------+


.. _structures-striptagsskipsclosedtag:

.. _strip\_tags-skips-closed-tag:

strip_tags Skips Closed Tag
+++++++++++++++++++++++++++

 `strip_tags() <https://www.php.net/strip_tags>`_ skips non-`self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ closing tags. This means that tags such as ``<br />`` will be ignored from the 2nd argument of the function.

.. code-block:: php

   <?php
   
   $input = 'a<br />';
   
   // Displays 'a' and clean the tag
   echo strip_tags($input, '<br>');
   
   // Displays 'a<br />' and skips the allowed tag
   echo strip_tags($input, '<br/>');
   
   ?>


See also `strip_tags <https://www.php.net/manual/en/function.strip-tags.php>`_.

Suggestions
^^^^^^^^^^^

* Do not use self-closing tags in the 2nd parameter

Specs
^^^^^
+--------------+------------------------------------+
| Short name   | Structures/StripTagsSkipsClosedTag |
+--------------+------------------------------------+
| Rulesets     | :ref:`Analyze`                     |
+--------------+------------------------------------+
| Exakat since | 1.9.3                              |
+--------------+------------------------------------+
| PHP Version  | All                                |
+--------------+------------------------------------+
| Severity     | Minor                              |
+--------------+------------------------------------+
| Time To Fix  | Quick (30 mins)                    |
+--------------+------------------------------------+
| Precision    | High                               |
+--------------+------------------------------------+


.. _structures-strposcompare:

.. _strpos()-like-comparison:

Strpos()-like Comparison
++++++++++++++++++++++++

 The result of that function may be mistaken with an error.

`strpos() <https://www.php.net/strpos>`_, along with several PHP native functions, returns a string position, starting at 0, or false, in case of failure. 

.. code-block:: php

   <?php
   
   // This is the best comparison
   if (strpos($string, 'a') === false) { }
   
   // This is OK, as 2 won't be mistaken with false
   if (strpos($string, 'a') == 2) { }
   
   // strpos is one of the 26 functions that may behave this way
   if (preg_match($regex, $string)) { } 
   
   // This works like above, catching the value for later reuse
   if ($a = strpos($string, 'a')) { }
   
   // This misses the case where 'a' is the first char of the string
   if (strpos($string, 'a')) { }
   
   // This misses the case where 'a' is the first char of the string, just like above
   if (strpos($string, 'a') == 0) { }
   
   ?>


It is recommended to check the result of `strpos() <https://www.php.net/strpos>`_ with === or !==, so as to avoid confusing 0 and false. 

This analyzer list all the `strpos() <https://www.php.net/strpos>`_-like functions that are directly compared with == or !=. `preg_match() <https://www.php.net/preg_match>`_, when its first argument is a literal, is omitted : this function only returns `NULL <https://www.php.net/manual/en/language.types.null.php>`_ in case of regex error. 

The full list is the following : 


* `array_search() <https://www.php.net/array_search>`_
* `collator_compare() <https://www.php.net/collator_compare>`_
* `collator_get_sort_key() <https://www.php.net/collator_get_sort_key>`_
* `current() <https://www.php.net/current>`_
* `fgetc() <https://www.php.net/fgetc>`_
* `file_get_contents() <https://www.php.net/file_get_contents>`_
* `file_put_contents() <https://www.php.net/file_put_contents>`_
* `fread() <https://www.php.net/fread>`_
* `iconv_strpos() <https://www.php.net/iconv_strpos>`_
* `iconv_strrpos() <https://www.php.net/iconv_strrpos>`_
* `imagecolorallocate() <https://www.php.net/imagecolorallocate>`_
* `imagecolorallocatealpha() <https://www.php.net/imagecolorallocatealpha>`_
* `mb_strlen() <https://www.php.net/mb_strlen>`_
* `next() <https://www.php.net/next>`_
* `pcntl_getpriority() <https://www.php.net/pcntl_getpriority>`_
* `preg_match() <https://www.php.net/preg_match>`_
* `prev() <https://www.php.net/prev>`_
* `readdir() <https://www.php.net/readdir>`_
* `stripos() <https://www.php.net/stripos>`_
* `strpos() <https://www.php.net/strpos>`_
* `strripos() <https://www.php.net/strripos>`_
* `strrpos() <https://www.php.net/strrpos>`_
* `strtok() <https://www.php.net/strtok>`_
* `curl_exec() <https://www.php.net/curl_exec>`_

In PHP 8.0, str_contains() will do the expected job of `strpos() <https://www.php.net/strpos>`_, with less confusion. 

See also `strpos not working correctly <https://bugs.php.net/bug.php?id=52198>`_.



Suggestions
^^^^^^^^^^^

* Use identity comparisons, for 0 values : === instead of ==, etc.
* Compare with other exact values than 0 : strpos() == 2
* Use str_contains()

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------+
| Short name   | Structures/StrposCompare                                                                            |
+--------------+-----------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                 |
+--------------+-----------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                |
+--------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP     | `strict-comparisons <https://github.com/dseguy/clearPHP/tree/master/rules/strict-comparisons.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-piwigo-structures-strposcompare`, :ref:`case-thelia-structures-strposcompare`            |
+--------------+-----------------------------------------------------------------------------------------------------+


.. _structures-switchwithoutdefault:

.. _switch-without-default:

Switch Without Default
++++++++++++++++++++++

 Always use a default statement in `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_.

Switch statements hold a number of 'case' that cover all known situations, and a 'default' one which is executed when all other options are exhausted. 

.. code-block:: php

   <?php
   
   // Missing default
   switch($format) {
       case 'gif' : 
           processGif();
           break 1;
       
       case 'jpeg' : 
           processJpeg();
           break 1;
           
       case 'bmp' :
           throw new UnsupportedFormat($format);
   }
   // In case $format is not known, then switch is ignored and no processing happens, leading to preparation errors
   
   
   // switch with default
   switch($format) {
       case 'text' : 
           processText();
           break 1;
       
       case 'jpeg' : 
           processJpeg();
           break 1;
           
       case 'rtf' :
           throw new UnsupportedFormat($format);
           
       default :
           throw new UnknownFileFormat($format);
   }
   // In case $format is not known, an exception is thrown for processing 
   
   ?>


Most of the time, `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ do need a default case, so as to catch the odd situation where the 'value is not what it was expected'. This is a good place to catch unexpected values, to set a default behavior. 


Suggestions
^^^^^^^^^^^

* Add a default case

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/SwitchWithoutDefault                                                                                   |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                                    |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                                   |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-switch-without-default <https://github.com/dseguy/clearPHP/tree/master/rules/no-switch-without-default.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zencart-structures-switchwithoutdefault`, :ref:`case-traq-structures-switchwithoutdefault`             |
+--------------+-------------------------------------------------------------------------------------------------------------------+


.. _structures-ternaryinconcat:

.. _ternary-in-concat:

Ternary In Concat
+++++++++++++++++

 Ternary and coalesce operator have higher priority than dot '.' for concatenation. This means that : 

.. code-block:: php

   <?php
     // print B0CE as expected  
     print 'B'.$b.'C'. ($b > 1 ? 'D') : 'E';
   
     // print E, instead of B0CE
     print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';
   
     print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';
   ?>


prints actually 'E', instead of the awaited 'B0CE'.

To be safe, always add parenthesis when using ternary operator with concatenation.

See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.



Suggestions
^^^^^^^^^^^

* Use parenthesis 
* Avoid ternaries and coalesce operators inside a string

Specs
^^^^^
+--------------+-------------------------------------------------+
| Short name   | Structures/TernaryInConcat                      |
+--------------+-------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                  |
+--------------+-------------------------------------------------+
| Exakat since | 0.8.4                                           |
+--------------+-------------------------------------------------+
| PHP Version  | All                                             |
+--------------+-------------------------------------------------+
| Severity     | Critical                                        |
+--------------+-------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                 |
+--------------+-------------------------------------------------+
| Precision    | High                                            |
+--------------+-------------------------------------------------+
| Examples     | :ref:`case-teampass-structures-ternaryinconcat` |
+--------------+-------------------------------------------------+


.. _structures-throwsandassign:

.. _throws-an-assignement:

Throws An Assignement
+++++++++++++++++++++

 It is possible to throw an exception, and, in the same time, assign this exception to a variable.

However, the variable will never be used, as the exception is thrown, and any following code is not executed, unless the exception is caught in the same scope. 

.. code-block:: php

   <?php
   
       // $e is useful, though not by much
       $e = new() Exception();
       throw $e;
   
       // $e is useless
       throw $e = new Exception();
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the assignation

Specs
^^^^^
+--------------+----------------------------+
| Short name   | Structures/ThrowsAndAssign |
+--------------+----------------------------+
| Rulesets     | :ref:`Analyze`             |
+--------------+----------------------------+
| Exakat since | 0.8.4                      |
+--------------+----------------------------+
| PHP Version  | All                        |
+--------------+----------------------------+
| Severity     | Minor                      |
+--------------+----------------------------+
| Time To Fix  | Instant (5 mins)           |
+--------------+----------------------------+
| Precision    | High                       |
+--------------+----------------------------+


.. _structures-timestampdifference:

.. _timestamp-difference:

Timestamp Difference
++++++++++++++++++++

 ``time()`` and ``microtime()`` shouldn't be used to calculate duration. 

``time()`` and ``microtime()`` are subject to variations, depending on system clock variations, such as daylight saving time difference (every spring and fall, one hour variation), or leap seconds, happening on ``June, 30th`` or ``December 31th``, as announced by `IERS <https://www.iers.org/IERS/EN/Home/home_node.html>`_.

.. code-block:: php

   <?php
   
   // Calculating tomorow, same hour, the wrong way
   // tomorrow is not always in 86400s, especially in countries with daylight saving 
   $tomorrow = time()  + 86400; 
   
   // Good way to calculate tomorrow
   $datetime = new DateTime('tomorrow');
   
   ?>


When the difference may be rounded to a larger time unit (rounding the difference to days, or several hours), the variation may be ignored safely.

When the difference is very small, it requires a better way to measure time difference, such as `Ticks <https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks>'_, 
`ext/hrtime <https://www.php.net/manual/en/book.hrtime.php>'_, or including a check on the actual time zone (``ini_get()`` with 'date.timezone'). 

See also `PHP `DateTime <https://www.php.net/`DateTime <https://www.php.net/DateTime>`_>`_ difference – it’s a trap! <http://blog.codebusters.pl/en/php-datetime-difference-trap/>`_ and `PHP Daylight savings bug? <https://stackoverflow.com/questions/22519091/php-daylight-savings-bug>`_.


Suggestions
^^^^^^^^^^^

* For small time intervals, use hrtime() functions
* For larger time intervals, use add() method with ``DateTime``

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------+
| Short name   | Structures/TimestampDifference                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                   |
+--------------+-------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-zurmo-structures-timestampdifference`, :ref:`case-shopware-structures-timestampdifference` |
+--------------+-------------------------------------------------------------------------------------------------------+


.. _structures-tryfinally:

.. _try-with-finally:

Try With Finally
++++++++++++++++

 Indicates if a try use a finally statement.

.. code-block:: php

   <?php
   
   try {
       $a = doSomething();
   } catch (Throwable $e) {
       // Fix the problem
   } finally {
       // remove $a anyway
       unset($a);
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_, to learn about catching an exception.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Structures/TryFinally |
+--------------+-----------------------+
| Rulesets     | :ref:`Appinfo`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | 5.5+                  |
+--------------+-----------------------+
| Severity     | Minor                 |
+--------------+-----------------------+
| Time To Fix  | Slow (1 hour)         |
+--------------+-----------------------+
| Precision    | Very high             |
+--------------+-----------------------+


.. _structures-uncheckedresources:

.. _unchecked-resources:

Unchecked Resources
+++++++++++++++++++

 Resources are created, but never checked before being used. This is not safe.

Always check that resources are correctly created before using them.

.. code-block:: php

   <?php
   
   // always check that the resource is created correctly
   $fp = fopen($d,'r');
   if ($fp === false) {
       throw new Exception('File not found');
   } 
   $firstLine = fread($fp);
   
   // This directory is not checked : the path may not exist and return false
   $uncheckedDir = opendir($pathToDir);
   while(readdir($uncheckedDir)) {
       // do something()
   }
   
   // This file is not checked : the path may not exist or be unreadable and return false
   $fp = fopen($pathToFile);
   while($line = freads($fp)) {
       $text .= $line;
   }
   
   // unsafe one-liner : using bzclose on an unchecked resource
   bzclose(bzopen('file'));
   
   ?>


See also `resources <https://www.php.net/manual/en/language.types.resource.php>`_.


Suggestions
^^^^^^^^^^^

* Add a check between the resource acquisition and its usage

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/UncheckedResources                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Slow (1 hour)                                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-unchecked-resources <https://github.com/dseguy/clearPHP/tree/master/rules/no-unchecked-resources.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------+


.. _structures-unconditionloopbreak:

.. _unconditional-break-in-loop:

Unconditional Break In Loop
+++++++++++++++++++++++++++

 An unconditional `break <https://www.php.net/manual/en/control-structures.break.php>`_ in a loop creates dead code. Since the `break <https://www.php.net/manual/en/control-structures.break.php>`_ is directly in the body of the loop, it is always executed, creating a strange loop that can only run once. 

Here, `break <https://www.php.net/manual/en/control-structures.break.php>`_ may also be a return, a goto or a `continue <https://www.php.net/manual/en/control-structures.continue.php>`_. They all branch out of the loop. Such statement are valid, but should be moderated with a condition. 

.. code-block:: php

   <?php
   
   // return in loop should be in 
   function summAll($array) {
       $sum = 0;
       
       foreach($array as $a) {
           // Stop at the first error
           if (is_string($a)) {
               return $sum;
           }
           $sum += $a;
       }
       
       return $sum;
   }
   
   // foreach loop used to collect first element in array
   function getFirst($array) {
       foreach($array as $a) {
           return $a;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the loop and call the content of the loop once.

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/UnconditionLoopBreak                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                               |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.12.16                                                                                                      |
+--------------+--------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                          |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                                        |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                              |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                         |
+--------------+--------------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-livezilla-structures-unconditionloopbreak`, :ref:`case-mediawiki-structures-unconditionloopbreak` |
+--------------+--------------------------------------------------------------------------------------------------------------+


.. _structures-unknownpregoption:

.. _unkown-regex-options:

Unkown Regex Options
++++++++++++++++++++

 Regex support in PHP accepts the following list of options : ``eimsuxADJSUX``. 

All other letter used as option are not supported : depending on the situation, they may be ignored or raise an error.

.. code-block:: php

   <?php
   
   // all options are available
   if (preg_match('/\d+/isA', $string, $results)) { }
   
   // p and h are not regex options, p is double
   if (preg_match('/\d+/php', $string, $results)) { }
   
   ?>


See also `Pattern Modifiers <https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php>`_


Suggestions
^^^^^^^^^^^

* Remove the unknown options
* Replace the option with a valid one
* Fix any syntax typo in the regex

Specs
^^^^^
+--------------+------------------------------+
| Short name   | Structures/UnknownPregOption |
+--------------+------------------------------+
| Rulesets     | :ref:`Analyze`               |
+--------------+------------------------------+
| Exakat since | 0.8.4                        |
+--------------+------------------------------+
| PHP Version  | All                          |
+--------------+------------------------------+
| Severity     | Major                        |
+--------------+------------------------------+
| Time To Fix  | Slow (1 hour)                |
+--------------+------------------------------+
| Precision    | High                         |
+--------------+------------------------------+


.. _structures-unsupportedtypeswithoperators:

.. _unsupported-types-with-operators:

Unsupported Types With Operators
++++++++++++++++++++++++++++++++

 Arrays, resources and objects are generally not accepted with unary and binary operators. 

The operators are `+`, `-`, `*`, `/`, `**`, `%`, `<<`, `>>`, `&`, `|`, `^`, `~`, `++` and `--`.

.. code-block:: php

   <?php
   
   var_dump([] % [42]);
   // int(0) in PHP 7.x
   // TypeError in PHP 8.0 + 
   
   // Also impossible usage : index are string or int
   $a = [];
   $b = $c[$a]; 
   
   ?>


In PHP 8.0, the rules have been made stricter and more consistent. 

The only valid operator is `+`, combined with arrays in both operands. Other situation will throw `TypeError`.

See also `Stricter type checks for arithmetic/bitwise operators <https://wiki.php.net/rfc/arithmetic_operator_type_checks>`_ and `TypeError <https://www.php.net/manual/en/class.typeerror.php>`_.


Suggestions
^^^^^^^^^^^

* Do not use those values with those operators
* Use a condition to skip this awkward situation
* Add an extra step to turn this value into a valid type

Specs
^^^^^
+--------------+-------------------------------------------+
| Short name   | Structures/UnsupportedTypesWithOperators  |
+--------------+-------------------------------------------+
| Rulesets     | :ref:`Analyze`, :ref:`CompatibilityPHP80` |
+--------------+-------------------------------------------+
| Exakat since | 2.1.9                                     |
+--------------+-------------------------------------------+
| PHP Version  | All                                       |
+--------------+-------------------------------------------+
| Severity     | Minor                                     |
+--------------+-------------------------------------------+
| Time To Fix  | Quick (30 mins)                           |
+--------------+-------------------------------------------+
| Precision    | Medium                                    |
+--------------+-------------------------------------------+


.. _structures-useconstant:

.. _use-constant:

Use Constant
++++++++++++

 The following functioncall have a constant equivalent, that is faster to use than calling the functions. 

This applies to the following functions : 

* `pi() <https://www.php.net/pi>`_ : replace with `M_PI`
* `phpversion() <https://www.php.net/phpversion>`_ : replace with `PHP_VERSION`
* `php_sapi_name() <https://www.php.net/php_sapi_name>`_ : replace with `PHP_SAPI_NAME`

.. code-block:: php

   <?php
   
   // recommended way 
   echo PHP_VERSION;
   
   // slow version
   echo php_version();
   
   ?>


See also `PHP why `pi() <https://www.php.net/pi>`_ and `M_PI <https://www.php.net/M_PI>`_ <https://stackoverflow.com/questions/42021176/php-why-pi-and-m-pi>`_.


Suggestions
^^^^^^^^^^^

* Use the constant version, not the function.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Structures/UseConstant |
+--------------+------------------------+
| Rulesets     | :ref:`Analyze`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Instant (5 mins)       |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _structures-usedebug:

.. _use-debug:

Use Debug
+++++++++

 The code source includes calls to debug functions.

The following debug functions and libraries are reported : 

* `Aronduby Dump <https://github.com/aronduby/dump>`_
* `Cakephp Debug Toolbar <https://github.com/cakephp/debug_kit>`_
* `Kint <https://github.com/kint-php/kint>`_
* `Krumo <https://github.com/mmucklo/krumo>`_
* `Nette tracy <https://tracy.nette.org/>`_
* `php-debugbar <https://github.com/maximebf/php-debugbar>`_
* PHP native functions : print_r(), `var_dump() <https://www.php.net/var_dump>`_, `debug_backtrace() <https://www.php.net/debug_backtrace>`_, debug_print_backtrace(), `debug_zval_dump() <https://www.php.net/debug_zval_dump>`_
* `Symfony debug <https://symfony.com/doc/current/components/debug.html>`_
* `Wordpress debug <https://codex.wordpress.org/Debugging_in_WordPress>`_
* `Xdebug <https://xdebug.org/>`_
* `Zend debug <https://github.com/zendframework/zend-debug>`_

.. code-block:: php

   <?php
   
   // Example with Zend Debug
   Zend\Debug\Debug::dump($var, $label = null, $echo = true);
   
   ?>

Specs
^^^^^
+--------------+---------------------+
| Short name   | Structures/UseDebug |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.11.4              |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _structures-useinstanceof:

.. _avoid-get\_class():

Avoid get_class()
+++++++++++++++++

 ``get_class()`` should be replaced with the ``instanceof`` operator to check the class of an object. 

``get_class()`` only compares the full namespace name of the object's class, while ``instanceof`` actually resolves the name, using the local namespace and aliases.

.. code-block:: php

   <?php
   
       use Stdclass as baseClass;
       
       function foo($arg) {
           // Slow and prone to namespace errors
           if (get_class($arg) === 'Stdclass') {
               // doSomething()
           }
       }
   
       function bar($arg) {
           // Faster, and uses aliases.
           if ($arg instanceof baseClass) {
               // doSomething()
           }
       }
   ?>


See also `get_class <https://www.php.net/get_class>`_ and `Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Structures/UseInstanceof |
+--------------+--------------------------+
| Rulesets     | :ref:`Analyze`           |
+--------------+--------------------------+
| Exakat since | 0.8.4                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _structures-usesystemtmp:

.. _use-system-tmp:

Use System Tmp
++++++++++++++

 It is recommended to avoid hardcoding the temporary file. It is better to rely on the system's temporary folder, which is accessible with `sys_get_temp_dir() <https://www.php.net/sys_get_temp_dir>`_.

.. code-block:: php

   <?php
   
   // Where the tmp is : 
   file_put_contents(sys_get_temp_dir().'/tempFile.txt', $content);
   
   
   // Avoid hard-coding tmp folder : 
   // On Linux-like systems
   file_put_contents('/tmp/tempFile.txt', $content);
   
   // On Windows systems
   file_put_contents('C:\WINDOWS\TEMP\tempFile.txt', $content);
   
   ?>


See also `PHP: When is /tmp not /tmp? <https://www.the-art-of-web.com/php/where-is-tmp/>`_.


Suggestions
^^^^^^^^^^^

* Do not hardcode the temporary file, use the system's

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Structures/UseSystemTmp |
+--------------+-------------------------+
| Rulesets     | :ref:`Analyze`          |
+--------------+-------------------------+
| Exakat since | 0.8.4                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Major                   |
+--------------+-------------------------+
| Time To Fix  | Slow (1 hour)           |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _structures-uselessbrackets:

.. _useless-brackets:

Useless Brackets
++++++++++++++++

 Standalone brackets have no use. Brackets are used to delimit a block of code, and are used by control statements. They may also be used to protect variables in strings. 

Standalone brackets may be a left over of an old instruction, or a misunderstanding of the alternative syntax.

.. code-block:: php

   <?php
   
   // The following brackets are useless : they are a leftover from an older instruction
   // if (DEBUG) 
   {
       $a = 1;
   }
   
   // Here, the extra brackets are useless
   for($a = 2; $a < 5; $a++) : {
       $b++;
   } endfor;
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the brackets
* Restore the flow-control operation that was there and removed
* Move the block into a method or function, and call it

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------+
| Short name   | Structures/UselessBrackets                                                                      |
+--------------+-------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                |
+--------------+-------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-churchcrm-structures-uselessbrackets`, :ref:`case-piwigo-structures-uselessbrackets` |
+--------------+-------------------------------------------------------------------------------------------------+


.. _structures-uselesscasting:

.. _useless-type-casting:

Useless Type Casting
++++++++++++++++++++

 There is no need to overcast returned values.

.. code-block:: php

   <?php
   
   // trim always returns a string : cast is useless
   $a = (string) trim($b);
   
   // strpos doesn't always returns an integer : cast is useful
   $a = (boolean) strpos($b, $c);
   
   // comparison don't need casting, nor parenthesis
   $c = (bool) ($b > 2);
   
   ?>


See also `Type juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the type cast

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------+
| Short name   | Structures/UselessCasting                                                                     |
+--------------+-----------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                |
+--------------+-----------------------------------------------------------------------------------------------+
| Exakat since | 0.8.7                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                           |
+--------------+-----------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                         |
+--------------+-----------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                              |
+--------------+-----------------------------------------------------------------------------------------------+
| Precision    | Very high                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-fuelcms-structures-uselesscasting`, :ref:`case-thinkphp-structures-uselesscasting` |
+--------------+-----------------------------------------------------------------------------------------------+


.. _structures-uselesscheck:

.. _useless-check:

Useless Check
+++++++++++++

 There is no need to check the size of an array content before using foreach. `Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ applies a test on the source, and skips the loop if no element is found.

.. code-block:: php

   <?php
   
   // Checking for type is good. 
   if (is_array($array)) {
       foreach($array as $a) {
           doSomething($a);
       }
   }
   
   // Foreach on empty arrays doesn't start. Checking is useless
   if (!empty($array)) {
       foreach($array as $a) {
           doSomething($a);
       }
   }
   
   ?>


This analysis checks for conditions with `sizeof() <https://www.php.net/sizeof>`_ and `count() <https://www.php.net/count>`_. Conditions with `isset() <https://www.www.php.net/isset>`_ and `empty() <https://www.php.net/empty>`_ are omitted : they also check for the variable existence, and thus, offer extra coverage.

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.



Suggestions
^^^^^^^^^^^

* Drop the condition and the check
* Turn the condition into isset(), empty() and is_array()

Specs
^^^^^
+--------------+----------------------------------------------------------------------------------------+
| Short name   | Structures/UselessCheck                                                                |
+--------------+----------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                         |
+--------------+----------------------------------------------------------------------------------------+
| Exakat since | 0.8.9                                                                                  |
+--------------+----------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                    |
+--------------+----------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                  |
+--------------+----------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                       |
+--------------+----------------------------------------------------------------------------------------+
| Precision    | High                                                                                   |
+--------------+----------------------------------------------------------------------------------------+
| Examples     | :ref:`case-magento-structures-uselesscheck`, :ref:`case-phinx-structures-uselesscheck` |
+--------------+----------------------------------------------------------------------------------------+


.. _structures-uselessinstruction:

.. _useless-instructions:

Useless Instructions
++++++++++++++++++++

 Those instructions are useless, or contains useless parts. 

For example, an addition whose result is not stored in a variable, or immediately used, does nothing : it is actually performed, and the result is lost. Just plain lost. In fact, PHP might detect it, and optimize it away. 

Here the useless instructions that are spotted : 

.. code-block:: php

   <?php
   
   // Concatenating with an empty string is useless.
   $string = 'This part '.$is.' useful but '.$not.'';
   
   // This is a typo, that PHP turns into a constant, then a string, then nothing.
   continue;
   
   // Empty string in a concatenation
   $a = 'abc' . '';
   
   // Returning expression, whose result is not used (additions, comparisons, properties, closures, new without =, ...)
   1 + 2;
   
   // Returning post-incrementation
   function foo($a) {
       return $a++;
   }
   
   // array_replace() with only one argument
   $replaced = array_replace($array);
   // array_replace() is OK with ... 
   $replaced = array_replace(...$array);
   
   // @ operator on source array, in foreach, or when assigning literals
   $array = @array(1,2,3);
   
   // Multiple comparisons in a for loop : only the last is actually used.
   for($i = 0; $j = 0; $j < 10, $i < 20; ++$j, ++$i) {
       print $i.' '.$j.PHP_EOL;
   }
   
   // Counting the keys and counting the array is the same.
   $c = count(array_keys($array))
   
   //array_keys already provides an array with only unique values, as they were keys in a previous array
   $d = array_unique(array_keys($file['messages']))
   
   // No need for assignation inside the ternary operator
   $closeQuote = $openQuote[3] === "'" ? substr($openQuote, 4, -2) : $closeQuote = substr($openQuote, 3);
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the extra semi-colon
* Remove the useless instruction
* Assign this expression to a variable and make use of it

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------------------+
| Short name   | Structures/UselessInstruction                                                                               |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                              |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                         |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                       |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                        |
+--------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-useless-instruction <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-instruction.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------------------+


.. _structures-uselessparenthesis:

.. _useless-parenthesis:

Useless Parenthesis
+++++++++++++++++++

 Situations where parenthesis are not necessary, and may be removed.

Parenthesis group several elements together, and allows for a more readable expression. They are used with logical and mathematical expressions. They are necessary when the precedence of the operators are not the intended execution order : for example, when an addition must be performed before the multiplication.

Sometimes, the parenthesis provide the same execution order than the default order : they are deemed useless. 

.. code-block:: php

   <?php
   
       if ( ($condition) ) {}
       while( ($condition) ) {}
       do $a++; while ( ($condition) );
       
       switch ( ($a) ) {}
       $y = (1);
       ($y) == (1);
       
       f(($x));
   
       // = has precedence over == 
       ($a = $b) == $c;
       
       ($a++);
       
       // No need for parenthesis in default values
       function foo($c = ( 1 + 2) ) {}
   ?>


See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Remove useless parenthesis, unless they are important for readability.

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------------------+
| Short name   | Structures/UselessParenthesis                                                                           |
+--------------+---------------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                          |
+--------------+---------------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                     |
+--------------+---------------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                                   |
+--------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                                        |
+--------------+---------------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                    |
+--------------+---------------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-mautic-structures-uselessparenthesis`, :ref:`case-woocommerce-structures-uselessparenthesis` |
+--------------+---------------------------------------------------------------------------------------------------------+


.. _structures-uselessunset:

.. _useless-unset:

Useless Unset
+++++++++++++

 There are situations where trying to remove a variable is actually useless. 

PHP ignores any command that tries to unset a global variable, a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variable, or a blind variable from a foreach loop. 

This is different from the garbage collector, which is run on its own schedule. It is also different from an explicit unset, aimed at freeing memory early : those are useful.

.. code-block:: php

   <?php
   
   function foo($a) {
       // unsetting arguments is useless
       unset($a);
       
       global $b;
       // unsetting global variable has no effect 
       unset($b);
   
       static $c;
       // unsetting static variable has no effect 
       unset($c);
       
       foreach($d as &$e){
           // unsetting a blind variable is useless
           (unset) $e;
       }
       // Unsetting a blind variable AFTER the loop is good.
       unset($e);
   }
   
   ?>


See also `unset <https://www.php.net/unset>`_.


Suggestions
^^^^^^^^^^^

* Remove the unset
* Set the variable to null : the effect is the same on memory, but the variable keeps its existence.
* Omit unsetting variables, and wait for the end of the scope. That way, PHP free memory en mass.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------+
| Short name   | Structures/UselessUnset                                                                         |
+--------------+-------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-useless-unset <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-unset.md>`__ |
+--------------+-------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tine20-structures-uselessunset`, :ref:`case-typo3-structures-uselessunset`           |
+--------------+-------------------------------------------------------------------------------------------------+


.. _structures-vardumpusage:

.. _var\_dump()...-usage:

var_dump()... Usage
+++++++++++++++++++

 `var_dump() <https://www.php.net/var_dump>`_, print_r() or `var_export() <https://www.php.net/var_export>`_ should not be left in any production code. They are debugging functions.

.. code-block:: php

   <?php
   
   if ($error) {
       // Debugging usage of var_dump
       // And major security problem 
       var_dump($query);
       
       // This is OK : the $query is logged, and not displayed
       $this->log(print_r($query, true));
   }
   
   ?>


They may be tolerated during development time, but must be removed so as not to have any chance to be run in production.


Suggestions
^^^^^^^^^^^

* Remove usage of var_dump(), print_r(), var_export() without 2nd argument, and other debug functions.
* Push all logging to an external file, instead of the browser.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------+
| Short name   | Structures/VardumpUsage                                                                   |
+--------------+-------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                            |
+--------------+-------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                     |
+--------------+-------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                       |
+--------------+-------------------------------------------------------------------------------------------+
| Severity     | Critical                                                                                  |
+--------------+-------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                          |
+--------------+-------------------------------------------------------------------------------------------+
| Precision    | High                                                                                      |
+--------------+-------------------------------------------------------------------------------------------+
| ClearPHP     | `no-debug-code <https://github.com/dseguy/clearPHP/tree/master/rules/no-debug-code.md>`__ |
+--------------+-------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tine20-structures-vardumpusage`, :ref:`case-piwigo-structures-vardumpusage`    |
+--------------+-------------------------------------------------------------------------------------------+


.. _structures-whilelisteach:

.. _while(list()-=-each()):

While(List() = Each())
++++++++++++++++++++++

 This code structure is quite old : it should be replace by the more modern and efficient foreach.

This structure is deprecated since PHP 7.2. It may disappear in the future.

.. code-block:: php

   <?php
   
       while(list($key, $value) = each($array)) {
           doSomethingWith($key) and $value();
       }
   
       foreach($array as $key => $value) {
           doSomethingWith($key) and $value();
       }
   ?>
 

See also `PHP RFC: Deprecations for PHP 7.2 : `Each() <https://www.php.net/each>`_ <https://wiki.php.net/rfc/deprecations_php_7_2#each>`_.


Suggestions
^^^^^^^^^^^

* Change this loop with foreach
* Change this loop with an array_* function with a callback

Specs
^^^^^
+--------------+--------------------------------------------------------------------------------------------+
| Short name   | Structures/WhileListEach                                                                   |
+--------------+--------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                             |
+--------------+--------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                        |
+--------------+--------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                      |
+--------------+--------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                           |
+--------------+--------------------------------------------------------------------------------------------+
| Precision    | High                                                                                       |
+--------------+--------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-openemr-structures-whilelisteach`, :ref:`case-dolphin-structures-whilelisteach` |
+--------------+--------------------------------------------------------------------------------------------+


.. _structures-pregoptione:

.. _preg\_replace-with-option-e:

preg_replace With Option e
++++++++++++++++++++++++++

 `preg_replace() <https://www.php.net/preg_replace>`_ supported the /e option until PHP 7.0. It allowed the use of `eval() <https://www.php.net/eval>`_'ed expression as replacement. This has been dropped in PHP 7.0, for security reasons.

`preg_replace() <https://www.php.net/preg_replace>`_ with /e option may be replaced with `preg_replace_callback() <https://www.php.net/preg_replace_callback>`_ and a closure, or `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_ and an array of closures.

.. code-block:: php

   <?php
   
   // preg_replace with /e
   $string = 'abcde';
   
   // PHP 5.6 and older usage of /e
   $replaced = preg_replace('/c/e', 'strtoupper(\$0)', $string);
   
   // PHP 7.0 and more recent
   // With one replacement
   $replaced = preg_replace_callback('/c/', function ($x) { return strtoupper($x[0]); }, $string);
   
   // With several replacements, preventing multiple calls to preg_replace_callback
   $replaced = preg_replace_callback_array(array('/c/' => function ($x) { return strtoupper($x[0]); },
                                                 '/[a-b]/' => function ($x) { return strtolower($x[0]); }), $string);
   ?>




Suggestions
^^^^^^^^^^^

* Replace call to preg_replace() and /e with preg_replace_callback() or preg_replace_callback_array()

Specs
^^^^^
+--------------+--------------------------------------------+
| Short name   | Structures/pregOptionE                     |
+--------------+--------------------------------------------+
| Rulesets     | :ref:`Analyze`                             |
+--------------+--------------------------------------------+
| Exakat since | 0.8.4                                      |
+--------------+--------------------------------------------+
| PHP Version  | All                                        |
+--------------+--------------------------------------------+
| Severity     | Major                                      |
+--------------+--------------------------------------------+
| Time To Fix  | Quick (30 mins)                            |
+--------------+--------------------------------------------+
| Precision    | High                                       |
+--------------+--------------------------------------------+
| Examples     | :ref:`case-edusoho-structures-pregoptione` |
+--------------+--------------------------------------------+


.. _traits-isexttrait:

.. _is-extension-trait:

Is Extension Trait
++++++++++++++++++

 Indicates if this trait is defined in an extension or not.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Traits/IsExtTrait |
+--------------+-------------------+
| Rulesets     | :ref:`First`      |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _traits-php:

.. _redefined-php-traits:

Redefined PHP Traits
++++++++++++++++++++

 List of all traits that bears name of a PHP trait. Although, at the moment, there are no PHP trait defined.

Specs
^^^^^
+--------------+----------------+
| Short name   | Traits/Php     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _traits-traitusage:

.. _traits-usage:

Traits Usage
++++++++++++

 Usage of traits in the code.

.. code-block:: php

   <?php
   
   trait t {
       function t() {
           echo 'I\'m in t';
       }
   }
   
   class foo {
       use t;
   }
   
   $x = new foo();
   $x->t();
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Traits/TraitUsage |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _traits-traitnames:

.. _trait-names:

Trait Names
+++++++++++

 List all the traits names in the code.

.. code-block:: php

   <?php
   
   // This trait is called 't'
   trait t {}
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Traits/Traitnames |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.8.4             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _traits-undefinedinsteadof:

.. _undefined-insteadof:

Undefined Insteadof
+++++++++++++++++++

 ``Insteadof`` tries to replace a method with another, but it doesn't exists. This happens when the replacing class is refactored, and some of its definition are dropped. 

``Insteadof`` may replace a non-existing method with an existing one, but not the contrary. 

.. code-block:: php

   <?php
   
   trait A {
       function C (){}
   }
   
   trait B {
       function C (){}
   }
   
   class Talker {
       use A, B {
           B::C insteadof A;
           B::D insteadof A;
       }
   }
   
   new Talker();
   ?>


This error is not linted : it only appears at execution time. 

See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the insteadof expression
* Fix the original method and replace it with an existing method

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Traits/UndefinedInsteadof |
+--------------+---------------------------+
| Rulesets     | :ref:`Analyze`            |
+--------------+---------------------------+
| Exakat since | 1.4.2                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Major                     |
+--------------+---------------------------+
| Time To Fix  | Instant (5 mins)          |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _traits-undefinedtrait:

.. _undefined-trait:

Undefined Trait
+++++++++++++++

 Those are undefined, traits . 

When the using class or trait is instantiated, PHP emits a a fatal error.

.. code-block:: php

   <?php
   
   use Composer/Component/someTrait as externalTrait;
   
   trait t {
       function foo() {}
   }
   
   // This class uses trait that are all known
   class hasOnlyDefinedTrait {
       use t, externalTrait;
   }
   
   // This class uses trait that are unknown
   class hasUndefinedTrait {
       use unknownTrait, t, externalTrait;
   }
   ?>


Trait which are referenced in a `use` expression are omitted: they are considered part of code that is probably outside the current code, either omitted or in external component. 



Suggestions
^^^^^^^^^^^

* Define the missing trait
* Remove usage of the missing trait

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Traits/UndefinedTrait |
+--------------+-----------------------+
| Rulesets     | :ref:`Analyze`        |
+--------------+-----------------------+
| Exakat since | 0.8.4                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Critical              |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _traits-uselessalias:

.. _useless-alias:

Useless Alias
+++++++++++++

 It is not possible to declare an alias of a method with the same name. 

PHP reports that ``Trait method f has not been applied, because there are collisions with other trait methods on x``, which is a way to say that the alias will be in conflict with the method name. 

When the method is the only one bearing a name, and being imported, there is no need to alias it. When the method is imported in several traits, the keyword ``insteadof`` is available to solve the conflict.

.. code-block:: php

   <?php
   
   trait t {
       function h() {}
   }
   
   class x {
       use t { 
           // This is possible
           t::f as g; 
   
           // This is not possible, as the alias is in conflict with itself
           // alias are case insensitive
           t::f as f; 
       }
   }
   
   ?>



This code lints but doesn't execute.

See also `Conflict resolution <https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict>`_.



Suggestions
^^^^^^^^^^^

* Remove the alias
* Fix the alias or the origin method name
* Switch to insteadof, and avoid as keyword

Specs
^^^^^
+--------------+---------------------+
| Short name   | Traits/UselessAlias |
+--------------+---------------------+
| Rulesets     | :ref:`Analyze`      |
+--------------+---------------------+
| Exakat since | 1.5.6               |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Major               |
+--------------+---------------------+
| Time To Fix  | Instant (5 mins)    |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _type-arrayindex:

.. _type-array-index:

Type Array Index
++++++++++++++++

 All literal index used in the code. 

.. code-block:: php

   <?php
   
   // index is an index. it is read
   $array['index'] = 1;
   
   // another_index and second_level are read
   $array[] = $array['another_index']['second_level'];
   
   // variables index are not reported
   $array[$variable] = 1;
   
   ?>

Specs
^^^^^
+--------------+-----------------+
| Short name   | Type/ArrayIndex |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 1.0.4           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _type-binary:

.. _binary-glossary:

Binary Glossary
+++++++++++++++

 List of all the integer values using the binary format.

.. code-block:: php

   <?php
   
   $a = 0b10;
   $b = 0B0101;
   
   ?>

Specs
^^^^^
+--------------+-----------------+
| Short name   | Type/Binary     |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.8.4           |
+--------------+-----------------+
| PHP Version  | 5.4+            |
+--------------+-----------------+
| Severity     | Major           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _type-email:

.. _email-addresses:

Email Addresses
+++++++++++++++

 List of all the email addresses that were found in the code.

Emails are detected with regex : ``[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*`@ <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})``

.. code-block:: php

   <?php
   
   $email = 'contact@exakat.io';
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Email     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-gpcindex:

.. _incoming-variable-index-inventory:

Incoming Variable Index Inventory
+++++++++++++++++++++++++++++++++

 This collects all the index used in incoming variables : `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_, $_COOKIE.

.. code-block:: php

   <?php
   
   // x is collected
   echo $_GET['x'];
   
   // y is collected, but no z. 
   echo $_POST['y']['z'];
   
   // a is not collected
   echo $_ENV['s'];
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/GPCIndex  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.0.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-heredoc:

.. _heredoc-delimiter-glossary:

Heredoc Delimiter Glossary
++++++++++++++++++++++++++

 List of all the delimiters used to build a Heredoc string. 

In the example below, ``EOD`` is the delimiter.

.. code-block:: php

   <?php
   
   $a = <<<EOD
   heredoc
   EOD;
   
   ?>


See also `Heredoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Heredoc   |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-hexadecimal:

.. _hexadecimal-glossary:

Hexadecimal Glossary
++++++++++++++++++++

 List of all the integer values using the hexadecimal format.

.. code-block:: php

   <?php
   
   $hexadecimal = 0x10;
   
   $anotherHexadecimal =0XAF;
   
   ?>


See also `Integer Syntax <https://www.php.net/manual/en/language.types.integer.php#language.types.integer.syntax>`_.

Specs
^^^^^
+--------------+------------------+
| Short name   | Type/Hexadecimal |
+--------------+------------------+
| Rulesets     | :ref:`Appinfo`   |
+--------------+------------------+
| Exakat since | 0.8.4            |
+--------------+------------------+
| PHP Version  | All              |
+--------------+------------------+
| Severity     | Minor            |
+--------------+------------------+
| Time To Fix  | Slow (1 hour)    |
+--------------+------------------+
| Precision    | High             |
+--------------+------------------+


.. _type-md5string:

.. _md5-strings:

Md5 Strings
+++++++++++

 List of all the MD5 values hard coded in the application.

MD5 values are detected as hexadecimal strings, of length 32. No attempt at recognizing the origin value is made, so any such strings, including dummy '11111111111111111111111111111111' are reported.

.. code-block:: php

   <?php
       // 32 
      $a = '0cc175b9c0f1b6a831c399e269771111';
   
   ?>


See also `MD5 <https://www.php.net/md5>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Md5String |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-norealcomparison:

.. _no-real-comparison:

No Real Comparison
++++++++++++++++++

 Avoid comparing decimal numbers with ==, ===, !==, !=. Real numbers have an error margin which is random, and makes it very difficult to match even if the compared value is a literal. 

PHP uses an internal representation in base 2 : any number difficult to represent with this base (like 0.1 or 0.7) will have a margin of error.

.. code-block:: php

   <?php
   
   $a = 1/7;
   $b = 2.0;
   
   // 7 * $a is a real, not an integer
   var_dump( 7 * $a === 1);
   
   // rounding error leads to wrong comparison
   var_dump( (0.1 + 0.7) * 10 == 8);
   // although
   var_dump( (0.1 + 0.7) * 10);
   // displays 8
   
   // precision formula to use with reals. Adapt 0.0001 to your precision needs
   var_dump( abs(((0.1 + 0.7) * 10) - 8) < 0.0001); 
   
   ?>


Use precision formulas with `abs() <https://www.php.net/abs>`_ to approximate values with a given precision, or avoid reals altogether. 

See also `Floating point numbers <https://www.php.net/manual/en/language.types.float.php#language.types.float>`_.


Suggestions
^^^^^^^^^^^

* Cast the values to integer before comparing
* Compute the difference, and keep it below a threshold
* Use the gmp or the bc extension to handle high precision numbers
* Change the 'precision' directive of PHP : ini_set('precision', 30) to make number larger
* Multiply by a power of ten, before casting to integer for the comparison
* Use floor(), ceil() or round() to compare the numbers, with a specific precision

Specs
^^^^^
+--------------+-----------------------------------------------------------------------------------------------------+
| Short name   | Type/NoRealComparison                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                      |
+--------------+-----------------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                                 |
+--------------+-----------------------------------------------------------------------------------------------------+
| Severity     | Major                                                                                               |
+--------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                     |
+--------------+-----------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                                |
+--------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP     | `no-real-comparison <https://github.com/dseguy/clearPHP/tree/master/rules/no-real-comparison.md>`__ |
+--------------+-----------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-magento-type-norealcomparison`, :ref:`case-spip-type-norealcomparison`                   |
+--------------+-----------------------------------------------------------------------------------------------------+


.. _type-nowdoc:

.. _nowdoc-delimiter-glossary:

Nowdoc Delimiter Glossary
+++++++++++++++++++++++++

 List of all the delimiters used to build a Nowdoc string. 

.. code-block:: php

   <?php
   $nowdoc = <<<'EOD'
   
   EOD;
   
   ?>


See also `Nowdoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc>`_ and `Heredoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Nowdoc    |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-octal:

.. _octal-glossary:

Octal Glossary
++++++++++++++

 List of all the integer values using the octal format : an integer starting with an initial 0. 

.. code-block:: php

   <?php
   
     $a = 1234; // decimal number
     $a = 0123; // octal number (equivalent to 83 decimal)
   
     // silently valid for PHP 5.x
     $a = 01283; // octal number (equivalent to 10 decimal)
   
   ?>


Putting an initial 0 is often innocuous, but in PHP, 0755 and 755 are not the same. The second is actually 1363 in octal, and will not provide the expected privileges.

See also `Integers <https://www.php.net/manual/en/language.types.integer.php>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Octal     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-onevariablestrings:

.. _one-variable-string:

One Variable String
+++++++++++++++++++

 These strings only contains one variable or property or array. 

.. code-block:: php

   <?php
   
   $a = 0;
   $b = "$a"; // This is a one-variable string
   
   // Better way to write the above
   $b = (string) $a;
   
   // Alternatives : 
   $b2 = "$a[1]"; // This is a one-variable string
   $b3 = "$a->b"; // This is a one-variable string
   $c = "d";
   $d = "D";
   $b4 = "{$$c}";
   $b5 = "{$a->foo()}";
   
   ?>


When the goal is to convert a variable to a string, it is recommended to use the type casting (string) operator : it is then clearer to understand the conversion. It is also marginally faster, though very little. 

See also `Strings <https://www.php.net/manual/en/language.types.string.php>`_ and `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Drop the surrounding string, keep the variable (or property...)
* Include in the string any concatenation that comes unconditionaly after or before
* Convert the variable to a string with the (type) operator

Specs
^^^^^
+--------------+---------------------------------------------------------------------------------------------+
| Short name   | Type/OneVariableStrings                                                                     |
+--------------+---------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                              |
+--------------+---------------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                         |
+--------------+---------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                       |
+--------------+---------------------------------------------------------------------------------------------+
| Time To Fix  | Instant (5 mins)                                                                            |
+--------------+---------------------------------------------------------------------------------------------+
| Precision    | High                                                                                        |
+--------------+---------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-tikiwiki-type-onevariablestrings`, :ref:`case-nextcloud-type-onevariablestrings` |
+--------------+---------------------------------------------------------------------------------------------+


.. _type-pack:

.. _pack-format-inventory:

Pack Format Inventory
+++++++++++++++++++++

 All format used in the code with `pack() <https://www.php.net/pack>`_ and `unpack() <https://www.php.net/unpack>`_.

.. code-block:: php

   <?php
   
   $binarydata = "\x04\x00\xa0\x00";
   $array = unpack("cn", $binarydata);
   $initial = pack("cn", ...$array);
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Pack      |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.5.0          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-path:

.. _path-lists:

Path lists
++++++++++

 List of all paths that were found in the code.

Path are identified with this regex : ``^(.*/)([^/]*)\.\w+$``. In particular, the directory delimiter is ``/`` : Windows delimiter ``\`` are not detected. 

.. code-block:: php

   <?php
   
   // the first argument is recognized as an URL
   fopen('/tmp/my/file.txt', 'r+');
   
   // the string argument  is recognized as an URL
   $source = 'https://www.other-example.com/';
   
   ?>


URL are ignored when the protocol is present in the literal : ``http://www.example.com`` is not mistaken with a file. 

See also `Dir predefined constants <https://www.php.net/manual/en/dir.constants.php>`_ and `Supported Protocols and Wrappers <https://www.php.net/manual/en/wrappers.php>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Type/Path       |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 1.5.8           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _type-printf:

.. _printf-format-inventory:

Printf Format Inventory
+++++++++++++++++++++++

 All format used in the code with `printf() <https://www.php.net/printf>`_, `vprintf() <https://www.php.net/vprintf>`_, `sprintf() <https://www.php.net/sprintf>`_, scanf() and `fscanf() <https://www.php.net/fscanf>`_.

.. code-block:: php

   <?php
   
   // Display a number with 2 digits
   echo printf("%'.2d\n", 123);
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Printf    |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.5.0          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-protocols:

.. _protocol-lists:

Protocol lists
++++++++++++++

 List of all protocols that were found in the code.

From the manual : PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as `fopen() <https://www.php.net/fopen>`_, `copy() <https://www.php.net/copy>`_, `file_exists() <https://www.php.net/file_exists>`_ and `filesize() <https://www.php.net/filesize>`_. 

.. code-block:: php

   <?php
   // Example from the PHP manual, with the glob:// wrapper
   
   // Loop over all *.php files in ext/spl/examples/ directory
   // and print the filename and its size
   $it = new DirectoryIterator(glob://ext/spl/examples/*.php);
   foreach($it as $f) {
       printf(%s: %.1FK\n, $f->getFilename(), $f->getSize()/1024);
   }
   ?>


See also `Supported Protocols and Wrappers <https://www.php.net/manual/en/wrappers.php>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Type/Protocols  |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 2.1.3           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Quick (30 mins) |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _type-regex:

.. _regex-inventory:

Regex Inventory
+++++++++++++++

 All regex used in the code. PHP has the PCRE extension that handles all regex : `preg_match() <https://www.php.net/preg_match>`_, `preg_replace() <https://www.php.net/preg_replace>`_, etc. 

.. code-block:: php

   <?php
   
   // PCRE regex used with preg_match
   preg_match('/[abc]+/', $string);
   
   // Mbstring regex, in the arabic range
   if(mb_ereg('[\x{0600}-\x{06FF}]', $text))
   
   ?>


mbstring regexes are also collected. Pre-PHP 7.0 POSIX regex are not listed. 

See also `ext/mbstring <http://www.php.net/manual/en/book.mbstring.php> `_ and `ext/pcre <http://www.php.net/manual/en/book.pcre.php> `_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Regex     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.12.14        |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-shellcommands:

.. _shell-commands:

Shell commands
++++++++++++++

 Shell commands, called from PHP. 

Shell commands are detected with the italic quotes, and using `shell_exec() <https://www.php.net/shell_exec>`_, `system() <https://www.php.net/system>`_, `exec() <https://www.php.net/exec>`_ and `proc_open() <https://www.php.net/proc_open>`_.

.. code-block:: php

   <?php
   
   // Shell command in a shell_exec() call
   shell_exec('ls -1');
   
   // Shell command with backtick operator
   `ls -1 $path`;
   
   ?>

Specs
^^^^^
+--------------+--------------------+
| Short name   | Type/Shellcommands |
+--------------+--------------------+
| Rulesets     | :ref:`Appinfo`     |
+--------------+--------------------+
| Exakat since | 1.9.9              |
+--------------+--------------------+
| PHP Version  | All                |
+--------------+--------------------+
| Severity     | Minor              |
+--------------+--------------------+
| Time To Fix  | Slow (1 hour)      |
+--------------+--------------------+
| Precision    | High               |
+--------------+--------------------+


.. _type-shouldtypecast:

.. _should-typecast:

Should Typecast
+++++++++++++++

 When typecasting, it is better to use the casting operator, such as ``(int)`` or ``(bool)``.

Functions such as `intval() <https://www.php.net/intval>`_ or `settype() <https://www.php.net/settype>`_ are always slower.

.. code-block:: php

   <?php
   
   // Fast version
   $int = (int) $X;
   
   // Slow version
   $int = intval($X);
   
   // Convert to base 8 : can't use (int) for that
   $int = intval($X, 8);
   
   
   ?>


This is a micro-optimisation, although such conversion may be use multiple time, leading to a larger performance increase.  

Note that `intval() <https://www.php.net/intval>`_ may also be used to convert an integer to another base.


Suggestions
^^^^^^^^^^^

* Use a typecast, instead of a functioncall.

Specs
^^^^^
+--------------+------------------------------------------------------------------------------------+
| Short name   | Type/ShouldTypecast                                                                |
+--------------+------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                     |
+--------------+------------------------------------------------------------------------------------+
| Exakat since | 0.8.4                                                                              |
+--------------+------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                |
+--------------+------------------------------------------------------------------------------------+
| Severity     | Minor                                                                              |
+--------------+------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                    |
+--------------+------------------------------------------------------------------------------------+
| Precision    | High                                                                               |
+--------------+------------------------------------------------------------------------------------+
| Examples     | :ref:`case-xataface-type-shouldtypecast`, :ref:`case-openconf-type-shouldtypecast` |
+--------------+------------------------------------------------------------------------------------+


.. _type-silentlycastinteger:

.. _silently-cast-integer:

Silently Cast Integer
+++++++++++++++++++++

 Those are integer literals that are cast to a float when running PHP. They are too big for the current PHP version, and PHP resorts to cast them into a float, which has a much larger capacity but a lower precision.

Compare your literals to ``PHP_MAX_INT`` (typically ``9223372036854775807``) and ``PHP_MIN_INT`` (typically ``-9223372036854775808``).
This applies to binary (``0b10101``...), octal (``0123123``...) and hexadecimal (``0xfffff``...) too. 

.. code-block:: php

   <?php
   
   echo 0b1010101101010110101011010101011010101011010101011010101011010111;
   //6173123008118052203
   echo 0b10101011010101101010110101010110101010110101010110101010110101111;
   //1.2346246016236E+19
   
   echo 0123123123123123123123;
   //1498121094048818771
   echo 01231231231231231231231;
   //1.1984968752391E+19
   
   echo 0x12309812311230;
   //5119979279159856
   echo 0x12309812311230fed;
   //2.0971435127439E+19
   
   echo 9223372036854775807; //PHP_MAX_INT
   //9223372036854775807
   echo 9223372036854775808;
   9.2233720368548E+18
   
   ?>


See also `Integer overflow <https://www.php.net/manual/en/language.types.integer.php#language.types.integer.overflow>`_.



Suggestions
^^^^^^^^^^^

* Make sure hexadecimal numbers have the right number of digits : generally, it is 15, but it may depends on your PHP version.

Specs
^^^^^
+--------------+------------------------------------------------+
| Short name   | Type/SilentlyCastInteger                       |
+--------------+------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                 |
+--------------+------------------------------------------------+
| Exakat since | 0.8.4                                          |
+--------------+------------------------------------------------+
| PHP Version  | All                                            |
+--------------+------------------------------------------------+
| Severity     | Minor                                          |
+--------------+------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                |
+--------------+------------------------------------------------+
| Precision    | High                                           |
+--------------+------------------------------------------------+
| Examples     | :ref:`case-mediawiki-type-silentlycastinteger` |
+--------------+------------------------------------------------+


.. _type-sql:

.. _sql-queries:

SQL queries
+++++++++++

 SQL queries, detected in literal strings. 

SQL queries are detected with keywords, inside literals or concatenations. 

.. code-block:: php

   <?php
   
   // SQL in a string
   $query = 'SELECT name FROM users WHERE id = 1';
   
   // SQL in a concatenation
   $query = 'SELECT name FROM '.$table_users.' WHERE id = 1';
   
   // SQL in a Heredoc
   $query = <<<SQL
   SELECT name FROM $table_users WHERE id = 1
   SQL;
   
   ?>

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Sql       |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.10.1         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _type-stringwithstrangespace:

.. _strings-with-strange-space:

Strings With Strange Space
++++++++++++++++++++++++++

 An invisible space may be mistaken for a normal space. 

However, PHP does straight comparisons, and may fail at recognizing. This analysis reports when it finds such strange spaces inside strings.

PHP doesn't mistake space and tables for whitespace when tokenizing the code.

This analysis doesn't report Unicode Codepoint Notation : those are visible in the code.

.. code-block:: php

   <?php
   
   // PHP 7 notation, 
   $a = \u{3000};
   $b = ;
   
   // Displays false
   var_dump($a === $b);
   
   ?>


See also `Unicode spaces <https://www.cs.tut.fi/~jkorpela/chars/spaces.html>`_, and `disallow irregular whitespace (no-irregular-whitespace) <http://eslint.org/docs/rules/no-irregular-whitespace>`_.


Suggestions
^^^^^^^^^^^

* Replace the odd spaces with a normal space
* If unsecable spaces are important for presentation, add them at the templating level.

Specs
^^^^^
+--------------+-------------------------------------------------------------------------------------------------+
| Short name   | Type/StringWithStrangeSpace                                                                     |
+--------------+-------------------------------------------------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                                                                  |
+--------------+-------------------------------------------------------------------------------------------------+
| Exakat since | 0.11.0                                                                                          |
+--------------+-------------------------------------------------------------------------------------------------+
| PHP Version  | All                                                                                             |
+--------------+-------------------------------------------------------------------------------------------------+
| Severity     | Minor                                                                                           |
+--------------+-------------------------------------------------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                                                                 |
+--------------+-------------------------------------------------------------------------------------------------+
| Precision    | High                                                                                            |
+--------------+-------------------------------------------------------------------------------------------------+
| Examples     | :ref:`case-openemr-type-stringwithstrangespace`, :ref:`case-thelia-type-stringwithstrangespace` |
+--------------+-------------------------------------------------------------------------------------------------+


.. _type-url:

.. _url-list:

URL List
++++++++

 List of all the URL addresses that were found in the code.

.. code-block:: php

   <?php
   
   // the first argument is recognized as an URL
   ftp_connect('http://www.example.com/', $port, $timeout);
   
   // the string argument  is recognized as an URL
   $source = 'https://www.other-example.com/';
   
   ?>


See also `Uniform Resource Identifier <https://en.wikipedia.org/wiki/Uniform_Resource_Identifier>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+--------------+----------------+
| Short name   | Type/Url       |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.8.4          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _typehints-couldbearray:

.. _could-be-array-typehint:

Could Be Array Typehint
+++++++++++++++++++++++

 This rule spots arguments, properties or return values that may be labeled with the ``array`` scalar typehint. 

.. code-block:: php

   <?php
   
   // $arg is used as an array in this function, so it may be typed : array
   functions foo($arg) {
   
       // the returned value is always an array, so this function might be typed as : array
       return array($arg[3]);
   }
   
   ?>


See also `Type declarations  <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.



Suggestions
^^^^^^^^^^^

* Add `array` typehint to the code.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Typehints/CouldBeArray |
+--------------+------------------------+
| Rulesets     | none                   |
+--------------+------------------------+
| Exakat since | 2.1.2                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _typehints-couldbeboolean:

.. _could-be-boolean:

Could Be Boolean
++++++++++++++++

 Mark arguments and return types that can be set to boolean.

.. code-block:: php

   <?php
   
   // Accept a boolean as input 
   function foo($b) {
       // Returns a boolean
       return $b === true;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `bool` typehint to the code.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Typehints/CouldBeBoolean |
+--------------+--------------------------+
| Rulesets     | none                     |
+--------------+--------------------------+
| Exakat since | 2.1.2                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Major                    |
+--------------+--------------------------+
| Time To Fix  | Quick (30 mins)          |
+--------------+--------------------------+
| Precision    | High                     |
+--------------+--------------------------+


.. _typehints-couldbecit:

.. _could-be-cit:

Could Be CIT
++++++++++++

 Mark arguments and return types that can be set to a class, interface definition.

.. code-block:: php

   <?php
   
   // Accept an object as input 
   function foo($b) {
       // Returns new object
       return new ($b->classname);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add the class or interface typehint to the code.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Typehints/CouldBeCIT |
+--------------+----------------------+
| Rulesets     | none                 |
+--------------+----------------------+
| Exakat since | 2.1.2                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Quick (30 mins)      |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _typehints-couldbefloat:

.. _could-be-float:

Could Be Float
++++++++++++++

 Mark arguments, properties and return types that can be set to ``float``.

.. code-block:: php

   <?php
   
   // Accept an int as input 
   function foo($b) {
       // Returns a float (cubic root of $b);
       return pow($b, 1 / 3);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `float` typehint to the code.

Specs
^^^^^
+--------------+------------------------+
| Short name   | Typehints/CouldBeFloat |
+--------------+------------------------+
| Rulesets     | none                   |
+--------------+------------------------+
| Exakat since | 2.1.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Major                  |
+--------------+------------------------+
| Time To Fix  | Quick (30 mins)        |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _typehints-couldbeint:

.. _could-be-integer:

Could Be Integer
++++++++++++++++

 Mark arguments, properties and return types that can be set to ``int``.

.. code-block:: php

   <?php
   
   // Accept an int as input 
   function foo($b) {
       // Returns an int
       return $b + 8;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `int` typehint to the code.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Typehints/CouldBeInt |
+--------------+----------------------+
| Rulesets     | none                 |
+--------------+----------------------+
| Exakat since | 2.1.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Major                |
+--------------+----------------------+
| Time To Fix  | Quick (30 mins)      |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _typehints-couldbenull:

.. _could-be-null:

Could Be Null
+++++++++++++

 Mark arguments and return types that can be null.

.. code-block:: php

   <?php
   
   // Accept null as input, when used as third argument of file_get_contents
   function foo($b) {
       $s = file_get_contents(URL, false, $b);
   
       // Returns a string
       return shell_exec($s);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `null` typehint to the code (PHP 8.0+).
* Add `?` typehint to the code.

Specs
^^^^^
+--------------+-----------------------+
| Short name   | Typehints/CouldBeNull |
+--------------+-----------------------+
| Rulesets     | none                  |
+--------------+-----------------------+
| Exakat since | 2.1.2                 |
+--------------+-----------------------+
| PHP Version  | All                   |
+--------------+-----------------------+
| Severity     | Major                 |
+--------------+-----------------------+
| Time To Fix  | Quick (30 mins)       |
+--------------+-----------------------+
| Precision    | High                  |
+--------------+-----------------------+


.. _typehints-couldbestring:

.. _could-be-string:

Could Be String
+++++++++++++++

 Mark arguments and return types that can be set to string.

.. code-block:: php

   <?php
   
   // Accept a string as input 
   function foo($a) {
       // Returns a string
       return $a . 'string';
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Choose the string typehint, and add it to the code.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Typehints/CouldBeString |
+--------------+-------------------------+
| Rulesets     | none                    |
+--------------+-------------------------+
| Exakat since | 2.1.2                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Major                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _typehints-missingreturntype:

.. _missing-some-returntype:

Missing Some Returntype
+++++++++++++++++++++++

 The specified typehints are not compatible with the returned values. 

The code of the method may return other types, which are not specified and will lead to a PHP fatal error. It is the case for insufficient typehints, when a typehint is missing, or inconsistent typehints, when the method returns varied types. 

.. code-block:: php

   <?php
   
   // correct return typehint
   function fooSN() : ?string  {
       return shell_exec('ls -hla');
   }
   
   // insufficient return typehint
   // shell_exec() may return null or string. Here, only string in specified for fooS, and that may lead to a Fatal error
   function fooS() : string  {
       return shell_exec('ls -hla');
   }
   
   // inconsistent return typehint
   function bar() : int {
       return rand(0, 10) ? 1 : b;
   }
   
   ?>


The analysis reports a method when it finds other return types than the one expected. In the case of multiple typehints, as for the last example, the PHP code may require an upgrade to PHP 8.0.



Suggestions
^^^^^^^^^^^

* Update the typehint to accept more types
* Update the code of the method to fit the expected returntype

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Typehints/MissingReturntype |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 2.1.7                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | Very high                   |
+--------------+-----------------------------+


.. _variables-references:

.. _variable-references:

Variable References
+++++++++++++++++++

 Variables that are references. 

.. code-block:: php

   <?php
   
   $a = '1'; // not a reference
   $b = &$a; // a reference
   
   ?>


See also `References <https://www.php.net/references>`_.

Specs
^^^^^
+--------------+----------------------+
| Short name   | Variables/References |
+--------------+----------------------+
| Rulesets     | :ref:`Appinfo`       |
+--------------+----------------------+
| Exakat since | 0.8.4                |
+--------------+----------------------+
| PHP Version  | All                  |
+--------------+----------------------+
| Severity     | Minor                |
+--------------+----------------------+
| Time To Fix  | Slow (1 hour)        |
+--------------+----------------------+
| Precision    | High                 |
+--------------+----------------------+


.. _variables-selftransform:

.. _self-transforming-variables:

Self-Transforming Variables
+++++++++++++++++++++++++++

 Variables that are assigned to themselves after transformation. 

.. code-block:: php

   <?php
   
   $s = strtolower($s);
   
   // filtering one element AND dropping all that not 1
   $a = array_filter('foo', $a[1]);
   
   $o->m = foo($o->m);
   
   ?>




Suggestions
^^^^^^^^^^^

* Try to use new variables to hold new values.

Specs
^^^^^
+--------------+-------------------------+
| Short name   | Variables/SelfTransform |
+--------------+-------------------------+
| Rulesets     | none                    |
+--------------+-------------------------+
| Exakat since | 1.7.0                   |
+--------------+-------------------------+
| PHP Version  | All                     |
+--------------+-------------------------+
| Severity     | Minor                   |
+--------------+-------------------------+
| Time To Fix  | Quick (30 mins)         |
+--------------+-------------------------+
| Precision    | High                    |
+--------------+-------------------------+


.. _variables-staticvariables:

.. _static-variables:

Static Variables
++++++++++++++++

 In PHP, variables may be `static <https://www.php.net/manual/en/language.oop5.static.php>`_. They will survive after the function execution end, and will be available at the next function run. They are distinct from globals, which are available application wide, and from `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties, which are tied to a class of objects. 

.. code-block:: php

   <?php
   
   function foo() {
       // static variable
       static $count = 0;
       
       echo ++$count;
   }
   
   class bar {
       // This is not a static variable : 
       // it is a static property
       static $property = 1;
   }
   
   ?>

Specs
^^^^^
+--------------+---------------------------+
| Short name   | Variables/StaticVariables |
+--------------+---------------------------+
| Rulesets     | :ref:`Appinfo`            |
+--------------+---------------------------+
| Exakat since | 0.8.4                     |
+--------------+---------------------------+
| PHP Version  | All                       |
+--------------+---------------------------+
| Severity     | Minor                     |
+--------------+---------------------------+
| Time To Fix  | Slow (1 hour)             |
+--------------+---------------------------+
| Precision    | High                      |
+--------------+---------------------------+


.. _variables-uncommonenvvar:

.. _environment-variables:

Environment Variables
+++++++++++++++++++++

 Environment variables are used to interact with the hosting system. 

They often provides configuration parameter that are set by the host of the application to be used. 
That way, information is not hardcoded in the application, and may be changed at production.

.. code-block:: php

   <?php
   
   //ENVIRONMENT set the production context
   if (getenv('ENVIRONMENT') === 'Production') {
       $sshKey = getenv('HOST_KEY');
   } elseif (getenv('ENVIRONMENT') === 'Developper') {
       $sshKey = 'NO KEY';
   } else {
       header('No website here.');
       die();
   }
   
   ?>


See also `$_ENV <https://www.php.net/reserved.variables.environment.php>`_.

Specs
^^^^^
+--------------+--------------------------+
| Short name   | Variables/UncommonEnvVar |
+--------------+--------------------------+
| Rulesets     | :ref:`Appinfo`           |
+--------------+--------------------------+
| Exakat since | 1.0.5                    |
+--------------+--------------------------+
| PHP Version  | All                      |
+--------------+--------------------------+
| Severity     | Minor                    |
+--------------+--------------------------+
| Time To Fix  | Slow (1 hour)            |
+--------------+--------------------------+
| Precision    | Medium                   |
+--------------+--------------------------+


.. _variables-undefinedvariable:

.. _undefined-variable:

Undefined Variable
++++++++++++++++++

 Variable that is used before any creation. 

It is recommended to use a default value for every variable used. When not specified, the default value is set to ``NULL`` by PHP.

.. code-block:: php

   <?php
   
   // Adapted from the PHP manual
   $var = 'Bob';
   $Var = 'Joe';
   // The following line may emit a warning : Undefined variable: $undefined
   echo $var, $Var, $undefined;      // outputs Bob, Joe,
   
   
   ?>


Variable may be created in various ways : assignation, arguments, foreach blind variables, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and global variables.

This analysis doesn't handle dynamic variables, such as ``$$x``. It also doesn't handle variables outside a method or function.

See also `Variable basics <https://www.php.net/manual/en/language.variables.basics.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the expression that is using the undefined variable
* Fix the variable name
* Define the variable by assigning a value to it, before using it

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Variables/UndefinedVariable |
+--------------+-----------------------------+
| Rulesets     | :ref:`Analyze`              |
+--------------+-----------------------------+
| Exakat since | 1.4.2                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Quick (30 mins)             |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _variables-variablelong:

.. _variables-with-long-names:

Variables With Long Names
+++++++++++++++++++++++++

 VariablesLong collect all variables with more than 20 characters longs.

.. code-block:: php

   <?php
   
   // Quite a long variable name
   $There_is nothing_wrong_with_long_variable_names_They_tend_to_be_rare_and_that_make_them_noteworthy = 1;
   
   ?>


There is nothing wrong with long variable names. They tend to be rare, and that make them noteworthy.

See also `Basics <https://www.php.net/manual/en/language.variables.basics.php>`_.

+----------------+---------+---------+----------------------------------------------------------------+
| Name           | Default | Type    | Description                                                    |
+----------------+---------+---------+----------------------------------------------------------------+
| variableLength | 20      | integer | Minimum size of a long variable name, including the initial $. |
+----------------+---------+---------+----------------------------------------------------------------+



Specs
^^^^^
+--------------+------------------------+
| Short name   | Variables/VariableLong |
+--------------+------------------------+
| Rulesets     | :ref:`Appinfo`         |
+--------------+------------------------+
| Exakat since | 0.8.4                  |
+--------------+------------------------+
| PHP Version  | All                    |
+--------------+------------------------+
| Severity     | Minor                  |
+--------------+------------------------+
| Time To Fix  | Slow (1 hour)          |
+--------------+------------------------+
| Precision    | High                   |
+--------------+------------------------+


.. _variables-variableusedoncebycontext:

.. _used-once-variables-(in-scope):

Used Once Variables (In Scope)
++++++++++++++++++++++++++++++

 This is the list of used once variables, scope by scope. Those variables are used once in a function, a method, a class or a namespace. In any case, this means the variable is read or written, while it should be used at least twice. 

.. code-block:: php

   <?php
   
   function foo() {
       // The variables below never appear twice, inside foo()
       $writtenOnce = 1;
   
       foo($readOnce);
       // They do appear again in other functions, or in global space. 
   }
   
   function bar() {
       $writtenOnce = 1;
       foo($readOnce);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the variable
* Fix the name of variable
* Use the variable a second time in the current scope, at least

Specs
^^^^^
+--------------+----------------------------------------------------------+
| Short name   | Variables/VariableUsedOnceByContext                      |
+--------------+----------------------------------------------------------+
| Rulesets     | :ref:`Analyze`                                           |
+--------------+----------------------------------------------------------+
| Exakat since | 0.8.4                                                    |
+--------------+----------------------------------------------------------+
| PHP Version  | All                                                      |
+--------------+----------------------------------------------------------+
| Severity     | Minor                                                    |
+--------------+----------------------------------------------------------+
| Time To Fix  | Quick (30 mins)                                          |
+--------------+----------------------------------------------------------+
| Precision    | High                                                     |
+--------------+----------------------------------------------------------+
| Examples     | :ref:`case-shopware-variables-variableusedoncebycontext` |
+--------------+----------------------------------------------------------+


.. _variables-variablevariables:

.. _variable-variables:

Variable Variables
++++++++++++++++++

 A variable variable takes the value of a variable and treats that as the name of a variable.

PHP has the ability to dynamically use a variable. 

.. code-block:: php

   <?php
   
   // Normal variable
   $a = 'b';
   $b = 'c';
   
   // Variable variable
   $d = $$b;
   
   // Variable variable in string
   $d = "$\{$b\}";
   
   ?>


They are also called 'dynamic variable'.

See also `Variable variables <https://www.php.net/manual/en/language.variables.variable.php>`_.

Specs
^^^^^
+--------------+-----------------------------+
| Short name   | Variables/VariableVariables |
+--------------+-----------------------------+
| Rulesets     | :ref:`Appinfo`              |
+--------------+-----------------------------+
| Exakat since | 0.8.4                       |
+--------------+-----------------------------+
| PHP Version  | All                         |
+--------------+-----------------------------+
| Severity     | Minor                       |
+--------------+-----------------------------+
| Time To Fix  | Slow (1 hour)               |
+--------------+-----------------------------+
| Precision    | High                        |
+--------------+-----------------------------+


.. _vendors-codeigniter:

.. _codeigniter-usage:

Codeigniter usage
+++++++++++++++++

 This analysis reports usage of the Codeigniter framework.

.. code-block:: php

   <?php
   
   // A code igniter controller
   class Blog extends CI_Controller {
   
           public function index()
           {
                   echo 'Hello World!';
           }
   }
   
   ?>


See also `Codeigniter <https://codeigniter.com/>`_.

Specs
^^^^^
+--------------+---------------------+
| Short name   | Vendors/Codeigniter |
+--------------+---------------------+
| Rulesets     | :ref:`Appinfo`      |
+--------------+---------------------+
| Exakat since | 0.11.8              |
+--------------+---------------------+
| PHP Version  | All                 |
+--------------+---------------------+
| Severity     | Minor               |
+--------------+---------------------+
| Time To Fix  | Slow (1 hour)       |
+--------------+---------------------+
| Precision    | High                |
+--------------+---------------------+


.. _vendors-concrete5:

.. _concrete-usage:

Concrete usage
++++++++++++++

 This analysis reports usage of the Concrete 5 framework.

.. code-block:: php

   <?php
   namespace Application\Controller\PageType;
   
   use Concrete\Core\Page\Controller\PageTypeController;
   
   class BlogEntry extends PageTypeController
   {
   
       public function view()
       {
       }
   }
   ?>


See also `Concrete 5 <https://www.concrete5.org/>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Vendors/Concrete5 |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 1.9.9             |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _vendors-drupal:

.. _drupal-usage:

Drupal Usage
++++++++++++

 This analysis reports usage of the Drupal CMS. The report is based on the usage of Drupal namespace.

.. code-block:: php

   <?php
   
   namespace Drupal\example\Controller;
   
   use Drupal\Core\Controller\ControllerBase;
   
   /**
    * An example controller.
    */
   class ExampleController extends ControllerBase {
   
     /**
      * {@inheritdoc}
      */
     public function content() {
       $build = array(
         '#type' => 'markup',
         '#markup' => t('Hello World!'),
       );
       return $build;
     }
   
   }
   
   ?>


See also `Drupal <http://www.drupal.org/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Drupal |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.0.3          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _vendors-ez:

.. _ez-cms-usage:

Ez cms usage
++++++++++++

 This analysis reports usage of the Ez cms.

.. code-block:: php

   <?php
   namespace My\Bundle\With\Controller;
   
   use eZ\Bundle\EzPublishCoreBundle\Controller;
   use Symfony\Component\HttpFoundation\Request;
   
   class DemoController extends Controller {
       public function demoCreateContentAction(Request $request) {
           //
       }
   }
   
   ?>


See also `Ez <https://ez.no/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Ez     |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.8         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _vendors-fuel:

.. _fuelphp-usage:

FuelPHP Usage
+++++++++++++

 This analysis reports usage of the Fuel PHP Framework. The report is based on the usage of Fuel namespace.

.. code-block:: php

   <?php
   // file located in APPPATH/classes/presenter.php
   class Presenter extends \Fuel\Core\Presenter
   {
       // namespace prefix
       protected static $ns_prefix = 'Presenter\';
   }
   ?>


See also `FuelPHP <https://fuelphp.com>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Fuel   |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.0.3          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _vendors-joomla:

.. _joomla-usage:

Joomla usage
++++++++++++

 This analysis reports usage of the Joomla CMS.

.. code-block:: php

   <?php
   
   // no direct access
   defined('_JEXEC') or die('Restricted access');
   
   jimport('joomla.application.component.controller');
   JLoader::import('KBIntegrator', JPATH_PLUGINS . DS . 'kbi');
   
   class MyController extends JController {
   	function display($message) {
           echo $message;
       }
   }
   
   ?>


See also `Joomla <http://www.joomla.org/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Joomla |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.8         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _vendors-laravel:

.. _laravel-usage:

Laravel usage
+++++++++++++

 This analysis reports usage of the Laravel framework.

.. code-block:: php

   <?php
   
   namespace App\Http\Controllers;
   
   use App\User;
   use App\Http\Controllers\Controller;
   
   class UserController extends Controller
   {
       /**
        * Show the profile for the given user.
        *
        * @param  int  $id
        * @return Response
        */
       public function show($id)
       {
           return view('user.profile', ['user' => User::findOrFail($id)]);
       }
   }
   
   ?>


See also `Laravel <http://www.lavarel.com/>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Vendors/Laravel |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.11.8          |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _vendors-phalcon:

.. _phalcon-usage:

Phalcon Usage
+++++++++++++

 This analysis reports usage of the Phalcon Framework. The report is based on the usage of Phalcon namespace, which may be provided by PHP code inclusion or the PHP extension.

.. code-block:: php

   <?php
   
   use Phalcon\Mvc\Application;
   
   // Register autoloaders
   
   // Register services
   
   // Handle the request
   $application = new Application($di);
   
   try {
       $response = $application->handle();
   
       $response->send();
   } catch (\Exception $e) {
       echo 'Exception: ', $e->getMessage();
   }
   
   ?>


See also `Phalcon <https://phalconphp.com/>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Vendors/Phalcon |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 1.0.3           |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _vendors-symfony:

.. _symfony-usage:

Symfony usage
+++++++++++++

 This analysis reports usage of the Symfony framework.

.. code-block:: php

   <?php
   
   // src/AppBundle/Controller/LuckyController.php
   namespace AppBundle\Controller;
   
   use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
   use Symfony\Component\HttpFoundation\Response;
   
   class LuckyController
   {
       /**
        * @Route(/lucky/number)
        */
       public function numberAction()
       {
           $number = mt_rand(0, 100);
   
           return new Response(
               '<html><body>Lucky number: '.$number.'</body></html>'
           );
       }
   }
   
   ?>


See also `Symfony <http://www.symfony.com/>`_.

Specs
^^^^^
+--------------+-----------------+
| Short name   | Vendors/Symfony |
+--------------+-----------------+
| Rulesets     | :ref:`Appinfo`  |
+--------------+-----------------+
| Exakat since | 0.11.8          |
+--------------+-----------------+
| PHP Version  | All             |
+--------------+-----------------+
| Severity     | Minor           |
+--------------+-----------------+
| Time To Fix  | Slow (1 hour)   |
+--------------+-----------------+
| Precision    | High            |
+--------------+-----------------+


.. _vendors-typo3:

.. _typo-3-usage:

Typo 3 usage
++++++++++++

 This analysis reports usage of the Typo 3 CMS.

.. code-block:: php

   <?php
   
   namespace MyVendor\SjrOffers\Controller;
   
   use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
   
   class OfferController extends ActionController
   {
      // Action methods will be following here
   }
   ?>


See also `Typo3 <https://typo3.org/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Typo3  |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 1.9.9          |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+


.. _vendors-wordpress:

.. _wordpress-usage:

Wordpress usage
+++++++++++++++

 This analysis reports usage of the Wordpress platform.

.. code-block:: php

   <?php
   
   //Usage of the WP_http class from Wordpress
   $rags = array(
      'x' => '1',
      'y' => '2'
   );
   $url = 'http://www.example.com/';
   $request = new WP_Http();
   $result = $request->request( $url, array( 'method' => 'POST', 'body' => $body) );
   
   ?>


See also `Wordpress <https://www.wordpress.org/>`_.

Specs
^^^^^
+--------------+-------------------+
| Short name   | Vendors/Wordpress |
+--------------+-------------------+
| Rulesets     | :ref:`Appinfo`    |
+--------------+-------------------+
| Exakat since | 0.11.8            |
+--------------+-------------------+
| PHP Version  | All               |
+--------------+-------------------+
| Severity     | Minor             |
+--------------+-------------------+
| Time To Fix  | Slow (1 hour)     |
+--------------+-------------------+
| Precision    | High              |
+--------------+-------------------+


.. _vendors-yii:

.. _yii-usage:

Yii usage
+++++++++

 This analysis reports usage of the Yii framework.

.. code-block:: php

   <?php
   
   // A Yii controller
   class SiteController extends CController
   {
       public function actionIndex()
       {
           // ...
       }
    
       public function actionContact()
       {
           // ...
       }
   }
   
   ?>


See also `Yii <http://www.yiiframework.com/>`_.

Specs
^^^^^
+--------------+----------------+
| Short name   | Vendors/Yii    |
+--------------+----------------+
| Rulesets     | :ref:`Appinfo` |
+--------------+----------------+
| Exakat since | 0.11.8         |
+--------------+----------------+
| PHP Version  | All            |
+--------------+----------------+
| Severity     | Minor          |
+--------------+----------------+
| Time To Fix  | Slow (1 hour)  |
+--------------+----------------+
| Precision    | High           |
+--------------+----------------+





Directory by Exakat version
-----------------------------

List of analyzers, by version of introduction, newest to oldest. In parenthesis, the first element is the analyzer name, used with 'analyze -P' command, and the seconds, if any, are the ruleset, used with the -T option. Rulesets are separated by commas, as the same analysis may be used in several rulesets.


* 2.2.0

  * :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`
  * :ref:`Final Private Methods <final-private-methods>`
  * :ref:`PHP 80 Named Parameter Variadic <php-80-named-parameter-variadic>`
  * :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

* 2.1.9

  * :ref:`Collect Use Counts <collect-use-counts>`
  * :ref:`Negative Start Index In Array <negative-start-index-in-array>`
  * :ref:`Nullable With Constant <nullable-with-constant>`
  * :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`
  * :ref:`Unsupported Types With Operators <unsupported-types-with-operators>`

* 2.1.8

  * :ref:`$php_errormsg Usage <$php\_errormsg-usage>`
  * :ref:`Cast Unset Usage <cast-unset-usage>`
  * :ref:`Collect Atom Counts <collect-atom-counts>`
  * :ref:`Collect Classes Dependencies <collect-classes-dependencies>`
  * :ref:`Collect Files Dependencies <collect-files-dependencies>`
  * :ref:`Collect Php Structures <collect-php-structures>`
  * :ref:`Function With Dynamic Code <function-with-dynamic-code>`
  * :ref:`Mismatch Parameter Name <mismatch-parameter-name>`

* 2.1.7

  * :ref:`Collect Class Traits Counts <collect-class-traits-counts>`
  * :ref:`Collect Native Calls Per Expressions <collect-native-calls-per-expressions>`
  * :ref:`Collect Readability <collect-readability>`
  * :ref:`Collect Variables <collect-variables>`
  * :ref:`Dump/CollectDefinitionsStats <dump-collectdefinitionsstats>`
  * :ref:`Dump/CollectGlobalVariables <dump-collectglobalvariables>`
  * :ref:`Missing Some Returntype <missing-some-returntype>`

* 2.1.6

  * :ref:`Unknown Parameter Name <unknown-parameter-name>`
  * :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`
  * :ref:`Use NullSafe Operator <use-nullsafe-operator>`
  * :ref:`Use PHP Attributes <use-php-attributes>`

* 2.1.5

  * :ref:`Collect Parameter Names <collect-parameter-names>`
  * :ref:`Dump/CollectClassChanges <dump-collectclasschanges>`
  * :ref:`Dump/FossilizedMethods <dump-fossilizedmethods>`
  * :ref:`Wrong Type For Native PHP Function <wrong-type-for-native-php-function>`

* 2.1.4

  * :ref:`Call Order <call-order>`
  * :ref:`Could Be Float <could-be-float>`
  * :ref:`Could Be Integer <could-be-integer>`
  * :ref:`Uses PHP 8 Match() <uses-php-8-match()>`

* 2.1.3

  * :ref:`Protocol lists <protocol-lists>`

* 2.1.2

  * :ref:`Collect Class Constant Counts <collect-class-constant-counts>`
  * :ref:`Collect Local Variable Counts <collect-local-variable-counts>`
  * :ref:`Collect Method Counts <collect-method-counts>`
  * :ref:`Collect Property Counts <collect-property-counts>`
  * :ref:`Could Be Array Typehint <could-be-array-typehint>`
  * :ref:`Could Be Boolean <could-be-boolean>`
  * :ref:`Could Be CIT <could-be-cit>`
  * :ref:`Could Be Null <could-be-null>`
  * :ref:`Could Be String <could-be-string>`

* 2.1.1

  * :ref:`Throw Was An Expression <throw-was-an-expression>`

* 2.1.0

  * :ref:`Signature Trailing Comma <signature-trailing-comma>`

* 2.0.9

  * :ref:`Php 8.0 Only TypeHints <php-8.0-only-typehints>`
  * :ref:`Union Typehint <union-typehint>`
  * :ref:`Wrong Typed Property Default <wrong-typed-property-default>`

* 2.0.8

  * :ref:`New Functions In PHP 8.0 <new-functions-in-php-8.0>`
  * :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`

* 2.0.7

  * :ref:`Constant Order <constant-order>`

* 2.0.6

  * :ref:`Links Between Parameter And Argument <links-between-parameter-and-argument>`
  * :ref:`Not Equal Is Not !== <not-equal-is-not-!==>`

* 2.0.3

  * :ref:`Collect Class Children Count <collect-class-children-count>`
  * :ref:`Collect Class Depth <collect-class-depth>`
  * :ref:`Collect Class Interface Counts <collect-class-interface-counts>`

* 2.0.2

  * :ref:`Dump/Inclusions <dump-inclusions>`
  * :ref:`New Order <new-order>`
  * :ref:`Typehint Order <typehint-order>`

* 1.9.9

  * :ref:`Collect Mbstring Encodings <collect-mbstring-encodings>`
  * :ref:`Concrete usage <concrete-usage>`
  * :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`
  * :ref:`Immutable Signature <immutable-signature>`
  * :ref:`Is_A() With String <is\_a()-with-string>`
  * :ref:`Mbstring Third Arg <mbstring-third-arg>`
  * :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`
  * :ref:`Merge If Then <merge-if-then>`
  * :ref:`Shell commands <shell-commands>`
  * :ref:`Typehinting Stats <typehinting-stats>`
  * :ref:`Typo 3 usage <typo-3-usage>`
  * :ref:`Wrong Type With Call <wrong-type-with-call>`

* 1.9.8

  * :ref:`Cant Implement Traversable <cant-implement-traversable>`

* 1.9.7

  * :ref:`Foreach() Favorite <foreach()-favorite>`
  * :ref:`Make Functioncall With Reference <make-functioncall-with-reference>`

* 1.9.6

  * :ref:`Collect Parameter Counts <collect-parameter-counts>`
  * :ref:`Dump/DereferencingLevels <dump-dereferencinglevels>`

* 1.9.5

  * :ref:`Collect Literals <collect-literals>`
  * :ref:`Environment Variable Usage <environment-variable-usage>`
  * :ref:`Interfaces Is Not Implemented <interfaces-is-not-implemented>`
  * :ref:`No Literal For Reference <no-literal-for-reference>`
  * :ref:`Use array_slice() <use-array\_slice()>`

* 1.9.4

  * :ref:`Coalesce And Concat <coalesce-and-concat>`
  * :ref:`Cyclomatic Complexity <cyclomatic-complexity>`
  * :ref:`Nested Ternary Without Parenthesis <nested-ternary-without-parenthesis>`
  * :ref:`Should Use Explode Args <should-use-explode-args>`
  * :ref:`Spread Operator For Array <spread-operator-for-array>`
  * :ref:`Use Arrow Functions <use-arrow-functions>`

* 1.9.3

  * :ref:`Indentation Levels <indentation-levels>`
  * :ref:`PHP 7.4 Constant Deprecation <php-7.4-constant-deprecation>`
  * :ref:`PHP 7.4 Removed Directives <php-7.4-removed-directives>`
  * :ref:`Set String Method Definition <set-string-method-definition>`
  * :ref:`SetA rray Class Definition <seta-rray-class-definition>`
  * :ref:`Use Contravariance <use-contravariance>`
  * :ref:`Use Covariance <use-covariance>`
  * :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`
  * :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`

* 1.9.2

  * :ref:`Create Compact Variables <create-compact-variables>`
  * :ref:`Create Magic Property <create-magic-property>`
  * :ref:`Follow Closure Definition <follow-closure-definition>`
  * :ref:`Implode() Arguments Order <implode()-arguments-order>`
  * :ref:`Make Class Constant Definition <make-class-constant-definition>`
  * :ref:`No More Curly Arrays <no-more-curly-arrays>`
  * :ref:`Overwritten Constant <overwritten-constant>`
  * :ref:`Overwritten Properties <overwritten-properties>`
  * :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`
  * :ref:`Set Parent Definition <set-parent-definition>`

* 1.9.0

  * :ref:`Class Without Parent <class-without-parent>`
  * :ref:`Numeric Literal Separator <numeric-literal-separator>`
  * :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
  * :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`
  * :ref:`Scalar Are Not Arrays <scalar-are-not-arrays>`
  * :ref:`Unbinding Closures <unbinding-closures>`
  * :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`

* 1.8.9

  * :ref:`mb_strrpos() Third Argument <mb\_strrpos()-third-argument>`

* 1.8.7

  * :ref:`Cant Use Function <cant-use-function>`
  * :ref:`Wrong Type Returned <wrong-type-returned>`

* 1.8.4

  * :ref:`New Constants In PHP 7.4 <new-constants-in-php-7.4>`
  * :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

* 1.8.0

  * :ref:`Casting Ternary <casting-ternary>`
  * :ref:`Concat And Addition <concat-and-addition>`
  * :ref:`New Functions In PHP 7.4 <new-functions-in-php-7.4>`

* 1.7.9

  * :ref:`ext/ffi <ext-ffi>`
  * :ref:`ext/uuid <ext-uuid>`
  * :ref:`ext/zend_monitor <ext-zend\_monitor>`

* 1.7.8

  * :ref:`ext/svm <ext-svm>`

* 1.7.6

  * :ref:`PHP Overridden Function <php-overridden-function>`

* 1.7.2

  * :ref:`Check On __Call Usage <check-on-\_\_call-usage>`

* 1.7.0

  * :ref:`Self-Transforming Variables <self-transforming-variables>`

* 1.6.9

  * :ref:`Typehint Must Be Returned <typehint-must-be-returned>`

* 1.6.8

  * :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`
  * :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

* 1.6.7

  * :ref:`An OOP Factory <an-oop-factory>`
  * :ref:`Constant Dynamic Creation <constant-dynamic-creation>`

* 1.6.5

  * :ref:`ext/pcov <ext-pcov>`
  * :ref:`ext/weakref <ext-weakref>`

* 1.6.3

  * :ref:`Assign And Compare <assign-and-compare>`

* 1.6.2

  * :ref:`Typed Property Usage <typed-property-usage>`

* 1.6.1

  * :ref:`Possible Missing Subpattern <possible-missing-subpattern>`

* 1.5.8

  * :ref:`Path lists <path-lists>`

* 1.5.7

  * :ref:`ext/wasm <ext-wasm>`

* 1.5.6

  * :ref:`Useless Alias <useless-alias>`
  * :ref:`ext/async <ext-async>`
  * :ref:`ext/sdl <ext-sdl>`

* 1.5.2

  * :ref:`Should Yield With Key <should-yield-with-key>`
  * :ref:`ext/decimal <ext-decimal>`
  * :ref:`ext/psr <ext-psr>`

* 1.5.0

  * :ref:`Pack Format Inventory <pack-format-inventory>`
  * :ref:`Printf Format Inventory <printf-format-inventory>`
  * :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

* 1.4.9

  * :ref:`Don't Read And Write In One Expression <don't-read-and-write-in-one-expression>`
  * :ref:`Invalid Pack Format <invalid-pack-format>`
  * :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`

* 1.4.4

  * :ref:`ext/seaslog <ext-seaslog>`

* 1.4.2

  * :ref:`Undefined Insteadof <undefined-insteadof>`
  * :ref:`Undefined Variable <undefined-variable>`

* 1.4.0

  * :ref:`Trailing Comma In Calls <trailing-comma-in-calls>`

* 1.3.9

  * :ref:`Case Insensitive Constants <case-insensitive-constants>`

* 1.3.8

  * :ref:`Detect Current Class <detect-current-class>`

* 1.3.7

  * :ref:`Handle Arrays With Callback <handle-arrays-with-callback>`

* 1.3.5

  * :ref:`Undefined \:\:class <undefined-class>`
  * :ref:`ext/lzf <ext-lzf>`
  * :ref:`ext/msgpack <ext-msgpack>`

* 1.3.4

  * :ref:`Hash Algorithms Incompatible With PHP 7.4- <hash-algorithms-incompatible-with-php-7.4->`
  * :ref:`ext/csprng <ext-csprng>`

* 1.3.3

  * :ref:`ext/eio <ext-eio>`

* 1.3.0

  * :ref:`Check JSON <check-json>`

* 1.2.8

  * :ref:`Typehinted References <typehinted-references>`
  * :ref:`strpos() Too Much <strpos()-too-much>`

* 1.2.7

  * :ref:`ext/cmark <ext-cmark>`

* 1.2.6

  * :ref:`Callback Function Needs Return <callback-function-needs-return>`
  * :ref:`Missing Parenthesis <missing-parenthesis>`

* 1.2.5

  * :ref:`ext/zookeeper <ext-zookeeper>`

* 1.2.3

  * :ref:`Don't Unset Properties <don't-unset-properties>`
  * :ref:`Strtr Arguments <strtr-arguments>`

* 1.1.8

  * :ref:`ext/db2 <ext-db2>`

* 1.1.7

  * :ref:`ext/leveldb <ext-leveldb>`
  * :ref:`ext/opencensus <ext-opencensus>`
  * :ref:`ext/uopz <ext-uopz>`
  * :ref:`ext/varnish <ext-varnish>`
  * :ref:`ext/xxtea <ext-xxtea>`

* 1.1.5

  * :ref:`ext/hrtime <ext-hrtime>`

* 1.1.4

  * :ref:`Fallback Function <fallback-function>`
  * :ref:`Useless Catch <useless-catch>`

* 1.0.11

  * :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`

* 1.0.8

  * :ref:`Identical On Both Sides <identical-on-both-sides>`
  * :ref:`No Reference For Ternary <no-reference-for-ternary>`

* 1.0.6

  * :ref:`ext/igbinary <ext-igbinary>`

* 1.0.5

  * :ref:`Environment Variables <environment-variables>`
  * :ref:`Invalid Regex <invalid-regex>`
  * :ref:`Same Variable Foreach <same-variable-foreach>`

* 1.0.4

  * :ref:`Argon2 Usage <argon2-usage>`
  * :ref:`Crypto Usage <crypto-usage>`
  * :ref:`Dl() Usage <dl()-usage>`
  * :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`
  * :ref:`Php 7.4 New Class <php-7.4-new-class>`
  * :ref:`Type Array Index <type-array-index>`
  * :ref:`ext/vips <ext-vips>`

* 1.0.3

  * :ref:`Drupal Usage <drupal-usage>`
  * :ref:`FuelPHP Usage <fuelphp-usage>`
  * :ref:`Phalcon Usage <phalcon-usage>`

* 1.0.1

  * :ref:`Next Month Trap <next-month-trap>`
  * :ref:`Printf Number Of Arguments <printf-number-of-arguments>`

* 0.12.17

  * :ref:`Is A PHP Magic Property <is-a-php-magic-property>`

* 0.12.16

  * :ref:`Too Complex Expression <too-complex-expression>`
  * :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`

* 0.12.15

  * :ref:`Is Actually Zero <is-actually-zero>`

* 0.12.14

  * :ref:`Regex Inventory <regex-inventory>`

* 0.12.12

  * :ref:`ext/parle <ext-parle>`

* 0.12.8

  * :ref:`ext/fam <ext-fam>`
  * :ref:`ext/rdkafka <ext-rdkafka>`

* 0.12.4

  * :ref:`Assign With And Precedence <assign-with-and-precedence>`
  * :ref:`No Magic Method With Array <no-magic-method-with-array>`
  * :ref:`ext/xattr <ext-xattr>`

* 0.12.2

  * :ref:`ext/lapack <ext-lapack>`
  * :ref:`strict_types Preference <strict\_types-preference>`

* 0.12.1

  * :ref:`Const Or Define <const-or-define>`
  * :ref:`Declare strict_types Usage <declare-strict\_types-usage>`
  * :ref:`Encoding Usage <encoding-usage>`
  * :ref:`Ticks Usage <ticks-usage>`

* 0.12.0

  * :ref:`Multiple Functions Declarations <multiple-functions-declarations>`
  * :ref:`Non Breakable Space In Names <non-breakable-space-in-names>`
  * :ref:`ext/swoole <ext-swoole>`

* 0.11.8

  * :ref:`Codeigniter usage <codeigniter-usage>`
  * :ref:`Ez cms usage <ez-cms-usage>`
  * :ref:`Joomla usage <joomla-usage>`
  * :ref:`Laravel usage <laravel-usage>`
  * :ref:`Symfony usage <symfony-usage>`
  * :ref:`Wordpress usage <wordpress-usage>`
  * :ref:`Yii usage <yii-usage>`

* 0.11.6

  * :ref:`Courier Anti-Pattern <courier-anti-pattern>`
  * :ref:`Dependency Injection <dependency-injection>`
  * :ref:`PSR-13 Usage <psr-13-usage>`
  * :ref:`PSR-16 Usage <psr-16-usage>`
  * :ref:`PSR-3 Usage <psr-3-usage>`
  * :ref:`PSR-6 Usage <psr-6-usage>`
  * :ref:`PSR-7 Usage <psr-7-usage>`
  * :ref:`ext/gender <ext-gender>`
  * :ref:`ext/judy <ext-judy>`

* 0.11.5

  * :ref:`No Reference On Left Side <no-reference-on-left-side>`
  * :ref:`PSR-11 Usage <psr-11-usage>`
  * :ref:`ext/stats <ext-stats>`

* 0.11.4

  * :ref:`Use Browscap <use-browscap>`
  * :ref:`Use Debug <use-debug>`

* 0.11.3

  * :ref:`Try With Multiple Catch <try-with-multiple-catch>`
  * :ref:`ext/grpc <ext-grpc>`
  * :ref:`ext/sphinx <ext-sphinx>`

* 0.11.1

  * :ref:`No Empty Regex <no-empty-regex>`

* 0.11.0

  * :ref:`Could Use str_repeat() <could-use-str\_repeat()>`
  * :ref:`Strings With Strange Space <strings-with-strange-space>`

* 0.10.9

  * :ref:`No Class In Global <no-class-in-global>`
  * :ref:`Repeated Regex <repeated-regex>`

* 0.10.7

  * :ref:`Group Use Declaration <group-use-declaration>`

* 0.10.6

  * :ref:`Manipulates INF <manipulates-inf>`
  * :ref:`Manipulates NaN <manipulates-nan>`
  * :ref:`Use Cookies <use-cookies>`

* 0.10.4

  * :ref:`ext/ds <ext-ds>`

* 0.10.3

  * :ref:`Multiple Alias Definitions Per File <multiple-alias-definitions-per-file>`
  * :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`

* 0.10.2

  * :ref:`ext/libsodium <ext-libsodium>`

* 0.10.1

  * :ref:`SQL queries <sql-queries>`

* 0.10.0

  * :ref:`Error_Log() Usage <error\_log()-usage>`

* 0.9.5

  * :ref:`ext/mongodb <ext-mongodb>`
  * :ref:`ext/zbarcode <ext-zbarcode>`

* 0.9.4

  * :ref:`String <string>`
  * :ref:`ext/mhash <ext-mhash>`

* 0.9.2

  * :ref:`Use Composer Lock <use-composer-lock>`
  * :ref:`ext/ncurses <ext-ncurses>`
  * :ref:`ext/newt <ext-newt>`
  * :ref:`ext/nsapi <ext-nsapi>`

* 0.8.9

  * :ref:`Useless Check <useless-check>`

* 0.8.7

  * :ref:`Don't Echo Error <don't-echo-error>`
  * :ref:`No isset() With empty() <no-isset()-with-empty()>`
  * :ref:`Use \:\:Class Operator <use-class-operator>`
  * :ref:`Useless Type Casting <useless-type-casting>`
  * :ref:`ext/rar <ext-rar>`

* 0.8.6

  * :ref:`Drop Else After Return <drop-else-after-return>`

* 0.8.5

  * :ref:`Should Make Ternary <should-make-ternary>`

* 0.8.4

  * :ref:`$HTTP_RAW_POST_DATA Usage <$http\_raw\_post\_data-usage>`
  * :ref:`<?= Usage <I?=-usage>`
  * :ref:`@ Operator <@-operator>`
  * :ref:`Abstract Class Usage <abstract-class-usage>`
  * :ref:`Abstract Methods Usage <abstract-methods-usage>`
  * :ref:`Adding Zero <adding-zero>`
  * :ref:`Aliases <aliases>`
  * :ref:`Aliases Usage <aliases-usage>`
  * :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
  * :ref:`Always Positive Comparison <always-positive-comparison>`
  * :ref:`Anonymous Classes <anonymous-classes>`
  * :ref:`Array Index <array-index>`
  * :ref:`Assertions <assertions>`
  * :ref:`Autoloading <autoloading>`
  * :ref:`Avoid Parenthesis <avoid-parenthesis>`
  * :ref:`Avoid Substr() One <avoid-substr()-one>`
  * :ref:`Avoid get_class() <avoid-get\_class()>`
  * :ref:`Binary Glossary <binary-glossary>`
  * :ref:`Can't Disable Class <can't-disable-class>`
  * :ref:`Can't Disable Function <can't-disable-function>`
  * :ref:`Cast Usage <cast-usage>`
  * :ref:`Caught Expressions <caught-expressions>`
  * :ref:`Classes Names <classes-names>`
  * :ref:`Clone Usage <clone-usage>`
  * :ref:`Closures Glossary <closures-glossary>`
  * :ref:`Coalesce <coalesce>`
  * :ref:`Composer Namespace <composer-namespace>`
  * :ref:`Composer Usage <composer-usage>`
  * :ref:`Composer's autoload <composer's-autoload>`
  * :ref:`Conditioned Constants <conditioned-constants>`
  * :ref:`Conditioned Function <conditioned-function>`
  * :ref:`Constant Class <constant-class>`
  * :ref:`Constant Definition <constant-definition>`
  * :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
  * :ref:`Constants Names <constants-names>`
  * :ref:`Constants Usage <constants-usage>`
  * :ref:`Constants With Strange Names <constants-with-strange-names>`
  * :ref:`Could Use Short Assignation <could-use-short-assignation>`
  * :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
  * :ref:`Custom Constant Usage <custom-constant-usage>`
  * :ref:`Dangling Array References <dangling-array-references>`
  * :ref:`Deep Definitions <deep-definitions>`
  * :ref:`Defined Class Constants <defined-class-constants>`
  * :ref:`Defined Exceptions <defined-exceptions>`
  * :ref:`Defined Properties <defined-properties>`
  * :ref:`Deprecated PHP Functions <deprecated-php-functions>`
  * :ref:`Dereferencing String And Arrays <dereferencing-string-and-arrays>`
  * :ref:`Directives Usage <directives-usage>`
  * :ref:`Dynamic Calls <dynamic-calls>`
  * :ref:`Dynamic Class Constant <dynamic-class-constant>`
  * :ref:`Dynamic Classes <dynamic-classes>`
  * :ref:`Dynamic Code <dynamic-code>`
  * :ref:`Dynamic Function Call <dynamic-function-call>`
  * :ref:`Dynamic Methodcall <dynamic-methodcall>`
  * :ref:`Dynamic New <dynamic-new>`
  * :ref:`Dynamic Property <dynamic-property>`
  * :ref:`Dynamically Called Classes <dynamically-called-classes>`
  * :ref:`Ellipsis Usage <ellipsis-usage>`
  * :ref:`Else If Versus Elseif <else-if-versus-elseif>`
  * :ref:`Else Usage <else-usage>`
  * :ref:`Email Addresses <email-addresses>`
  * :ref:`Empty Blocks <empty-blocks>`
  * :ref:`Empty Namespace <empty-namespace>`
  * :ref:`Error Messages <error-messages>`
  * :ref:`Eval() Usage <eval()-usage>`
  * :ref:`Exit() Usage <exit()-usage>`
  * :ref:`Exit-like Methods <exit-like-methods>`
  * :ref:`Failed Substr Comparison <failed-substr-comparison>`
  * :ref:`File Uploads <file-uploads>`
  * :ref:`File Usage <file-usage>`
  * :ref:`Foreach Reference Is Not Modified <foreach-reference-is-not-modified>`
  * :ref:`Forgotten Visibility <forgotten-visibility>`
  * :ref:`Forgotten Whitespace <forgotten-whitespace>`
  * :ref:`Function Subscripting <function-subscripting>`
  * :ref:`Functions Glossary <functions-glossary>`
  * :ref:`Functions Using Reference <functions-using-reference>`
  * :ref:`Global In Global <global-in-global>`
  * :ref:`Global Usage <global-usage>`
  * :ref:`Goto Names <goto-names>`
  * :ref:`Has Magic Property <has-magic-property>`
  * :ref:`Has Variable Arguments <has-variable-arguments>`
  * :ref:`Heredoc Delimiter Glossary <heredoc-delimiter-glossary>`
  * :ref:`Hexadecimal Glossary <hexadecimal-glossary>`
  * :ref:`Hidden Use Expression <hidden-use-expression>`
  * :ref:`Htmlentities Calls <htmlentities-calls>`
  * :ref:`Identical Conditions <identical-conditions>`
  * :ref:`If With Same Conditions <if-with-same-conditions>`
  * :ref:`Implied If <implied-if>`
  * :ref:`Inclusions <inclusions>`
  * :ref:`Incompilable Files <incompilable-files>`
  * :ref:`Indices Are Int Or String <indices-are-int-or-string>`
  * :ref:`Interfaces Glossary <interfaces-glossary>`
  * :ref:`Is An Extension Constant <is-an-extension-constant>`
  * :ref:`Is An Extension Function <is-an-extension-function>`
  * :ref:`Is An Extension Interface <is-an-extension-interface>`
  * :ref:`Is CLI Script <is-cli-script>`
  * :ref:`Is Composer Class <is-composer-class>`
  * :ref:`Is Composer Interface <is-composer-interface>`
  * :ref:`Is Extension Trait <is-extension-trait>`
  * :ref:`Is Generator <is-generator>`
  * :ref:`Is Not Class Family <is-not-class-family>`
  * :ref:`Is PHP Constant <is-php-constant>`
  * :ref:`Labels <labels>`
  * :ref:`List Short Syntax <list-short-syntax>`
  * :ref:`List With Keys <list-with-keys>`
  * :ref:`Logical Mistakes <logical-mistakes>`
  * :ref:`Logical Should Use Symbolic Operators <logical-should-use-symbolic-operators>`
  * :ref:`Lone Blocks <lone-blocks>`
  * :ref:`Magic Constant Usage <magic-constant-usage>`
  * :ref:`Magic Methods <magic-methods>`
  * :ref:`Mail Usage <mail-usage>`
  * :ref:`Mark Callable <mark-callable>`
  * :ref:`Md5 Strings <md5-strings>`
  * :ref:`Multidimensional Arrays <multidimensional-arrays>`
  * :ref:`Multiple Alias Definitions <multiple-alias-definitions>`
  * :ref:`Multiple Catch <multiple-catch>`
  * :ref:`Multiple Class Declarations <multiple-class-declarations>`
  * :ref:`Multiple Classes In One File <multiple-classes-in-one-file>`
  * :ref:`Multiple Constant Definition <multiple-constant-definition>`
  * :ref:`Multiple Exceptions Catch() <multiple-exceptions-catch()>`
  * :ref:`Multiple Identical Trait Or Interface <multiple-identical-trait-or-interface>`
  * :ref:`Multiple Index Definition <multiple-index-definition>`
  * :ref:`Multiples Identical Case <multiples-identical-case>`
  * :ref:`Multiply By One <multiply-by-one>`
  * :ref:`Must Return Methods <must-return-methods>`
  * :ref:`Namespaces <namespaces>`
  * :ref:`Namespaces Glossary <namespaces-glossary>`
  * :ref:`Negative Power <negative-power>`
  * :ref:`Nested Loops <nested-loops>`
  * :ref:`Nested Ternary <nested-ternary>`
  * :ref:`No Choice <no-choice>`
  * :ref:`No Direct Access <no-direct-access>`
  * :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
  * :ref:`No Parenthesis For Language Construct <no-parenthesis-for-language-construct>`
  * :ref:`No Real Comparison <no-real-comparison>`
  * :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
  * :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
  * :ref:`Not Definitions Only <not-definitions-only>`
  * :ref:`Not Not <not-not>`
  * :ref:`Nowdoc Delimiter Glossary <nowdoc-delimiter-glossary>`
  * :ref:`Objects Don't Need References <objects-don't-need-references>`
  * :ref:`Octal Glossary <octal-glossary>`
  * :ref:`Old Style Constructor <old-style-constructor>`
  * :ref:`One Variable String <one-variable-string>`
  * :ref:`Or Die <or-die>`
  * :ref:`Overwritten Class Const <overwritten-class-const>`
  * :ref:`Overwritten Exceptions <overwritten-exceptions>`
  * :ref:`PHP Alternative Syntax <php-alternative-syntax>`
  * :ref:`PHP Arrays Index <php-arrays-index>`
  * :ref:`PHP Bugfixes <php-bugfixes>`
  * :ref:`PHP Constant Usage <php-constant-usage>`
  * :ref:`Pear Usage <pear-usage>`
  * :ref:`Php7 Relaxed Keyword <php7-relaxed-keyword>`
  * :ref:`Pre-increment <pre-increment>`
  * :ref:`Print And Die <print-and-die>`
  * :ref:`Recursive Functions <recursive-functions>`
  * :ref:`Redeclared PHP Functions <redeclared-php-functions>`
  * :ref:`Redefined Class Constants <redefined-class-constants>`
  * :ref:`Redefined Default <redefined-default>`
  * :ref:`Redefined Methods <redefined-methods>`
  * :ref:`Redefined PHP Traits <redefined-php-traits>`
  * :ref:`Repeated print() <repeated-print()>`
  * :ref:`Resources Usage <resources-usage>`
  * :ref:`Results May Be Missing <results-may-be-missing>`
  * :ref:`Return True False <return-true-false>`
  * :ref:`Return Typehint Usage <return-typehint-usage>`
  * :ref:`Same Conditions In Condition <same-conditions-in-condition>`
  * :ref:`Scalar Typehint Usage <scalar-typehint-usage>`
  * :ref:`Shell Usage <shell-usage>`
  * :ref:`Short Syntax For Arrays <short-syntax-for-arrays>`
  * :ref:`Should Chain Exception <should-chain-exception>`
  * :ref:`Should Make Alias <should-make-alias>`
  * :ref:`Should Typecast <should-typecast>`
  * :ref:`Should Use Coalesce <should-use-coalesce>`
  * :ref:`Should Use Prepared Statement <should-use-prepared-statement>`
  * :ref:`Silently Cast Integer <silently-cast-integer>`
  * :ref:`Static Methods <static-methods>`
  * :ref:`Static Methods Called From Object <static-methods-called-from-object>`
  * :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
  * :ref:`Static Properties <static-properties>`
  * :ref:`Static Variables <static-variables>`
  * :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`
  * :ref:`Strpos()-like Comparison <strpos()-like-comparison>`
  * :ref:`Super Global Usage <super-global-usage>`
  * :ref:`Switch Without Default <switch-without-default>`
  * :ref:`Ternary In Concat <ternary-in-concat>`
  * :ref:`Test Class <test-class>`
  * :ref:`Throw <throw>`
  * :ref:`Throw Functioncall <throw-functioncall>`
  * :ref:`Throw In Destruct <throw-in-destruct>`
  * :ref:`Thrown Exceptions <thrown-exceptions>`
  * :ref:`Throws An Assignement <throws-an-assignement>`
  * :ref:`Timestamp Difference <timestamp-difference>`
  * :ref:`Trait Names <trait-names>`
  * :ref:`Traits Usage <traits-usage>`
  * :ref:`Trigger Errors <trigger-errors>`
  * :ref:`Try With Finally <try-with-finally>`
  * :ref:`Typehints <typehints>`
  * :ref:`URL List <url-list>`
  * :ref:`Unchecked Resources <unchecked-resources>`
  * :ref:`Undefined Class Constants <undefined-class-constants>`
  * :ref:`Undefined Constants <undefined-constants>`
  * :ref:`Undefined Functions <undefined-functions>`
  * :ref:`Undefined Interfaces <undefined-interfaces>`
  * :ref:`Undefined Properties <undefined-properties>`
  * :ref:`Undefined Trait <undefined-trait>`
  * :ref:`Unkown Regex Options <unkown-regex-options>`
  * :ref:`Usage Of class_alias() <usage-of-class\_alias()>`
  * :ref:`Use === null <use-===-null>`
  * :ref:`Use Cli <use-cli>`
  * :ref:`Use Constant <use-constant>`
  * :ref:`Use Constant As Arguments <use-constant-as-arguments>`
  * :ref:`Use Instanceof <use-instanceof>`
  * :ref:`Use Nullable Type <use-nullable-type>`
  * :ref:`Use PHP Object API <use-php-object-api>`
  * :ref:`Use Pathinfo <use-pathinfo>`
  * :ref:`Use System Tmp <use-system-tmp>`
  * :ref:`Use Web <use-web>`
  * :ref:`Use const <use-const>`
  * :ref:`Use random_int() <use-random\_int()>`
  * :ref:`Used Once Variables (In Scope) <used-once-variables-(in-scope)>`
  * :ref:`Useless Brackets <useless-brackets>`
  * :ref:`Useless Final <useless-final>`
  * :ref:`Useless Instructions <useless-instructions>`
  * :ref:`Useless Parenthesis <useless-parenthesis>`
  * :ref:`Useless Unset <useless-unset>`
  * :ref:`Uses Default Values <uses-default-values>`
  * :ref:`Uses Environment <uses-environment>`
  * :ref:`Using Short Tags <using-short-tags>`
  * :ref:`Variable Constants <variable-constants>`
  * :ref:`Variable References <variable-references>`
  * :ref:`Variable Variables <variable-variables>`
  * :ref:`Variables With Long Names <variables-with-long-names>`
  * :ref:`While(List() = Each()) <while(list()-=-each())>`
  * :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`
  * :ref:`Wrong Optional Parameter <wrong-optional-parameter>`
  * :ref:`Wrong Parameter Type <wrong-parameter-type>`
  * :ref:`Wrong fopen() Mode <wrong-fopen()-mode>`
  * :ref:`Yield From Usage <yield-from-usage>`
  * :ref:`Yield Usage <yield-usage>`
  * :ref:`__halt_compiler <\_\_halt\_compiler>`
  * :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`
  * :ref:`eval() Without Try <eval()-without-try>`
  * :ref:`ext/0mq <ext-0mq>`
  * :ref:`ext/amqp <ext-amqp>`
  * :ref:`ext/apache <ext-apache>`
  * :ref:`ext/apc <ext-apc>`
  * :ref:`ext/apcu <ext-apcu>`
  * :ref:`ext/array <ext-array>`
  * :ref:`ext/bcmath <ext-bcmath>`
  * :ref:`ext/bzip2 <ext-bzip2>`
  * :ref:`ext/cairo <ext-cairo>`
  * :ref:`ext/calendar <ext-calendar>`
  * :ref:`ext/com <ext-com>`
  * :ref:`ext/crypto <ext-crypto>`
  * :ref:`ext/ctype <ext-ctype>`
  * :ref:`ext/curl <ext-curl>`
  * :ref:`ext/cyrus <ext-cyrus>`
  * :ref:`ext/date <ext-date>`
  * :ref:`ext/dba <ext-dba>`
  * :ref:`ext/dio <ext-dio>`
  * :ref:`ext/dom <ext-dom>`
  * :ref:`ext/eaccelerator <ext-eaccelerator>`
  * :ref:`ext/enchant <ext-enchant>`
  * :ref:`ext/ereg <ext-ereg>`
  * :ref:`ext/ev <ext-ev>`
  * :ref:`ext/event <ext-event>`
  * :ref:`ext/exif <ext-exif>`
  * :ref:`ext/expect <ext-expect>`
  * :ref:`ext/fann <ext-fann>`
  * :ref:`ext/fdf <ext-fdf>`
  * :ref:`ext/ffmpeg <ext-ffmpeg>`
  * :ref:`ext/file <ext-file>`
  * :ref:`ext/fileinfo <ext-fileinfo>`
  * :ref:`ext/filter <ext-filter>`
  * :ref:`ext/fpm <ext-fpm>`
  * :ref:`ext/ftp <ext-ftp>`
  * :ref:`ext/gd <ext-gd>`
  * :ref:`ext/gearman <ext-gearman>`
  * :ref:`ext/geoip <ext-geoip>`
  * :ref:`ext/gettext <ext-gettext>`
  * :ref:`ext/gmagick <ext-gmagick>`
  * :ref:`ext/gmp <ext-gmp>`
  * :ref:`ext/gnupgp <ext-gnupgp>`
  * :ref:`ext/hash <ext-hash>`
  * :ref:`ext/ibase <ext-ibase>`
  * :ref:`ext/iconv <ext-iconv>`
  * :ref:`ext/iis <ext-iis>`
  * :ref:`ext/imagick <ext-imagick>`
  * :ref:`ext/imap <ext-imap>`
  * :ref:`ext/info <ext-info>`
  * :ref:`ext/inotify <ext-inotify>`
  * :ref:`ext/intl <ext-intl>`
  * :ref:`ext/json <ext-json>`
  * :ref:`ext/kdm5 <ext-kdm5>`
  * :ref:`ext/ldap <ext-ldap>`
  * :ref:`ext/libevent <ext-libevent>`
  * :ref:`ext/libxml <ext-libxml>`
  * :ref:`ext/lua <ext-lua>`
  * :ref:`ext/mail <ext-mail>`
  * :ref:`ext/mailparse <ext-mailparse>`
  * :ref:`ext/math <ext-math>`
  * :ref:`ext/mbstring <ext-mbstring>`
  * :ref:`ext/mcrypt <ext-mcrypt>`
  * :ref:`ext/memcache <ext-memcache>`
  * :ref:`ext/memcached <ext-memcached>`
  * :ref:`ext/ming <ext-ming>`
  * :ref:`ext/mongo <ext-mongo>`
  * :ref:`ext/mssql <ext-mssql>`
  * :ref:`ext/mysql <ext-mysql>`
  * :ref:`ext/mysqli <ext-mysqli>`
  * :ref:`ext/ob <ext-ob>`
  * :ref:`ext/oci8 <ext-oci8>`
  * :ref:`ext/odbc <ext-odbc>`
  * :ref:`ext/opcache <ext-opcache>`
  * :ref:`ext/openssl <ext-openssl>`
  * :ref:`ext/parsekit <ext-parsekit>`
  * :ref:`ext/password <ext-password>`
  * :ref:`ext/pcntl <ext-pcntl>`
  * :ref:`ext/pcre <ext-pcre>`
  * :ref:`ext/pdo <ext-pdo>`
  * :ref:`ext/pecl_http <ext-pecl\_http>`
  * :ref:`ext/pgsql <ext-pgsql>`
  * :ref:`ext/phalcon <ext-phalcon>`
  * :ref:`ext/phar <ext-phar>`
  * :ref:`ext/php-ast <ext-php-ast>`
  * :ref:`ext/posix <ext-posix>`
  * :ref:`ext/proctitle <ext-proctitle>`
  * :ref:`ext/pspell <ext-pspell>`
  * :ref:`ext/readline <ext-readline>`
  * :ref:`ext/recode <ext-recode>`
  * :ref:`ext/redis <ext-redis>`
  * :ref:`ext/reflection <ext-reflection>`
  * :ref:`ext/runkit <ext-runkit>`
  * :ref:`ext/sem <ext-sem>`
  * :ref:`ext/session <ext-session>`
  * :ref:`ext/shmop <ext-shmop>`
  * :ref:`ext/simplexml <ext-simplexml>`
  * :ref:`ext/snmp <ext-snmp>`
  * :ref:`ext/soap <ext-soap>`
  * :ref:`ext/sockets <ext-sockets>`
  * :ref:`ext/spl <ext-spl>`
  * :ref:`ext/sqlite <ext-sqlite>`
  * :ref:`ext/sqlite3 <ext-sqlite3>`
  * :ref:`ext/sqlsrv <ext-sqlsrv>`
  * :ref:`ext/ssh2 <ext-ssh2>`
  * :ref:`ext/standard <ext-standard>`
  * :ref:`ext/suhosin <ext-suhosin>`
  * :ref:`ext/tidy <ext-tidy>`
  * :ref:`ext/tokenizer <ext-tokenizer>`
  * :ref:`ext/tokyotyrant <ext-tokyotyrant>`
  * :ref:`ext/trader <ext-trader>`
  * :ref:`ext/v8js <ext-v8js>`
  * :ref:`ext/wddx <ext-wddx>`
  * :ref:`ext/wikidiff2 <ext-wikidiff2>`
  * :ref:`ext/wincache <ext-wincache>`
  * :ref:`ext/xcache <ext-xcache>`
  * :ref:`ext/xdebug <ext-xdebug>`
  * :ref:`ext/xdiff <ext-xdiff>`
  * :ref:`ext/xhprof <ext-xhprof>`
  * :ref:`ext/xml <ext-xml>`
  * :ref:`ext/xmlreader <ext-xmlreader>`
  * :ref:`ext/xmlrpc <ext-xmlrpc>`
  * :ref:`ext/xmlwriter <ext-xmlwriter>`
  * :ref:`ext/xsl <ext-xsl>`
  * :ref:`ext/yaml <ext-yaml>`
  * :ref:`ext/yis <ext-yis>`
  * :ref:`ext/zip <ext-zip>`
  * :ref:`ext/zlib <ext-zlib>`
  * :ref:`include_once() Usage <include\_once()-usage>`
  * :ref:`list() May Omit Variables <list()-may-omit-variables>`
  * :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
  * :ref:`var_dump()... Usage <var\_dump()...-usage>`




Directory by PHP Function
-------------------------

+ ` `
    + ` xmlwriter_open_memory()`

      + :ref:`ext/xmlwriter <ext-xmlwriter>`


+ `$`
    + `$HTTP_RAW_POST_DATA`

      + :ref:`$HTTP_RAW_POST_DATA Usage <$http\_raw\_post\_data-usage>`

    + `$_ENV`

      + :ref:`Uses Environment <uses-environment>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$_GET`

      + :ref:`ext/gd <ext-gd>`
      + :ref:`ext/pcre <ext-pcre>`
      + :ref:`Cast Usage <cast-usage>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`Use Web <use-web>`
      + :ref:`Eval() Usage <eval()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`Repeated Regex <repeated-regex>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$_POST`

      + :ref:`Crypto Usage <crypto-usage>`
      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$_REQUEST`

      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$this`

      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Is A PHP Magic Property <is-a-php-magic-property>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Redefined Default <redefined-default>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Wrong Typed Property Default <wrong-typed-property-default>`
      + :ref:`Create Magic Property <create-magic-property>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Courier Anti-Pattern <courier-anti-pattern>`
      + :ref:`Dependency Injection <dependency-injection>`
      + :ref:`Union Typehint <union-typehint>`
      + :ref:`Typed Property Usage <typed-property-usage>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`var_dump()... Usage <var\_dump()...-usage>`


+ `*`
    + `**`

      + :ref:`Composer Namespace <composer-namespace>`
      + :ref:`ext/bcmath <ext-bcmath>`
      + :ref:`ext/decimal <ext-decimal>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
      + :ref:`Negative Power <negative-power>`
      + :ref:`Drupal Usage <drupal-usage>`
      + :ref:`Laravel usage <laravel-usage>`
      + :ref:`Symfony usage <symfony-usage>`


+ `.`
    + `...`

      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`Static Properties <static-properties>`
      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/ldap <ext-ldap>`
      + :ref:`ext/phalcon <ext-phalcon>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`ext/xattr <ext-xattr>`
      + :ref:`Mismatch Parameter Name <mismatch-parameter-name>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Unknown Parameter Name <unknown-parameter-name>`
      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Ellipsis Usage <ellipsis-usage>`
      + :ref:`PHP 80 Named Parameter Variadic <php-80-named-parameter-variadic>`
      + :ref:`Signature Trailing Comma <signature-trailing-comma>`
      + :ref:`Spread Operator For Array <spread-operator-for-array>`
      + :ref:`File Usage <file-usage>`
      + :ref:`Repeated Regex <repeated-regex>`
      + :ref:`Useless Instructions <useless-instructions>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`
      + :ref:`Yii usage <yii-usage>`


+ `@`
    + `@`

      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/yaml <ext-yaml>`
      + :ref:`Use PHP Attributes <use-php-attributes>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Useless Instructions <useless-instructions>`
      + :ref:`Email Addresses <email-addresses>`


+ `A`
    + `AF_INET`

      + :ref:`ext/sockets <ext-sockets>`

    + `ArrayAccess`

      + :ref:`Is An Extension Interface <is-an-extension-interface>`

    + `abs()`

      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`No Real Comparison <no-real-comparison>`

    + `addslashes()`

      + :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`

    + `array()`

      + :ref:`Short Syntax For Arrays <short-syntax-for-arrays>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`PSR-3 Usage <psr-3-usage>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`

    + `array_change_key_case()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `array_key_exists()`

      + :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`

    + `array_map()`

      + :ref:`Handle Arrays With Callback <handle-arrays-with-callback>`
      + :ref:`Callback Function Needs Return <callback-function-needs-return>`
      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`

    + `array_merge()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`

    + `array_merge_recursive()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`

    + `array_multisort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `array_replace()`

      + :ref:`Useless Instructions <useless-instructions>`

    + `array_search()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `array_splice()`

      + :ref:`Use array_slice() <use-array\_slice()>`

    + `array_sum()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `array_unique()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `array_walk()`

      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`

    + `arsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `asort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `B`
    + `break`

      + :ref:`Negative Start Index In Array <negative-start-index-in-array>`
      + :ref:`ext/expect <ext-expect>`
      + :ref:`ext/gearman <ext-gearman>`
      + :ref:`ext/gender <ext-gender>`
      + :ref:`ext/libxml <ext-libxml>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/tokenizer <ext-tokenizer>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Multiples Identical Case <multiples-identical-case>`
      + :ref:`Switch Without Default <switch-without-default>`
      + :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`


+ `C`
    + `CAL_GREGORIAN`

      + :ref:`ext/calendar <ext-calendar>`

    + `COM`

      + :ref:`ext/com <ext-com>`

    + `CURLOPT_FILE`

      + :ref:`ext/curl <ext-curl>`

    + `CURLOPT_HEADER`

      + :ref:`ext/curl <ext-curl>`

    + `CURLPIPE_HTTP1`

      + :ref:`PHP 7.4 Constant Deprecation <php-7.4-constant-deprecation>`

    + `CURLVERSION_NOW`

      + :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

    + `Cairo`

      + :ref:`ext/cairo <ext-cairo>`

    + `CairoContext`

      + :ref:`ext/cairo <ext-cairo>`

    + `CairoPSSurface`

      + :ref:`ext/cairo <ext-cairo>`

    + `Closure`

      + :ref:`Follow Closure Definition <follow-closure-definition>`
      + :ref:`Closures Glossary <closures-glossary>`
      + :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`
      + :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`

    + `Collator`

      + :ref:`ext/intl <ext-intl>`

    + `Concurrent Task`

      + :ref:`ext/async <ext-async>`

    + `Count()`

      + :ref:`Uses Default Values <uses-default-values>`

    + `cairo`

      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `class_exists()`

      + :ref:`Undefined ::class <undefined-class>`

    + `closure`

      + :ref:`Follow Closure Definition <follow-closure-definition>`
      + :ref:`Collect Parameter Counts <collect-parameter-counts>`
      + :ref:`Closures Glossary <closures-glossary>`
      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Functions Glossary <functions-glossary>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`
      + :ref:`Hidden Use Expression <hidden-use-expression>`
      + :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`

    + `collator_compare()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `collator_get_sort_key()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `com`

      + :ref:`Multidimensional Arrays <multidimensional-arrays>`
      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`Constant Class <constant-class>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`Immutable Signature <immutable-signature>`
      + :ref:`Multiple Classes In One File <multiple-classes-in-one-file>`
      + :ref:`Useless Catch <useless-catch>`
      + :ref:`ext/amqp <ext-amqp>`
      + :ref:`ext/apcu <ext-apcu>`
      + :ref:`ext/php-ast <ext-php-ast>`
      + :ref:`ext/async <ext-async>`
      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`ext/cmark <ext-cmark>`
      + :ref:`ext/com <ext-com>`
      + :ref:`ext/crypto <ext-crypto>`
      + :ref:`ext/curl <ext-curl>`
      + :ref:`ext/ds <ext-ds>`
      + :ref:`ext/eaccelerator <ext-eaccelerator>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/enchant <ext-enchant>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/fam <ext-fam>`
      + :ref:`ext/fann <ext-fann>`
      + :ref:`ext/fdf <ext-fdf>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/filter <ext-filter>`
      + :ref:`ext/gender <ext-gender>`
      + :ref:`ext/geoip <ext-geoip>`
      + :ref:`ext/grpc <ext-grpc>`
      + :ref:`ext/pecl_http <ext-pecl\_http>`
      + :ref:`ext/igbinary <ext-igbinary>`
      + :ref:`ext/judy <ext-judy>`
      + :ref:`ext/lapack <ext-lapack>`
      + :ref:`ext/leveldb <ext-leveldb>`
      + :ref:`ext/libsodium <ext-libsodium>`
      + :ref:`ext/mail <ext-mail>`
      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`
      + :ref:`ext/msgpack <ext-msgpack>`
      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`ext/newt <ext-newt>`
      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`ext/opencensus <ext-opencensus>`
      + :ref:`ext/pcov <ext-pcov>`
      + :ref:`ext/phalcon <ext-phalcon>`
      + :ref:`ext/psr <ext-psr>`
      + :ref:`ext/rar <ext-rar>`
      + :ref:`ext/rdkafka <ext-rdkafka>`
      + :ref:`ext/recode <ext-recode>`
      + :ref:`ext/redis <ext-redis>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`ext/seaslog <ext-seaslog>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`ext/sphinx <ext-sphinx>`
      + :ref:`ext/sqlsrv <ext-sqlsrv>`
      + :ref:`ext/ssh2 <ext-ssh2>`
      + :ref:`ext/svm <ext-svm>`
      + :ref:`ext/swoole <ext-swoole>`
      + :ref:`ext/tokyotyrant <ext-tokyotyrant>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`ext/uuid <ext-uuid>`
      + :ref:`ext/v8js <ext-v8js>`
      + :ref:`ext/vips <ext-vips>`
      + :ref:`ext/wasm <ext-wasm>`
      + :ref:`ext/weakref <ext-weakref>`
      + :ref:`ext/wikidiff2 <ext-wikidiff2>`
      + :ref:`ext/xmlrpc <ext-xmlrpc>`
      + :ref:`ext/xxtea <ext-xxtea>`
      + :ref:`ext/zbarcode <ext-zbarcode>`
      + :ref:`ext/zend_monitor <ext-zend\_monitor>`
      + :ref:`ext/0mq <ext-0mq>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Mismatch Parameter Name <mismatch-parameter-name>`
      + :ref:`Nullable With Constant <nullable-with-constant>`
      + :ref:`Should Yield With Key <should-yield-with-key>`
      + :ref:`An OOP Factory <an-oop-factory>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Yield Usage <yield-usage>`
      + :ref:`PSR-11 Usage <psr-11-usage>`
      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`
      + :ref:`Dangling Array References <dangling-array-references>`
      + :ref:`Don't Read And Write In One Expression <don't-read-and-write-in-one-expression>`
      + :ref:`Else Usage <else-usage>`
      + :ref:`Forgotten Whitespace <forgotten-whitespace>`
      + :ref:`Logical Mistakes <logical-mistakes>`
      + :ref:`Mail Usage <mail-usage>`
      + :ref:`Nested Ternary <nested-ternary>`
      + :ref:`Next Month Trap <next-month-trap>`
      + :ref:`Should Chain Exception <should-chain-exception>`
      + :ref:`Timestamp Difference <timestamp-difference>`
      + :ref:`Use Constant <use-constant>`
      + :ref:`Use Debug <use-debug>`
      + :ref:`Use System Tmp <use-system-tmp>`
      + :ref:`Path lists <path-lists>`
      + :ref:`URL List <url-list>`
      + :ref:`Codeigniter usage <codeigniter-usage>`
      + :ref:`FuelPHP Usage <fuelphp-usage>`
      + :ref:`Laravel usage <laravel-usage>`
      + :ref:`Phalcon Usage <phalcon-usage>`
      + :ref:`Symfony usage <symfony-usage>`
      + :ref:`Wordpress usage <wordpress-usage>`
      + :ref:`Yii usage <yii-usage>`

    + `compact()`

      + :ref:`Create Compact Variables <create-compact-variables>`

    + `constant()`

      + :ref:`Dynamic Class Constant <dynamic-class-constant>`
      + :ref:`Variable Constants <variable-constants>`
      + :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`

    + `continue`

      + :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`
      + :ref:`Useless Instructions <useless-instructions>`

    + `convert_cyr_string()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `copy()`

      + :ref:`Protocol lists <protocol-lists>`

    + `count()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Uses Default Values <uses-default-values>`
      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`Useless Check <useless-check>`

    + `create_function()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `crypt()`

      + :ref:`ext/password <ext-password>`

    + `curl_exec()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `curl_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `curl_multi_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `curl_share_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `curl_version()`

      + :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

    + `current()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`


+ `D`
    + `DB2_AUTOCOMMIT_OFF`

      + :ref:`ext/db2 <ext-db2>`

    + `DOMDocument`

      + :ref:`ext/dom <ext-dom>`
      + :ref:`ext/xsl <ext-xsl>`

    + `DateInterval`

      + :ref:`ext/date <ext-date>`

    + `DateTime`

      + :ref:`Clone Usage <clone-usage>`
      + :ref:`ext/date <ext-date>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `DateTimeZone`

      + :ref:`ext/date <ext-date>`

    + `Die()`

      + :ref:`Print And Die <print-and-die>`

    + `Directory`

      + :ref:`ext/ldap <ext-ldap>`

    + `DirectoryIterator`

      + :ref:`Protocol lists <protocol-lists>`

    + `DivisionByZeroError`

      + :ref:`Throw <throw>`

    + `dateTime`

      + :ref:`Clone Usage <clone-usage>`

    + `datetime`

      + :ref:`ext/date <ext-date>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `debug_backtrace()`

      + :ref:`Use Debug <use-debug>`

    + `debug_zval_dump()`

      + :ref:`Use Debug <use-debug>`

    + `define()`

      + :ref:`Case Insensitive Constants <case-insensitive-constants>`
      + :ref:`Use const <use-const>`
      + :ref:`Constants Names <constants-names>`
      + :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`

    + `die`

      + :ref:`ext/bzip2 <ext-bzip2>`
      + :ref:`ext/crypto <ext-crypto>`
      + :ref:`ext/expect <ext-expect>`
      + :ref:`ext/ibase <ext-ibase>`
      + :ref:`ext/imap <ext-imap>`
      + :ref:`ext/memcache <ext-memcache>`
      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/rar <ext-rar>`
      + :ref:`ext/shmop <ext-shmop>`
      + :ref:`ext/sqlite <ext-sqlite>`
      + :ref:`ext/sqlsrv <ext-sqlsrv>`
      + :ref:`ext/ssh2 <ext-ssh2>`
      + :ref:`ext/uuid <ext-uuid>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Don't Echo Error <don't-echo-error>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Error Messages <error-messages>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`No Direct Access <no-direct-access>`
      + :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`
      + :ref:`Print And Die <print-and-die>`
      + :ref:`Joomla usage <joomla-usage>`

    + `die()`

      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`No Parenthesis For Language Construct <no-parenthesis-for-language-construct>`
      + :ref:`Or Die <or-die>`
      + :ref:`Print And Die <print-and-die>`
      + :ref:`Environment Variables <environment-variables>`

    + `directory`

      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`
      + :ref:`Unchecked Resources <unchecked-resources>`
      + :ref:`Path lists <path-lists>`
      + :ref:`Protocol lists <protocol-lists>`

    + `dirname()`

      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`

    + `dl()`

      + :ref:`Dl() Usage <dl()-usage>`


+ `E`
    + `ENT_QUOTES`

      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `EV_PERSIST`

      + :ref:`ext/libevent <ext-libevent>`

    + `EV_READ`

      + :ref:`ext/libevent <ext-libevent>`

    + `E_ALL`

      + :ref:`Dynamic Class Constant <dynamic-class-constant>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_DEPRECATED`

      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_ERROR`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `E_NOTICE`

      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_PARSE`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `E_STRICT`

      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_USER_ERROR`

      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`Trigger Errors <trigger-errors>`

    + `E_WARNING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `Each()`

      + :ref:`While(List() = Each()) <while(list()-=-each())>`

    + `each()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `easter_days()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `eio_event_loop()`

      + :ref:`ext/eio <ext-eio>`

    + `empty()`

      + :ref:`No isset() With empty() <no-isset()-with-empty()>`
      + :ref:`Useless Check <useless-check>`

    + `enchant_broker_init()`

      + :ref:`ext/enchant <ext-enchant>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `enchant_broker_request_dict()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `enchant_broker_request_pwl_dict()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `error_get_last()`

      + :ref:`$php_errormsg Usage <$php\_errormsg-usage>`

    + `error_log()`

      + :ref:`Error_Log() Usage <error\_log()-usage>`

    + `error_reporting()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `eval()`

      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Can't Disable Function <can't-disable-function>`
      + :ref:`Eval() Usage <eval()-usage>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`

    + `event_base_new()`

      + :ref:`ext/libevent <ext-libevent>`

    + `event_new()`

      + :ref:`ext/libevent <ext-libevent>`

    + `exec()`

      + :ref:`Can't Disable Function <can't-disable-function>`
      + :ref:`Shell commands <shell-commands>`

    + `exit`

      + :ref:`ext/dba <ext-dba>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/ftp <ext-ftp>`
      + :ref:`ext/gearman <ext-gearman>`
      + :ref:`ext/libevent <ext-libevent>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/zip <ext-zip>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Don't Echo Error <don't-echo-error>`
      + :ref:`Else Usage <else-usage>`
      + :ref:`Error Messages <error-messages>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Print And Die <print-and-die>`

    + `exit()`

      + :ref:`ext/event <ext-event>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `explode()`

      + :ref:`Should Use Explode Args <should-use-explode-args>`

    + `extract()`

      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `ezmlm_hash()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`


+ `F`
    + `FANN_SIGMOID_SYMMETRIC`

      + :ref:`ext/fann <ext-fann>`

    + `FILEINFO_MIME_TYPE`

      + :ref:`ext/fileinfo <ext-fileinfo>`

    + `FILTER_SANITIZE_MAGIC_QUOTES`

      + :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`

    + `FILTER_SANITIZE_SPECIAL_CHARS`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `FILTER_VALIDATE_EMAIL`

      + :ref:`ext/filter <ext-filter>`

    + `FTP_BINARY`

      + :ref:`ext/ftp <ext-ftp>`

    + `FilesystemIterator`

      + :ref:`ext/spl <ext-spl>`

    + `Foreach()`

      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Useless Check <useless-check>`

    + `fdf_create()`

      + :ref:`ext/fdf <ext-fdf>`

    + `fgetc()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `fgetss()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `file_exists()`

      + :ref:`Protocol lists <protocol-lists>`

    + `file_get_contents()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `file_put_contents()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `filesize()`

      + :ref:`Protocol lists <protocol-lists>`

    + `filter_input()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `filter_var()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `fopen()`

      + :ref:`Wrong fopen() Mode <wrong-fopen()-mode>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Protocol lists <protocol-lists>`

    + `foreach()`

      + :ref:`Foreach() Favorite <foreach()-favorite>`
      + :ref:`Should Yield With Key <should-yield-with-key>`

    + `forward_static_call()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `forward_static_call_array()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `fread()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `fscanf()`

      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `fseek()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `ftp_connect()`

      + :ref:`Can't Disable Class <can't-disable-class>`
      + :ref:`Can't Disable Function <can't-disable-function>`

    + `func_get_arg()`

      + :ref:`Has Variable Arguments <has-variable-arguments>`

    + `func_get_args()`

      + :ref:`Has Variable Arguments <has-variable-arguments>`
      + :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`
      + :ref:`Ellipsis Usage <ellipsis-usage>`

    + `func_num_args()`

      + :ref:`Has Variable Arguments <has-variable-arguments>`


+ `G`
    + `GNUPG_SIG_MODE_CLEAR`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `Generator`

      + :ref:`Should Yield With Key <should-yield-with-key>`

    + `GnuPG`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `generator`

      + :ref:`ext/csprng <ext-csprng>`
      + :ref:`Is Generator <is-generator>`
      + :ref:`Yield From Usage <yield-from-usage>`

    + `getType()`

      + :ref:`ext/judy <ext-judy>`

    + `get_browser()`

      + :ref:`Use Browscap <use-browscap>`

    + `get_called_class()`

      + :ref:`Detect Current Class <detect-current-class>`

    + `get_html_translation_table()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `get_magic_quotes_gpc()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `get_magic_quotes_gpc_runtime()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `get_magic_quotes_runtime()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`

    + `getenv()`

      + :ref:`Uses Environment <uses-environment>`

    + `gettext()`

      + :ref:`ext/gettext <ext-gettext>`

    + `gmp_div_q()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_div_qr()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_div_r()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_random()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `gnupg`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `gnupg_init()`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `gzgetss()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`


+ `H`
    + `HTML_ENTITIES`

      + :ref:`Is PHP Constant <is-php-constant>`

    + `header()`

      + :ref:`Use Cookies <use-cookies>`

    + `hebrevc()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `html_entity_decode()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `htmlentities()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Uses Default Values <uses-default-values>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `htmlspecialchars()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `htmlspecialchars_decode()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_build_query()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_build_url()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_parse_cookie()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_parse_params()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_redirect()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_support()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `I`
    + `INF`

      + :ref:`Manipulates INF <manipulates-inf>`

    + `INTL_IDNA_VARIANT_2003`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`
      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `INTL_IDNA_VARIANT_UTS46`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

    + `IN_ATTRIB`

      + :ref:`ext/inotify <ext-inotify>`

    + `ibase_errmsg()`

      + :ref:`ext/ibase <ext-ibase>`

    + `iconv_strpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `iconv_strrpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `idn_to_ascii()`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

    + `idn_to_utf8()`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

    + `image2wbmp()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `imagecolorallocate()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `imagecolorallocatealpha()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `imap_last_error()`

      + :ref:`ext/imap <ext-imap>`

    + `imap_open()`

      + :ref:`Can't Disable Function <can't-disable-function>`

    + `implode()`

      + :ref:`Implode() Arguments Order <implode()-arguments-order>`

    + `in_array()`

      + :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`

    + `ini_get()`

      + :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`

    + `inotify_init()`

      + :ref:`ext/inotify <ext-inotify>`

    + `inotify_queue_len()`

      + :ref:`ext/inotify <ext-inotify>`

    + `inotify_read()`

      + :ref:`ext/inotify <ext-inotify>`

    + `instanceof`

      + :ref:`Usage Of class_alias() <usage-of-class\_alias()>`
      + :ref:`Undefined ::class <undefined-class>`
      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`ext/psr <ext-psr>`
      + :ref:`Cant Implement Traversable <cant-implement-traversable>`
      + :ref:`Is An Extension Interface <is-an-extension-interface>`
      + :ref:`Undefined Interfaces <undefined-interfaces>`
      + :ref:`Should Make Alias <should-make-alias>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Missing Parenthesis <missing-parenthesis>`
      + :ref:`Not Equal Is Not !== <not-equal-is-not-!==>`
      + :ref:`Avoid get_class() <avoid-get\_class()>`

    + `insteadof`

      + :ref:`Undefined Insteadof <undefined-insteadof>`

    + `intl_idna_variant_2003`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `intval()`

      + :ref:`Should Typecast <should-typecast>`

    + `is_a()`

      + :ref:`Is_A() With String <is\_a()-with-string>`

    + `is_integer()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `is_null()`

      + :ref:`Use === null <use-===-null>`

    + `is_object()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `is_resource()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `is_scalar()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `is_string()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `isset`

      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`ext/session <ext-session>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`No isset() With empty() <no-isset()-with-empty()>`
      + :ref:`Useless Check <useless-check>`

    + `iterator_to_array()`

      + :ref:`Should Yield With Key <should-yield-with-key>`


+ `J`
    + `JSON_ERROR_NONE`

      + :ref:`Check JSON <check-json>`

    + `JSON_HEX_AMP`

      + :ref:`Is An Extension Constant <is-an-extension-constant>`

    + `Judy`

      + :ref:`ext/judy <ext-judy>`

    + `jdtojewish()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `jpeg2wbmp()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `json_last_error()`

      + :ref:`Check JSON <check-json>`

    + `judy`

      + :ref:`ext/judy <ext-judy>`


+ `K`
    + `KADM5_PRINC_EXPIRE_TIME`

      + :ref:`ext/kdm5 <ext-kdm5>`

    + `krsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `ksort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `L`
    + `LC_ALL`

      + :ref:`ext/gettext <ext-gettext>`

    + `LC_MESSAGES`

      + :ref:`ext/gettext <ext-gettext>`

    + `LIBXML_ERR_ERROR`

      + :ref:`ext/libxml <ext-libxml>`

    + `LIBXML_ERR_FATAL`

      + :ref:`ext/libxml <ext-libxml>`

    + `LIBXML_ERR_WARNING`

      + :ref:`ext/libxml <ext-libxml>`

    + `LOG_DEBUG`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `Locale`

      + :ref:`ext/intl <ext-intl>`

    + `ldap_sort()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `libxml_clear_errors()`

      + :ref:`ext/libxml <ext-libxml>`

    + `libxml_get_errors()`

      + :ref:`ext/libxml <ext-libxml>`
      + :ref:`ext/xsl <ext-xsl>`

    + `list()`

      + :ref:`List Short Syntax <list-short-syntax>`
      + :ref:`List With Keys <list-with-keys>`
      + :ref:`Spread Operator For Array <spread-operator-for-array>`
      + :ref:`list() May Omit Variables <list()-may-omit-variables>`
      + :ref:`Should Use Explode Args <should-use-explode-args>`

    + `locale`

      + :ref:`ext/ctype <ext-ctype>`
      + :ref:`ext/gettext <ext-gettext>`
      + :ref:`ext/intl <ext-intl>`

    + `log()`

      + :ref:`Wrong Type For Native PHP Function <wrong-type-for-native-php-function>`


+ `M`
    + `MB_OVERLOAD_MAIL`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MB_OVERLOAD_REGEX`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MB_OVERLOAD_STRING`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MCRYPT_MODE_CBC`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MCRYPT_RAND`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MCRYPT_RIJNDAEL_128`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MHASH_MD5`

      + :ref:`ext/mhash <ext-mhash>`

    + `MYSQLI`

      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `M_PI`

      + :ref:`Use Constant <use-constant>`

    + `Memcache`

      + :ref:`ext/memcache <ext-memcache>`

    + `MessagePack`

      + :ref:`ext/msgpack <ext-msgpack>`

    + `Mongo`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `MongoClient`

      + :ref:`ext/mongo <ext-mongo>`

    + `MongoDB`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `MongoDb`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `Mongodb`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `MySQLi`

      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `mail()`

      + :ref:`ext/mail <ext-mail>`
      + :ref:`Mail Usage <mail-usage>`

    + `mailparse_msg_create()`

      + :ref:`ext/mailparse <ext-mailparse>`

    + `match()`

      + :ref:`Uses PHP 8 Match() <uses-php-8-match()>`

    + `mb_encoding_aliases()`

      + :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`

    + `mb_list_encodings()`

      + :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`

    + `mb_stripos()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_stristr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strlen()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `mb_strpos()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrchr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrichr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strripos()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrpos()`

      + :ref:`mb_strrpos() Third Argument <mb\_strrpos()-third-argument>`
      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strstr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_substr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`
      + :ref:`Avoid Substr() One <avoid-substr()-one>`

    + `mcrypt_decrypt`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `mcrypt_encrypt`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `mcrypt_get_iv_size()`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `memcache`

      + :ref:`ext/memcache <ext-memcache>`

    + `microtime()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `money_format()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `mongo`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `mongodb`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `msg_get_queue()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `mt_rand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `mt_srand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `mysql_error()`

      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`Don't Echo Error <don't-echo-error>`

    + `mysqli`

      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`
      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `mysqli_connect_errno()`

      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `mysqli_connect_error()`

      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`


+ `N`
    + `NCURSES_COLOR_BLACK`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_GREEN`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_RED`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_WHITE`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NULL`

      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/xmlwriter <ext-xmlwriter>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `Null`

      + :ref:`Typehint Must Be Returned <typehint-must-be-returned>`
      + :ref:`Indices Are Int Or String <indices-are-int-or-string>`

    + `NumberFormatter`

      + :ref:`ext/intl <ext-intl>`

    + `ncurses_init()`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `ncurses_start_color()`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `next()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `null`

      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`ext/amqp <ext-amqp>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/inotify <ext-inotify>`
      + :ref:`ext/newt <ext-newt>`
      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`Not Definitions Only <not-definitions-only>`
      + :ref:`Nullable With Constant <nullable-with-constant>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Cast Unset Usage <cast-unset-usage>`
      + :ref:`Use === null <use-===-null>`
      + :ref:`No Reference For Ternary <no-reference-for-ternary>`
      + :ref:`Php 8.0 Only TypeHints <php-8.0-only-typehints>`
      + :ref:`Scalar Are Not Arrays <scalar-are-not-arrays>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Use Browscap <use-browscap>`
      + :ref:`Use NullSafe Operator <use-nullsafe-operator>`
      + :ref:`Use Nullable Type <use-nullable-type>`
      + :ref:`PSR-16 Usage <psr-16-usage>`
      + :ref:`PSR-7 Usage <psr-7-usage>`
      + :ref:`Casting Ternary <casting-ternary>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Indices Are Int Or String <indices-are-int-or-string>`
      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Results May Be Missing <results-may-be-missing>`
      + :ref:`Use Debug <use-debug>`
      + :ref:`Could Be Null <could-be-null>`
      + :ref:`Missing Some Returntype <missing-some-returntype>`


+ `O`
    + `OCI_ASSOC`

      + :ref:`ext/oci8 <ext-oci8>`

    + `OCI_RETURN_NULLS`

      + :ref:`ext/oci8 <ext-oci8>`

    + `OP_HALFOPEN`

      + :ref:`ext/imap <ext-imap>`

    + `O_NOCTTY`

      + :ref:`ext/dio <ext-dio>`

    + `O_NONBLOCK`

      + :ref:`ext/dio <ext-dio>`

    + `O_RDWR`

      + :ref:`ext/dio <ext-dio>`

    + `ob_end_flush()`

      + :ref:`ext/ob <ext-ob>`

    + `ob_get_clean()`

      + :ref:`ext/tidy <ext-tidy>`

    + `ob_start()`

      + :ref:`ext/ob <ext-ob>`
      + :ref:`ext/tidy <ext-tidy>`

    + `oci_error()`

      + :ref:`ext/oci8 <ext-oci8>`

    + `opcache_get_status()`

      + :ref:`ext/opcache <ext-opcache>`

    + `opencensus_trace_finish()`

      + :ref:`ext/opencensus <ext-opencensus>`

    + `opencensus_trace_list()`

      + :ref:`ext/opencensus <ext-opencensus>`

    + `openssl_csr_new()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_csr_sign()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_pkey_new()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_random_pseudo_bytes()`

      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`

    + `openssl_x509_read()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`


+ `P`
    + `PARSEKIT_SIMPLE`

      + :ref:`ext/parsekit <ext-parsekit>`

    + `PASSWORD_ARGON2I`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PASSWORD_ARGON2_DEFAULT_THREADS`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PASSWORD_ARGON2_DEFAULT_TIME_COST`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PHP_INT_MAX`

      + :ref:`Manipulates INF <manipulates-inf>`

    + `PREG_UNMATCHED_AS_NULL`

      + :ref:`Possible Missing Subpattern <possible-missing-subpattern>`

    + `ParseError`

      + :ref:`eval() Without Try <eval()-without-try>`

    + `pack()`

      + :ref:`Invalid Pack Format <invalid-pack-format>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`

    + `parent`

      + :ref:`Defined Class Constants <defined-class-constants>`
      + :ref:`Class Without Parent <class-without-parent>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Set Parent Definition <set-parent-definition>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`Use Contravariance <use-contravariance>`
      + :ref:`Use Covariance <use-covariance>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`

    + `parse_ini_file()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `parse_ini_string()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `parse_url()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `password_hash()`

      + :ref:`ext/password <ext-password>`

    + `pathinfo()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Use Pathinfo <use-pathinfo>`

    + `pcntl_fork()`

      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/proctitle <ext-proctitle>`

    + `pcntl_getpriority()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `pg_result_status()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `pg_select()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `php_sapi_name()`

      + :ref:`Use Constant <use-constant>`

    + `phpcredits()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `phpinfo()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Eval() Usage <eval()-usage>`

    + `phpversion()`

      + :ref:`Use Constant <use-constant>`

    + `pi()`

      + :ref:`Use Constant <use-constant>`

    + `png2wbmp()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `posix_access()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `posix_get_last_error()`

      + :ref:`ext/posix <ext-posix>`

    + `posix_setsid()`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `pow()`

      + :ref:`Negative Power <negative-power>`

    + `preg_grep()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `preg_match()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Results May Be Missing <results-may-be-missing>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`
      + :ref:`Regex Inventory <regex-inventory>`

    + `preg_replace()`

      + :ref:`Possible Missing Subpattern <possible-missing-subpattern>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
      + :ref:`Regex Inventory <regex-inventory>`

    + `preg_replace_callback()`

      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`

    + `preg_replace_callback_array()`

      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`

    + `preg_split()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `prev()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `printf()`

      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`Printf Number Of Arguments <printf-number-of-arguments>`
      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `proc_open()`

      + :ref:`Shell commands <shell-commands>`

    + `putenv()`

      + :ref:`Uses Environment <uses-environment>`


+ `R`
    + `RDkafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `RUNKIT_ACC_PUBLIC`

      + :ref:`ext/runkit <ext-runkit>`

    + `RarArchive`

      + :ref:`ext/rar <ext-rar>`

    + `RdKafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `RuntimeException`

      + :ref:`Defined Exceptions <defined-exceptions>`
      + :ref:`Throw Functioncall <throw-functioncall>`
      + :ref:`Multiple Catch <multiple-catch>`
      + :ref:`Resources Usage <resources-usage>`

    + `rand()`

      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`Use random_int() <use-random\_int()>`

    + `random_bytes()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `random_int()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `rdkafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `read_exif_data()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `readdir()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `readline_info()`

      + :ref:`ext/readline <ext-readline>`

    + `register_shutdown_function()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `register_tick_function()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `restore_include_path()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `round()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `rsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `runkit_import()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `S`
    + `SDL_GetError()`

      + :ref:`ext/sdl <ext-sdl>`

    + `SDL_INIT_VIDEO`

      + :ref:`ext/sdl <ext-sdl>`

    + `SDL_Quit()`

      + :ref:`ext/sdl <ext-sdl>`

    + `SIGHUP`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `SIGKILL`

      + :ref:`ext/posix <ext-posix>`

    + `SIGTERM`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `SNMP`

      + :ref:`ext/snmp <ext-snmp>`

    + `SOAP_1_2`

      + :ref:`ext/soap <ext-soap>`

    + `SOCK_STREAM`

      + :ref:`ext/sockets <ext-sockets>`

    + `SOL_TCP`

      + :ref:`ext/sockets <ext-sockets>`

    + `SORT_LOCALE_STRING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_NUMERIC`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_REGULAR`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_STRING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SWFAction`

      + :ref:`ext/ming <ext-ming>`

    + `SWFMovie`

      + :ref:`ext/ming <ext-ming>`

    + `SWFShape`

      + :ref:`ext/ming <ext-ming>`

    + `SWFSprite`

      + :ref:`ext/ming <ext-ming>`

    + `SeasLog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `Seaslog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `SimpleXMLElement`

      + :ref:`ext/simplexml <ext-simplexml>`

    + `SoapClient`

      + :ref:`ext/soap <ext-soap>`

    + `Static`

      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Collect Local Variable Counts <collect-local-variable-counts>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`

    + `Stdclass`

      + :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`
      + :ref:`Missing Parenthesis <missing-parenthesis>`
      + :ref:`Avoid get_class() <avoid-get\_class()>`

    + `Strtr()`

      + :ref:`Strtr Arguments <strtr-arguments>`

    + `scandir()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `seaslog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `self`

      + :ref:`Constant Class <constant-class>`
      + :ref:`Defined Class Constants <defined-class-constants>`
      + :ref:`Is Not Class Family <is-not-class-family>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`ext/pcov <ext-pcov>`
      + :ref:`Detect Current Class <detect-current-class>`
      + :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`

    + `sem_get()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `session_start()`

      + :ref:`ext/session <ext-session>`

    + `setcookie()`

      + :ref:`Use Cookies <use-cookies>`

    + `settype()`

      + :ref:`Should Typecast <should-typecast>`

    + `shell_exec()`

      + :ref:`Shell commands <shell-commands>`
      + :ref:`Missing Some Returntype <missing-some-returntype>`

    + `shm_attach()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `shmop_open()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `sizeof()`

      + :ref:`Useless Check <useless-check>`

    + `snmp`

      + :ref:`ext/snmp <ext-snmp>`

    + `socket_accept()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_addrinfo_bind()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_addrinfo_connect()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_connect()`

      + :ref:`ext/sockets <ext-sockets>`

    + `socket_create()`

      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_create_listen()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_import_stream()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_last_error()`

      + :ref:`ext/sockets <ext-sockets>`

    + `socket_read()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `socket_wsaprotocol_info_import()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `sort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `sprintf()`

      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `sqlsrv_errors()`

      + :ref:`ext/sqlsrv <ext-sqlsrv>`

    + `srand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `static`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`Dynamic Classes <dynamic-classes>`
      + :ref:`Dynamic Methodcall <dynamic-methodcall>`
      + :ref:`Dynamic Property <dynamic-property>`
      + :ref:`Is Not Class Family <is-not-class-family>`
      + :ref:`Forgotten Visibility <forgotten-visibility>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods <static-methods>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`Static Properties <static-properties>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Use ::Class Operator <use-class-operator>`
      + :ref:`SetA rray Class Definition <seta-rray-class-definition>`
      + :ref:`Set String Method Definition <set-string-method-definition>`
      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`Constant Order <constant-order>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/libevent <ext-libevent>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`ext/xdebug <ext-xdebug>`
      + :ref:`Not Definitions Only <not-definitions-only>`
      + :ref:`No Literal For Reference <no-literal-for-reference>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Wrong Type Returned <wrong-type-returned>`
      + :ref:`An OOP Factory <an-oop-factory>`
      + :ref:`Detect Current Class <detect-current-class>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
      + :ref:`Dynamic Calls <dynamic-calls>`
      + :ref:`Useless Unset <useless-unset>`
      + :ref:`Static Variables <static-variables>`
      + :ref:`Undefined Variable <undefined-variable>`
      + :ref:`FuelPHP Usage <fuelphp-usage>`

    + `stdClass`

      + :ref:`ext/memcache <ext-memcache>`
      + :ref:`Aliases <aliases>`
      + :ref:`Return Typehint Usage <return-typehint-usage>`
      + :ref:`Objects Don't Need References <objects-don't-need-references>`

    + `str_pad()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Could Use str_repeat() <could-use-str\_repeat()>`

    + `str_repeat()`

      + :ref:`Could Use str_repeat() <could-use-str\_repeat()>`

    + `stream_select()`

      + :ref:`ext/inotify <ext-inotify>`

    + `stream_set_blocking()`

      + :ref:`ext/inotify <ext-inotify>`

    + `stream_socket_client()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `stream_socket_server()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`@ Operator <@-operator>`

    + `strip_tags()`

      + :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`

    + `stripos()`

      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strlen()`

      + :ref:`Always Positive Comparison <always-positive-comparison>`

    + `strpos()`

      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strripos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strrpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strtok()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strtotime()`

      + :ref:`Next Month Trap <next-month-trap>`

    + `strtoupper()`

      + :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`

    + `strtr()`

      + :ref:`Strtr Arguments <strtr-arguments>`

    + `substr()`

      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Use array_slice() <use-array\_slice()>`
      + :ref:`Wrong Parameter Type <wrong-parameter-type>`
      + :ref:`Avoid Substr() One <avoid-substr()-one>`

    + `switch()`

      + :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`
      + :ref:`Switch Without Default <switch-without-default>`

    + `sys_get_temp_dir()`

      + :ref:`Use System Tmp <use-system-tmp>`

    + `system()`

      + :ref:`Shell commands <shell-commands>`


+ `T`
    + `T_COMMENT`

      + :ref:`ext/tokenizer <ext-tokenizer>`

    + `T_DOC_COMMENT`

      + :ref:`ext/tokenizer <ext-tokenizer>`

    + `Throwable`

      + :ref:`Useless Catch <useless-catch>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`Try With Finally <try-with-finally>`

    + `Tidy`

      + :ref:`ext/tidy <ext-tidy>`

    + `Traversable`

      + :ref:`Cant Implement Traversable <cant-implement-traversable>`

    + `tidy`

      + :ref:`ext/tidy <ext-tidy>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `time()`

      + :ref:`Conditioned Constants <conditioned-constants>`
      + :ref:`ext/zip <ext-zip>`
      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `token_get_all()`

      + :ref:`@ Operator <@-operator>`

    + `track_errors`

      + :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`

    + `traversable`

      + :ref:`Cant Implement Traversable <cant-implement-traversable>`

    + `trigger_error()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Trigger Errors <trigger-errors>`


+ `U`
    + `uniqid()`

      + :ref:`ext/eio <ext-eio>`
      + :ref:`Use random_int() <use-random\_int()>`

    + `unpack()`

      + :ref:`Invalid Pack Format <invalid-pack-format>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`

    + `uuid_create()`

      + :ref:`ext/uuid <ext-uuid>`


+ `V`
    + `var_dump()`

      + :ref:`Use Debug <use-debug>`
      + :ref:`var_dump()... Usage <var\_dump()...-usage>`

    + `var_export()`

      + :ref:`var_dump()... Usage <var\_dump()...-usage>`

    + `vprintf()`

      + :ref:`Printf Number Of Arguments <printf-number-of-arguments>`
      + :ref:`Printf Format Inventory <printf-format-inventory>`


+ `W`
    + `WeakReference`

      + :ref:`Php 7.4 New Class <php-7.4-new-class>`

    + `wordwrap()`

      + :ref:`ext/mail <ext-mail>`
      + :ref:`Mail Usage <mail-usage>`


+ `X`
    + `XHPROF_FLAGS_CPU`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `XHPROF_FLAGS_MEMORY`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `XSLTProcessor`

      + :ref:`ext/xsl <ext-xsl>`

    + `xdebug_call_class()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_file()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_function()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_line()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xhprof_disable()`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `xml_parser_create()`

      + :ref:`ext/xml <ext-xml>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `xml_parser_create_ns()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`


+ `Z`
    + `ZipArchive`

      + :ref:`ext/zip <ext-zip>`

    + `ZooKeeper`

      + :ref:`ext/zookeeper <ext-zookeeper>`

    + `Zookeeper`

      + :ref:`ext/zookeeper <ext-zookeeper>`

    + `zookeeper`

      + :ref:`ext/zookeeper <ext-zookeeper>`


+ `_`
    + `_()`

      + :ref:`ext/gettext <ext-gettext>`

    + `__CLASS__`

      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Detect Current Class <detect-current-class>`

    + `__DIR__`

      + :ref:`ext/wasm <ext-wasm>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`

    + `__FILE__`

      + :ref:`Magic Constant Usage <magic-constant-usage>`
      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`ext/fann <ext-fann>`
      + :ref:`ext/grpc <ext-grpc>`
      + :ref:`ext/inotify <ext-inotify>`
      + :ref:`ext/sem <ext-sem>`
      + :ref:`__halt_compiler <\_\_halt\_compiler>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`

    + `__FUNCTION__`

      + :ref:`PHP Overridden Function <php-overridden-function>`

    + `__LINE__`

      + :ref:`Magic Constant Usage <magic-constant-usage>`

    + `__METHOD__`

      + :ref:`Anonymous Classes <anonymous-classes>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`

    + `__call`

      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__callStatic`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__clone`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`

    + `__construct`

      + :ref:`Anonymous Classes <anonymous-classes>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Old Style Constructor <old-style-constructor>`
      + :ref:`Redefined Default <redefined-default>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`Wrong Typed Property Default <wrong-typed-property-default>`
      + :ref:`Collect Method Counts <collect-method-counts>`
      + :ref:`Courier Anti-Pattern <courier-anti-pattern>`
      + :ref:`Dependency Injection <dependency-injection>`
      + :ref:`Signature Trailing Comma <signature-trailing-comma>`
      + :ref:`Typed Property Usage <typed-property-usage>`
      + :ref:`Should Chain Exception <should-chain-exception>`

    + `__debugInfo`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__destruct`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`ext/weakref <ext-weakref>`

    + `__get`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Is A PHP Magic Property <is-a-php-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Create Magic Property <create-magic-property>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__invoke`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__isset`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__set`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Create Magic Property <create-magic-property>`

    + `__set_state`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__sleep`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__toString`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`

    + `__unset`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`

    + `__wakeup`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`






Directory by PHP Features
-------------------------

  + Array With Curly Braces

    * :ref:`No More Curly Arrays <no-more-curly-arrays>`

  + Intersection Type

    * :ref:`Wrong Type With Call <wrong-type-with-call>`

  + Property Type Declaration

    * :ref:`Typed Property Usage <typed-property-usage>`

  + Union type

    * :ref:`Wrong Type With Call <wrong-type-with-call>`




Directory by PHP Error message
------------------------------

Exakat helps reduce the amount of error and warning that code is producing by reporting pattern that are likely to emit errors.

60 PHP error message detailled : 

* :ref:`A function with return type must return a value (did you mean "return null;" instead of "return;"?) <typehint-must-be-returned>`
* :ref:`Access to undeclared static property <wrong-access-style-to-property>`
* :ref:`Accessing static property aa\:\:$a as non static <wrong-access-style-to-property>`
* :ref:`An alias (%s) was defined for method %s(), but this method does not exist <undefined-insteadof>`
* :ref:`Argument #1 ($line) must be passed by reference <array\_map()-passes-by-value>`
* :ref:`Argument #1 ($s) must be of type X, int given <wrong-type-with-call>`
* :ref:`Argument #1 must be of type float, string given <wrong-type-for-native-php-function>`
* :ref:`Argument cannot be passed by reference <typehinted-references>`
* :ref:`Argument must be of type int, array given <wrong-parameter-type>`
* :ref:`Array and string offset access syntax with curly braces is deprecated <no-more-curly-arrays>`
* :ref:`Call to a member function m() on null <use-nullsafe-operator>`
* :ref:`Call to undefined function <throw-functioncall>`
* :ref:`Cannot access parent\:\: when current class scope has no parent <class-without-parent>`
* :ref:`Cannot inherit previously-inherited or override constant A from interface i <overwritten-class-const>`
* :ref:`Cannot pass parameter 1 by reference <no-literal-for-reference>`
* :ref:`Cannot perform bitwise not on array <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on bool <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on object <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on resource <unsupported-types-with-operators>`
* :ref:`Cannot use parent when current class scope has no parent <class-without-parent>`
* :ref:`Class 'x' not found <undefined-class>`
* :ref:`Class b cannot implement previously implemented interface i <cant-implement-traversable>`
* :ref:`Class x contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (x\:\:m1, x\:\:m2) <interfaces-is-not-implemented>`
* :ref:`Class x must implement interface Traversable as part of either Iterator or IteratorAggregate <cant-implement-traversable>`
* :ref:`Creating default object from empty value <undefined-variable>`
* :ref:`Declaration of a\:\:foo($a) should be compatible with ab1\:\:foo($a) <immutable-signature>`
* :ref:`Delimiter must not be alphanumeric or backslash  <no-empty-regex>`
* :ref:`Deprecated: Required parameter $y follows optional parameter $x <wrong-optional-parameter>`
* :ref:`Headers already sent <forgotten-whitespace>`
* :ref:`Indirect modification of overloaded property c\:\:$b has no effect <no-magic-method-with-array>`
* :ref:`Methods with the same name as their class will not be constructors in a future version of PHP; %s has a deprecated constructor <old-style-constructor>`
* :ref:`Non-static method A\:\:B() should not be called statically <non-static-methods-called-in-a-static>`
* :ref:`Old style constructors are DEPRECATED in PHP 7.0, and will be removed in a future version. You should always use __construct() in new code. <old-style-constructor>`
* :ref:`Only variable references should be returned by reference <no-literal-for-reference>`
* :ref:`Only variable references should be returned by reference <no-reference-for-ternary>`
* :ref:`Only variables should be passed by reference <typehinted-references>`
* :ref:`Private methods cannot be final as they are never overridden by other classes <final-private-methods>`
* :ref:`Return value of foo() must be an instance of Bar, none returned  <typehint-must-be-returned>`
* :ref:`Return value of foo() must be of the type int, string returned <missing-some-returntype>`
* :ref:`The behavior of unparenthesized expressions containing both '.' and '+'/'-' will change in PHP 8: '+'/'-' will take a higher precedence <concat-and-addition>`
* :ref:`The behavior of unparenthesized expressions containing both '.' and '>>'/'<<' will change in PHP 8: '<<'/'>>' will take a higher precedence <concat-and-addition>`
* :ref:`Too few arguments to function foo(), 1 passed and exactly 2 expected <wrong-number-of-arguments>`
* :ref:`Too few arguments to function foo(), 1 passed and exactly 2 expected <wrong-optional-parameter>`
* :ref:`Trait 'T' not found <undefined-trait>`
* :ref:`Trait method f has not been applied, because there are collisions with other trait methods on x <useless-alias>`
* :ref:`Trying to access array offset on value of type null <scalar-are-not-arrays>`
* :ref:`Uncaught ArgumentCountError: Too few arguments to function, 0 passed <wrong-number-of-arguments>`
* :ref:`Undefined constant 'A' <undefined-constants>`
* :ref:`Undefined function <undefined-functions>`
* :ref:`Undefined property: x\:\:$e <undefined-properties>`
* :ref:`Undefined variable:  <undefined-variable>`
* :ref:`Unknown named parameter $d in <unknown-parameter-name>`
* :ref:`Unparenthesized a ? b : c ? d : e is deprecated. Use either (a ? b : c) ? d : e or a ? b : (c ? d : e) <nested-ternary-without-parenthesis>`
* :ref:`Unsupported operand types <unsupported-types-with-operators>`
* :ref:`Using $this when not in object context <static-methods-can't-contain-$this>`
* :ref:`Using array_key_exists() on objects is deprecated. Use isset() or property_exists() instead <array\_key\_exists()-works-on-arrays>`
* :ref:`define(): Declaration of case-insensitive constants is deprecated <case-insensitive-constants>`
* :ref:`pack(): Type t: unknown format code <invalid-pack-format>`
* :ref:`printf(): Too few arguments <printf-number-of-arguments>`
* :ref:`unpack(): Type t: unknown format code <invalid-pack-format>`




