name = "Compare Hash";
description = "When comparing hash values, it is important to use the strict comparison : hash_equals(), ``===`` or ``!==``. 

In a number of situations, the hash value will start with ``0e``, and PHP will understand that the comparison involves integers : it will then convert the strings into numbers, and it may end up converting them to 0.

Here is an example : 
You may also use password_hash() and password_verify() : they work together without integer conversion problems, and they can't be confused with a number.";
code = "<?php

// The two following passwords hashes matches, while they are not the same. 
$hashed_password = 0e462097431906509000000000000;
if (hash('md5','240610708',false) == $hashed_password) {
  print 'Matched.'.PHP_EOL;
}

// hash returns a string, that is mistaken with 0 by PHP
// The strength of the hashing algorithm is not a problem
if (hash('ripemd160','20583002034',false) == '0') {
  print 'Matched.'.PHP_EOL;
}

if (hash('md5','240610708',false) !== $hashed_password) {
  print 'NOT Matched.'.PHP_EOL;
}

// Display true
var_dump(md5('240610708') == md5('QNKCDZO') );

?>";
clearphp = "strict-comparisons";
severity = "S_MAJOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Use dedicated functions for hash comparisons";
modifications[] = "Use identity operators (===), and not equality operators (==) to compare hashes";
modifications[] = "Compare hashes in the database (or external system), where such confusion is not possible";
; Alternative to make this code go away. 
; One by possible solution

features[] = "cryptography";
features[] = "hash";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Magic Hashes <https://blog.whitehatsec.com/magic-hashes/>`_ ";
seeAlso[] = "`What is the best way to compare hashed strings? (PHP) <https://stackoverflow.com/questions/5211132/what-is-the-best-way-to-compare-hashed-strings-php/23959696#23959696>`_";
seeAlso[] = "`md5('240610708') == md5('QNKCDZO') <https://news.ycombinator.com/item?id=9484757>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "Traq";
file = "src/Models/User.php";
line = "105";
code = "sha1($password) == $this->password";
explain = "This code should also avoid using SHA1. ";

[example2]
project = "LiveZilla";
file = "livezilla/_lib/objects.global.users.inc.php";
line = "1391";
code = "function IsValidToken($_token)
{
    if(!empty($_token))
        if(hash(sha256,$this->Token) == $_token)
            return true;
    return false;
}";
explain = "This code is using the stronger SHA256 but compares it to another string. $_token may be non-empty, and still be comparable to 0. ";
