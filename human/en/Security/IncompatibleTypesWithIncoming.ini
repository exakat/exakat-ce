name = "Incompatible Types With Incoming Values";
description = "This analysis report invalid type used when extracting data from an HTTP request, and using them with typed method. 

This currently is based on \symfony\component\httpfoundation\request class, and its related `get*()` methods. 

The analysis also checks usage of superglobals and their related types. 

<?php

function foo(\Symfony\Component\HttpFoundation\Request $request) {
	// This is valid and typed
	$object = new X($request->getInt('value')); 

	// This is wrong : value is a string, or even an array
	$object = new X($request->get('value')); 
}

class X { 
	function __construct(int $a) {}
}

foo($_GET['a']);
// This is missing null type
function foo(array|string $arg) {}

?>
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.5.0";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_MEDIUM";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "typehint";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Add restriction before calling the methods"
modifications[] = "Add possible types in the method definition"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""
