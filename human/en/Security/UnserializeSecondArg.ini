name = "Unserialize Second Arg";
description = "Since PHP 7, unserialize() function has a second argument that limits the classes that may be unserialized. In case of a breach, this is limiting the classes accessible from unserialize(). 

One way to exploit unserialize, is to make PHP unserialized the data to an available class, may be one that may be auto-loaded.

<?php

// safe unserialization : only the expected class will be extracted
$serialized = 'O:7:\"dbClass\":0:{}';
$var = unserialize($serialized, ['dbClass']);
$var->connect();

// unsafe unserialization : $var may be of any type that was in the serialized string
// although, here, this is working well.
$serialized = 'O:7:\"dbClass\":0:{}';
$var = unserialize($serialized);
$var->connect();

// unsafe unserialization : $var is not of the expected type.
// and, here, this will lead to disaster.
$serialized = 'O:10:\"debugClass\":0:{}';
$var = unserialize($serialized);
$var->connect();

?>

";
clearphp = "";
phpVersion = "7.0+";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision = "P_HIGH"

modifications[] = "Add a list of class as second argument of any call to unserialize(). This is valid for PHP 7.0 and later."

seeAlso[] = "`unserialize() <https://www.php.net/unserialize>`_"
seeAlso[] = "`Securely Implementing (De)Serialization in PHP <https://paragonie.com/blog/2016/04/securely-implementing-de-serialization-in-php>`_"
seeAlso[] = "`Remote code execution via PHP [Unserialize] <https://www.notsosecure.com/remote-code-execution-via-php-unserialize/>`_"

features[] = "serialization"

phpErrors[] = ""

[example1]
project="Piwigo"
file="admin/configuration.php"
line="491"
code="      $disabled = @unserialize(@$conf['disabled_derivatives']);";
explain="unserialize() extracts information from the $conf variable : this variable is read from a configuration file. It is later tested to be an array, whose index may not be all set (@$disabled[$type];). It would be safer to make $disabled an object, add the class to unserialize, and set default values to the needed properties/index. "

[example2]
project="LiveZilla"
file="livezilla/_lib/objects.global.inc.php"
line="2600"
code="        $this->Customs = (!empty($_row[\"customs\"])) ? @unserialize($_row[\"customs\"]) : array();";
explain="unserialize() only extract a non-empty value here. But its content is not checked. It is later used as an array, with multiple index. "