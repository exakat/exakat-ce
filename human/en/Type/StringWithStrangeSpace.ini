name = "Strings With Strange Space";
description = "An invisible space may be mistaken for a normal space. 

However, PHP does straight comparisons, and may fail at recognizing. This analysis reports when it finds such strange spaces inside strings.

PHP doesn't mistake space and tables for whitespace when tokenizing the code.

This analysis doesn't report Unicode Codepoint Notation : those are visible in the code.

<?php

// PHP 7 notation, 
$a = "\u{3000}";
$b = " ";

// Displays false
var_dump($a === $b);

?>

See also `Unicode spaces <https://www.cs.tut.fi/~jkorpela/chars/spaces.html>`_, and 
         `disallow irregular whitespace (no-irregular-whitespace) <http://eslint.org/docs/rules/no-irregular-whitespace>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.11.0";

modifications[] = "Replace the odd spaces with a normal space"
modifications[] = "If unsecable spaces are important for presentation, add them at the templating level."


[example1]
project="OpenEMR"
file="library/globals.inc.php"
line="3270"
code="                'to' => xl('Tonga (Tonga Islands)'),";
explain="The name of the contry contains both an unsecable space (the first, after Tonga), and a normal space (between Tonga and Islands). Translations are stored in a database, which preserves the unbreakable spaces. This also means that fixing the translation must be applied to every piece of data at the same time. The xl() function, which handles the translations, is also a good place to clean the spaces before searching for the right translation."
[example2]
project="Thelia"
file="templates/backOffice/default/I18n/fr_FR.php"
line="647"
code="'Mot de passe oublié ?'";
explain="This is another example with a translation sentence. Here, the unbreakable space is before the question mark : this is a typography rule, that is common to many language. This would be a false positive, unless typography is handled by another part of the software."
