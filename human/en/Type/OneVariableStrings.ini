name = "One Variable String";
description = "These strings only contains one variable or property or array. 

<?php

$a = 0;
$b = \"$a\"; // This is a one-variable string

// Better way to write the above
$b = (string) $a;

// Alternatives : 
$b2 = \"$a[1]\"; // This is a one-variable string
$b3 = \"$a->b\"; // This is a one-variable string
$c = \"d\";
$d = \"D\";
$b4 = \"{$$c}\";
$b5 = \"{$a->foo()}\";

?>

When the goal is to convert a variable to a string, it is recommended to use the type casting (string) operator : it is then clearer to understand the conversion. It is also marginally faster, though very little. 

See also `Strings <https://www.php.net/manual/en/language.types.string.php>`_ and
         `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
modifications[] = "Drop the surrounding string, keep the variable (or property...)";
modifications[] = "Include in the string any concatenation that comes unconditionaly after or before";
modifications[] = "Convert the variable to a string with the (type) operator";

[example1]
project="Tikiwiki"
file="lib/wiki-plugins/wikiplugin_addtocart.php"
line="228"
code="	foreach ($plugininfo['params'] as $key => $param) {
		$default[\"$key\"] = $param['default'];
	}
";
explain="Double-quotes are not needed here. If casting to string is important, the (string) would be more explicit."
[example2]
project="NextCloud"
file="build/integration/features/bootstrap/BasicStructure.php"
line="349"
code="	public static function removeFile($path, $filename) {
		if (file_exists(\"$path\" . \"$filename\")) {
			unlink(\"$path\" . \"$filename\");
		}
	}
";
explain="Both concatenations could be merged, independantly. If readability is important, why not put them inside curly brackets?"
