name = "Could Be Constant";
description = "Literals may be replaced by an existing constant. 

Constants makes the code easier to read, as they may bear a meaningful name. They also hide implementation values, with a readable name, such as ``const READABLE= true;``. Later, upgrading constant values is easier than scouring the code with a new literal. 

Not all literal can be replaced by a constant values : sometimes, literal may have the same literal value, but different meanings. Check with your application semantics before changing any literal with a constant.

<?php

const A = 'abc';
define('B', 'ab');

class foo {
    const X = 'abcd';
}

// Could be replaced by B;
$a = 'ab'; 

// Could be replaced by A;
$a = 'abc'; 

// Could be replaced by foo::X;
$a = 'abcd'; 

?>

This analysis currently doesn't support arrays. 

This analysis also skips very common values, such as boolean, ``0`` and ``1``. This prevents too many false positive.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.8.4";

precision = "P_HIGH"
seeAlso[] = ""
phpVersion = ""
features[] = "constant"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Turn the literal into an existing constant"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""
