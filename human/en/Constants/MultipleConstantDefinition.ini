name = "Multiple Constant Definition";
description = "Some constants are defined several times in your code. This will lead to a fatal error, if they are defined during the same execution. 

Multiple definitions may happens at bootstrap, when the application code is collecting information about the current environment. It may also happen at inclusion time, which one set of constant being loaded, while other definition are not, avoiding conflict. Both are false positive. 

<?php

// OS is defined twice. 
if (PHP_OS == 'Windows') {
    define('OS', 'Win');
} else {
    define('OS', 'Other');
}

?>

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
modifications[] = "Move the constants to a class, and include the right class based on control flow."
modifications[] = "Give different names to the constants, and keep the condition close to utilisation."
modifications[] = "Move the constants to an external configuration file : it will be easier to identify that those constants may change."
[example1]
project="Dolibarr"
file="htdocs/main.inc.php"
line="914"
code="// Constants used to defined number of lines in textarea
if (empty($conf->browser->firefox))
{
	define('ROWS_1',1);
	define('ROWS_2',2);
	define('ROWS_3',3);
	define('ROWS_4',4);
	define('ROWS_5',5);
	define('ROWS_6',6);
	define('ROWS_7',7);
	define('ROWS_8',8);
	define('ROWS_9',9);
}
else
{
	define('ROWS_1',0);
	define('ROWS_2',1);
	define('ROWS_3',2);
	define('ROWS_4',3);
	define('ROWS_5',4);
	define('ROWS_6',5);
	define('ROWS_7',6);
	define('ROWS_8',7);
	define('ROWS_9',8);
}";
explain="All is documented here : 'Constants used to defined number of lines in textarea'. Constants are not changing during an execution, and this allows the script to set values early in the process, and have them used later, in the templates. Yet, building constants dynamically may lead to confusion, when developpers are not aware of the change. "
[example2]
project="OpenConf"
file="modules/request.php"
line="71"
code="	if (isset($_GET['ocparams']) && !empty($_GET['ocparams'])) {
		$params = '';
		if (preg_match_all(\"/(\w+)--(\w+)_-/\", $_GET['ocparams'], $matches)) {
			foreach ($matches[1] as $idx => $m) {
				if (($m != 'module') && ($m != 'action') && preg_match(\"/^[\w-]+$/\", $m)) {
					$params .= '&' . $m . '=' . urlencode($matches[2][$idx]);
					$_GET[$m] = $matches[2][$idx];
				}
			}
		}
		unset($_GET['ocparams']);
		define('OCC_SELF', $_SERVER['PHP_SELF'] . '?module=' . $_REQUEST['module'] . '&action=' . $_GET['action'] . $params);
	} elseif (isset($_SERVER['REQUEST_URI']) && strstr($_SERVER['REQUEST_URI'], '?')) {
		define('OCC_SELF', htmlspecialchars($_SERVER['REQUEST_URI']));
	} elseif (isset($_SERVER['QUERY_STRING']) && strstr($_SERVER['QUERY_STRING'], '&')) {
		define('OCC_SELF', $_SERVER['PHP_SELF'] . '?' . htmlspecialchars($_SERVER['QUERY_STRING']));
	} else {
		err('This server does not support REQUEST_URI or QUERY_STRING','Error');
	}
";
explain="The constant is build according to the situation, in the part of the script (file request.php). This hides the actual origin of the value, but keeps the rest of the code simple. Just keep in mind that this constant may have different values."
