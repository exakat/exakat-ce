name = "PHP Native Class Type Compatibility";
description = "PHP eventually enforces the method compatibilities with native classes en interfaces. 

This means that classes that extends those native PHP classes or interfaces must declare compatible types. They can't skip the type like it was the case before.

<?php

class a extends RecursiveFilterIterator { 

    // fully declared method
    function hasChildren(): bool {
        return true;
    }

    // key() returns mixed. Omitting the type used to be quiet
    function key() {}
    
    //    #[\ReturnTypeWillChange] is taken into account 

}
?>

This is needed for compatibility with PHP 8.1. This is probably good for older versions too, although invisible.

The attribute `ReturnTypeWillChange` is taken into account. Note that it is not detected when auditing with PHP < 8.0, so it won't have effect until this version. The attribute was declared in PHP 8.1, though it is also taken into account when auditing with PHP 8.0. 

";
clearphp = "";
severity = "S_MAJOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.2.4";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
;phpVersion = "8.0+"

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

features[] = "returntypewillchange"
features[] = "type-covariance"
features[] = "type-contravariance"


; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Make sure the methods are compatible or identical to the parent's method signature."

; A PHP error that may be emitted by the target faulty code
phpErrors[] = "Return type of a::key() should either be compatible with IteratorIterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice"

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""

; Optional parameters
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";
