name = "Logical Should Use Symbolic Operators";
description = "Logical operators come in two flavors :  and / &&, || / or, ^ / xor. However, they are not exchangeable, as && and and have different precedence. 



It is recommended to use the symbol operators, rather than the letter ones.";
code = "<?php

// Avoid lettered operator, as they have lower priority than expected
$a = $b and $c;
// $a === 3 because equivalent to ($a = $b) and $c;

// safe way to write the above : 
$a = ($b and $c);

$a = $b && $c;
// $a === 1

?>";
clearphp = "no-letter-logical";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_INSTANT";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Change the letter operators to the symbol one : and => &&, or => ||, xor => ^. Review the new expressions as processing order may have changed.";
modifications[] = "Add parenthesis to make sure that the order is the expected one";
; Alternative to make this code go away. 
; One by possible solution

features[] = "logical";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

[example1]
project = "Cleverstyle";
file = "modules/Uploader/Mime/Mime.php";
line = "171";
code = "  $extension = pathinfo($reference_name, PATHINFO_EXTENSION) and static::hasExtension($extension);";
explain = "$extension is assigned with the results of pathinfo($reference_name, PATHINFO_EXTENSION) and ignores static::hasExtension($extension). The same expression, placed in a condition (like an if), would assign a value to $extension and use another for the condition itself. Here, this code is only an expression in the flow.";

[example2]
project = "OpenConf";
file = "chair/export.inc";
line = "143";
code = "	$coreFile = tempnam('/tmp/', 'ocexport') or die('could not generate Excel file (6)')";
explain = "In this context, the priority of execution is used on purpose; $coreFile only collect the temporary name of the export file, and when this name is empty, then the second operand of OR is executed, though never collected. Since this second argument is a 'die', its return value is lost, but the initial assignation is never used anyway. ";
