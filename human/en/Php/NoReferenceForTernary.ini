name = "No Reference For Ternary";
description = "The ternary operator and the null coalescing operator are both expressions that only return values, and not a variable. 

This means that any provided reference will be turned into its value. While this is usually invisible, it will raise a warning when a reference is expected. This is the case with methods returning a reference. 

A PHP notice is generated when using a ternary operator or the null coalesce operator : ``Only variable references should be returned by reference``. The notice is also emitted when returning objects. 

This applies to methods, functions and closures. 

<?php

// This works
function &foo($a, $b) { 
    if ($a === 1) {
        return $b; 
    } else {
        return $a; 
    }
}

// This raises a warning, as the operator returns a value
function &foo($a, $b) { return $a === 1 ? $b : $a; }

?>

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "1.0.8";
precision = 'P_VERY_HIGH'

features[] = 'class'

seeAlso[] = "`Null Coalescing Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce>`_"
seeAlso[] = "`Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_"

phpVersion = "";

phpErrors[] = "Only variable references should be returned by reference"

modifications[] = "Drop the reference at assignation time"
modifications[] = "Drop the reference in the argument definition"
modifications[] = "Drop the reference in the function return definition"

[example1]
project="phpadsnew"
file="lib/OA/Admin/Menu/Section.php334"
line="334"
code="	function &getParentOrSelf($type)
	{
        if ($this->type == $type) {
            return $this;
        }
        else {
            return $this->parentSection != null ? $this->parentSection->getParentOrSelf($type) : null;
        }
	}
";
explain="The reference should be removed from the function definition. Either this method returns null, which is never a reference, or it returns $this, which is always a reference, or the results of a methodcall. The latter may or may not be a reference, but the Ternary operator will drop it and return by value. "
