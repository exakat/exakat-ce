name = "Should Use Coalesce";
description = "PHP 7 introduced the ``??`` operator, that replaces longer structures to set default values when a variable is not set.

<?php

// Fetches the request parameter user and results in 'nobody' if it doesn't exist
$username = $_GET['user'] ?? 'nobody';
// equivalent to: $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';
 
// Calls a hypothetical model-getting function, and uses the provided default if it fails
$model = Model::get($id) ?? $default_model;
// equivalent to: if (($model = Model::get($id)) === NULL) { $model = $default_model; }

?>

Sample extracted from PHP docs `Isset Ternary <https://wiki.php.net/rfc/isset_ternary>`_.

See also `New in PHP 7: null coalesce operator <https://lornajane.net/posts/2015/new-in-php-7-null-coalesce-operator>`_.
";
clearphp = "";
phpversion = "7.0+";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Replace the long syntax with the short one"

[example1]
project=ChurchCRM
file=src/ChurchCRM/Service/FinancialService.php
line=597
code="                $sSQL = \"INSERT INTO pledge_plg
                    (plg_famID,
                    plg_FYID, 
                    plg_date, 
                    plg_amount,
                    plg_schedule, 
                    plg_method, 
                    plg_comment, 
                    plg_DateLastEdited, 
                    plg_EditedBy, 
                    plg_PledgeOrPayment, 
                    plg_fundID, 
                    plg_depID, 
                    plg_CheckNo, 
                    plg_scanString, 
                    plg_aut_ID, 
                    plg_NonDeductible, 
                    plg_GroupKey)
                    VALUES ('\".
          $payment->FamilyID.\"','\".
          $payment->FYID.\"','\".
          $payment->Date.\"','\".
          $Fund->Amount.\"','\".
          (isset($payment->schedule) ? $payment->schedule : 'NULL').\"','\".
          $payment->iMethod.\"','\".
          $Fund->Comment.\"','\".
          date('YmdHis').\"',\".
          $_SESSION['user']->getId().\",'\".
          $payment->type.\"',\".
          $Fund->FundID.','.
          $payment->DepositID.','.
          (isset($payment->iCheckNo) ? $payment->iCheckNo : 'NULL').\",'\".
          (isset($payment->tScanString) ? $payment->tScanString : 'NULL').\"','\".
          (isset($payment->iAutID) ? $payment->iAutID : 'NULL').\"','\".
          (isset($Fund->NonDeductible) ? $Fund->NonDeductible : 'NULL').\"','\".
          $sGroupKey.\"')\";";
explain="ChurchCRM features 5 old style ternary operators, which are all in this SQL query. ChurchCRM requires PHP 7.0, so a simple code review could remove them all."
[example2]
project=Cleverstyle
file=modules/Feedback/index.php
line=37
code="$Page->content(
	h::{'cs-form form'}(
		h::{'section.cs-feedback-form article'}(
			h::{'header h2.cs-text-center'}($L->Feedback).
			h::{'table.cs-table[center] tr| td'}(
				[
					h::{'cs-input-text input[name=name][required]'}(
						[
							'placeholder' => $L->feedback_name,
							'value'       => $User->user() ? $User->username() : (isset($_POST['name']) ? $_POST['name'] : '')
						]
					),
					h::{'cs-input-text input[type=email][name=email][required]'}(
						[
							'placeholder' => $L->feedback_email,
							'value'       => $User->user() ? $User->email : (isset($_POST['email']) ? $_POST['email'] : '')
						]
					),
					h::{'cs-textarea[autosize] textarea[name=text][required]'}(
						[
							'placeholder' => $L->feedback_text,
							'value'       => isset($_POST['text']) ? $_POST['text'] : ''
						]
					),
					h::{'cs-button button[type=submit]'}($L->feedback_send)
				]
			)
		)
	)
);";
explain="Cleverstyle nests ternary operators when selecting default values. Here, moving some of them to ?? will reduce the code complexity and make it more readable. Cleverstyle requires PHP 7.0 or more recent."
