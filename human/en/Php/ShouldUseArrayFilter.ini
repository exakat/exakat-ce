name = "Should Use array_filter()";
description = "Should use array_filter().

array_filter() is a native PHP function, that extract elements from an array, based on a closure or a function. Using array_filter() shortens your code, and allows for reusing the filtering logic across the application, instead of hard coding it every time.

<?php

$a = range(0, 10); // integers from 0 to 10

// Extracts odd numbers
$odds = array_filter($a, function($x) { return $x % 2; });
$odds = array_filter($a, 'odd');

// Slow and cumbersome code for extracting odd numbers
$odds = array();
foreach($a as $v) {
    if ($a % 2) { // same filter than the closure above, or the odd function below
        $bColumn[] = $v;
    }
}

function foo($x) {
    return $x % 2; 
}

?>

array_filter() is faster than foreach() (with or without the isset() test) with 3 elements or more, and it is significantly faster beyond 5 elements. Memory consumption is the same.

See also `array_filter <https://php.net/array_filter>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "1.0.7";

modifications[] = "Use array_filter()";

[example1]
project="xataface"
file="actions/manage_build_index.php"
line="38"
code="		$indexable = array();
		foreach ( $tables as $key=>$table ){
			if ( preg_match('/^dataface__/', $table) ){
				continue;
			}
			if ( preg_match('/^_/', $table) ){
				continue;
			}
			
			if ( $index->isTableIndexable($table) ){
				$indexable[] = $table;
				//unset($tables[$key]);
			}
			
		}";
explain="This selection process has three tests : the two first are exclusive, and the third is inclusive. They could fit in one or several closures."

[example2]
project="shopware"
file="engine/Shopware/Bundle/StoreFrontBundle/Service/Core/VariantCoverService.php"
line="71"
code="        $covers = $this->variantMediaGateway->getCovers(
            $products,
            $context
        );

        $fallback = [];
        foreach ($products as $product) {
            if (!array_key_exists($product->getNumber(), $covers)) {
                $fallback[] = $product;
            }
        }
";
explain="Closure would be the best here, since $covers has to be injected in the array_filter callback. "
