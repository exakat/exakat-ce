name = "Possible Missing Subpattern";
description = "When capturing subpatterns are the last ones in a regex, PHP doesn't fill their spot in the resulting array. This leads to a possible missing index in the result array.

<?php

// displays a partial array, from 0 to 1
preg_match('/(a)(b)?/', 'adc', $r);
print_r($r);
/*
Array
(
    [0] => a
    [1] => a
)
*/

// displays a full array, from 0 to 2
preg_match('/(a)(b)?/', 'abc', $r);
print_r($r);

/*
Array
(
    [0] => ab
    [1] => a
    [2] => b
)
*/

// double 'b' when it is found
print preg_replace(',^a(b)?,', './$1$1', 'abc'); // prints ./abbc
print preg_replace(',^a(b)?,', './$1$1', 'adc'); // prints ./dc

?>
?>

The same applies to preg_replace() : the pattern may match the string, but no value is available is the corresponding sub-pattern.

In PHP 7.4, a new option was added : PREG_UNMATCHED_AS_NULL, which always provides a value for the subpatterns.

See also `Bug #50887 preg_match , last optional sub-patterns ignored when empty <https://bugs.php.net/bug.php?id=50887>`_ and 
         `Bug #73948 Preg_match_all should return NULLs on trailing optional capture groups. <https://bugs.php.net/bug.php?id=73948>`_.
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.6.1";

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Add an always capturing subpatterns after the last ?"
modifications[] = "Move the ? inside the parenthesis, so the parenthesis is always on, but the content may be empty"
modifications[] = "Add a test on the last index of the resulting array, to ensure it is available when needed"
modifications[] = "Use the PREG_UNMATCHED_AS_NULL option (PHP 7.4+)"

[example1]
project="phpMyAdmin"
file="libraries/classes/Advisor.php"
line="557"
code="                if (preg_match(\"/rule\s'(.*)'( \[(.*)\])?$/\", $line, $match)) {
                    $ruleLine = 1;
                    $ruleNo++;
                    $rules[$ruleNo] = ['name' => $match[1]];
                    $lines[$ruleNo] = ['name' => $i + 1];
                    if (isset($match[3])) {
                        $rules[$ruleNo]['precondition'] = $match[3];
                        $lines[$ruleNo]['precondition'] = $i + 1;
                    }
";
explain="The last capturing subpattern is ``( \[(.*)\])?`` and it is optional. Indeed, when the pattern succeed, the captured values are stored in ``$match``. Yet, the code checks for the existence of ``$match[3]`` before using it."

[example2]
project="SPIP"
file="ecrire/inc/filtres_dates.php"
line="73"
code="			if (preg_match(\"#^([12][0-9]{3}[-/][01]?[0-9])([-/]00)?( [-0-9:]+)?$#\", $date, $regs)) {
				$regs = array_pad($regs, 4, null); // eviter notice php
				$date = preg_replace(\"@/@\", \"-\", $regs[1]) . \"-00\" . $regs[3];
			} else {
				$date = date(\"Y-m-d H:i:s\", strtotime($date));
			}

";
explain="This code avoid the PHP notice by padding the resulting array (see comment in French : eviter === avoid)";

