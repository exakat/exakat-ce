name = "Safe Phpvariables";
description = "Mark the safe PHP variables. 

PHP superglobales are usually filled with external data that should be filtered. However, some values may be considered safe, as they are under the control of the developer.

``$_GET``, ``$_POST``, ``$_FILES``, ``$_REQUEST``, ``$_COOKIES`` are all considered unsafe. Their level of validation is checked in other analysis. 

``$_SERVER`` is partially safe. It is valid for the following values : ``DOCUMENT_ROOT``, ``REQUEST_TIME``, ``REQUEST_TIME_FLOAT``, ``SCRIPT_NAME``, ``SERVER_ADMIN``, ``_``.

<?php

// DOCUMENT_ROOT is a safe variable
echo $_SERVER['DOCUMENT_ROOT'];

// $_SERVER's PHP_SELF MUST be validated before usage
echo $_SERVER['PHP_SELF'];

// $_GET MUST be validated before usage
echo $_GET['_'];

?>

See also `Predefined Variables <https://www.php.net/manual/en/reserved.variables.php>`_.
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.2";
precision = "P_HIGH"

features[] = "superglobal"
features[] = "php-variable"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = ""

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Optional parameters
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";
