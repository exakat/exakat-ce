name = "Interfaces";
id = "interface"
alias[] = ""
description = "Object interfaces allow you to create code which specifies which methods a class must implement, without having to define how these methods are implemented.

Interfaces may have methods signatures, without a body, and constants. 
 "
code = "<?php

// Declare the interface 'Template'
interface Template
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implement the interface
// This will work
class WorkingTemplate implements Template
{
    private $vars = [];
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

?>"
documentation = "https://www.php.net/manual/en/language.oop5.interfaces.php"
analyzers[] = "Interfaces/InterfaceUsage"
cobblers[] = ""
phpVersionSince = ""
phpVersionUntil = ""
related[] = "fluent-interface"
tags[] = "keyword"
seeAlso[]=  "`Interfaces vs Abstract Classes in PHP <https://ashallendesign.co.uk/blog/interfaces-vs-abstract-classes-in-php>`_"
seeAlso[]=  "`Interfaces - the misunderstood concept <http://radify.io/blog/interfaces-the-misunderstood-concept/>`_"
seeAlso[]=  "`Granular interfaces <https://sebastiandedeyne.com/granular-interfaces/>`_"
seeAlso[] = "`When to add an interface to a class <https://matthiasnoback.nl/2018/08/when-to-add-an-interface-to-a-class/>`_"
seeAlso[] = "`Code to an interface! <https://blog.oussama-mater.tech/code-to-an-interface/>`_"
