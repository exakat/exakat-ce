name = "Check After Null Safe Operator";
description = "Null-safe operator is ``?->``, which prevents fatal errors in case the object of the call is NULL. The execution continues, though the result of the expression is now NULL too. 

While it saves some checks in certain cases, the null-safe operator should be followed by a check on the returned value to process any misfire of the method. 

This analysis checks that the result of the expression is collected, and compared to null.";
code = "<?php

$result = $object?->foo(); 

if ($result === null) {
	throw new ObjectException(The object could not call $foo\n);
}

?>";
clearphp = "";
severity = "S_MAJOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.6.4";
precision = "P_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Collect and check the result of the expression to null";
modifications[] = "Remove the null-safe operator and check before calling the object's method or property";
; Alternative to make this code go away. 
; One by possible solution

features[] = "nullsafe-object-operator";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "8.1+";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";

