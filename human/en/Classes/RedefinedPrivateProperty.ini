name = "Redefined Private Property";
description = "Private properties are local to their defined class. PHP doesn't forbid the re-declaration of a private property in a child class.

However, having two or more properties with the same name, in the class hierarchy tends to be error prone. Methods will be accessing properties with the same name, but with different values. 

<?php

class A {
    private $isReady = true;
}

class B {
    private $isReady = false;
}

?>

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "1.2.3";
precision = 'P_VERY_HIGH'

modifications[] = 'Remove the property in the children classes'
modifications[] = 'Rename the property in the children classes'
modifications[] = 'Change the visibility in the parent class'

features[] = 'private'

seeAlso[] = ""

phpErrors[] = ""
phpVersion = "";

isPHP = 1;
isStubs = 1;
isExt = 1;

[example1]
project="Zurmo"
file="app/protected/modules/zurmo/models/OwnedCustomField.php"
line="51"
code="    class OwnedCustomField extends CustomField
    {
        /**
         * OwnedCustomField does not need to have a bean because it stores no attributes and has no relations
         * @see RedBeanModel::canHaveBean();
         * @var boolean
         */
        private static $canHaveBean = false;

/..../

        /**
         * @see RedBeanModel::getHasBean()
         */
        public static function getCanHaveBean()
        {
            if (get_called_class() == 'OwnedCustomField')
            {
                return self::$canHaveBean;
            }
            return parent::getCanHaveBean();
        }

";
explain="The class OwnedCustomField is part of a large class tree : OwnedCustomField extends CustomField,
CustomField extends BaseCustomField, BaseCustomField extends RedBeanModel, RedBeanModel extends BeanModel. 

Since $canHaveBean is distinct in BeanModel and in OwnedCustomField, the public method getCanHaveBean() also had to be overloaded. "