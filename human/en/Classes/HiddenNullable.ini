name = "Hidden Nullable Typehint";
description = "Argument with default value of null are nullable. It works both with the ``null`` typehint (PHP 8.0), or the ``?`` operator are not used, setting the default value to null is allowed, and makes the argument nullable.

This works with single types, both classes and scalars; it works with union types but not with intersection types. 

This doesn't happen with properties : they must be defined with the nullable type to accept a ``null``value as default value.

This doesn't happen with constant, which can't be typehinted. 

<?php

// explicit nullable parameter $s
function bar(?string $s = null) {

// implicit nullable parameter $s
function foo(string $s = null) {
    echo $s ?? 'NULL-value';
}

// both display NULL-value
foo(); 
foo(null);

?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.0";

precision = "P_VERY_HIGH"

seeAlso[] = "`Nullable types <https://wiki.php.net/rfc/nullable_types>`_"
seeAlso[] = "`Type declaration <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_"
seeAlso[] = "`Deprecate implicit nullable parameters #3535 <https://github.com/php/php-src/pull/3535>`_"

features[] = "typehint"
features[] = "nullable"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Change the default value to a compatible literal : for example, ``string $s = ''``"
modifications[] = "Add the explicit ``?`` nullable operator, or ``null``with PHP 8.0"
modifications[] = "Remove the default value"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""
phpVersion = ""

; Optional parameters
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";

