name = "Cyclic References";
description = "Avoid cyclic references. 

Cyclic references happen when an object points to another object, which reciprocate. This is particularly possible with classes, when the child class has to keep a reference to the parent class. 

<?php

class a {
    private $p = null;
    
    function foo() {
        $this->p = new b();
        // the current class is stored in the child class
        $this->p->m($this);
    }
}

class b {
    private $pb = null;
    
    function n($a) {
        // the current class keeps a link to its parent
        $this->pb = $a;
    }
}
?>

Cyclic references, or circular references, are memory intensive : only the garbage collector can understand when they may be flushed from memory, which is a costly operation. On the other hand, in an acyclic reference code, the reference counter will know immediately know that an object is free or not. 
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.3";

precision = 'P_VERY_HIGH'

features[] = 'class'
features[] = 'extends'

seeAlso[] = "`About circular references in PHP <https://johann.pardanaud.com/blog/about-circular-references-in-php>`_"
seeAlso[] = "`A Journey to find a memory leak <https://jolicode.com/blog/a-journey-to-find-a-memory-leak/>`_"

phpErrors[] = ""

phpVersion = "";

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Use a different object when calling the child objects. "
modifications[] = "Refactor your code to avoid the cyclic reference."
