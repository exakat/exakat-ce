name = "Parent First";
description = "When calling parent constructor, always put it first in the ``__construct`` method. It ensures the parent is correctly build before the child start using values. 

<?php

class father {
    protected $name = null;
    
    function __construct() {
        $this->name = init();
    }
}

class goodSon {
    function __construct() {
        // parent is build immediately, 
        parent::__construct();
        echo "my name is ".$this->name;
    }
}

class badSon {
    function __construct() {
        // This will fail.
        echo "my name is ".$this->name;

        // parent is build later, 
        parent::__construct();
    }
}

?>

This analysis doesn't apply to Exceptions. 
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "1.0.5";
modifications[] = "Use ``parent::__construct`` as the first call in the constructor."
[example1]
project="shopware"
file="wp-admin/includes/misc.php"
line="74"
code="/**
 * Class FieldSet
 */
class FieldSet extends BaseContainer
{
    /**
     * @var string
     */
    protected $title;

    /**
     * @param string $name
     * @param string $title
     */
    public function __construct($name, $title)
    {
        $this->title = $title;
        $this->name = $name;
        parent::__construct();
    }
";
explain="Here, the parent is called last. Givent that $title is defined in the same class, it seems that $name may be defined in the BaseContainer class. In fact, it is not, and BasecContainer and FieldSet are fairly independant classes. Thus, the parent::__construct call could be first here, though more as a coding convention."

[example2]
project="PrestaShop"
file="controllers/admin/AdminPatternsController.php"
line="30"
code="class AdminPatternsControllerCore extends AdminController
{
    public $name = 'patterns';

    public function __construct()
    {
        $this->bootstrap = true;
        $this->show_toolbar = false;
        $this->context = Context::getContext();

        parent::__construct();
    }

";
explain="A good number of properties are set in the current object even before the parent AdminController(Core) is called. 'table' and 'lang' acts as default values for the parent class, as it (the parent class) would set them to another default value. Many properties are used, but not defined in the current class, nor its parent. This approach prevents the constructor from requesting too many arguments. Yet, as such, it is difficult to follow which of the initial values are transmitted via protected/public properties rather than using the __construct() call."

