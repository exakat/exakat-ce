name = "Wrong Access Style to Property";
description = "Use the right syntax when reaching for a property. Static properties use the ``::`` operator, and non-static properties use ``->``. 

Mistaking one of the other raise two different reactions from PHP : ``Access to undeclared static property`` is a fatal error, while ``PHP Notice:  Accessing static property aa::$a as non static`` is a notice.

<?php

class a { 
    static public $a = 1;
    
    function foo() {
        echo self::$a; // right
        echo $this->a; // WRONG
    }
}

class b { 
    public $b = 1;

    function foo() {
        echo $this->$b;  // right
        echo b::$b;      // WRONG
    }
}

?>

This analysis reports both static properties with a `->` access, and non-static properties with a `::` access.

";
clearphp = "";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "1.4.9";
precision = 'P_VERY_HIGH'

modifications[] = "Match the property call with the definition"
modifications[] = "Make the property static"

features[] = 'declaration'

seeAlso[] = "`Static Keyword <https://www.php.net/manual/en/language.oop5.static.php>`_"

phpErrors[] = "Accessing static property aa::$a as non static"
phpErrors[] = "Access to undeclared static property"

phpVersion = "";

[example1]
project="HuMo-Gen"
file="wp-admin/includes/misc.php"
line="74"
code="    protected function wavToMp3($data)
    {
        if (!file_exists(self::$lame_binary_path) || !is_executable(self::$lame_binary_path)) {
            throw new Exception('Lame binary "' . $this->lame_binary_path . '" does not exist or is not executable');
        }
";
explain="lame_binary_path is a static property, but it is accessed as a normal property in the exception call, while it is checked with a valid syntax."
