name = "Parent Is Not Static";
description = "The `parent` keyword behaves like `self`, not like `static`. It links to the parent of the defining expression, not to the one being called.

This may skip the parent of the calling class, and create a `Undefined method` call, or yield the wrong `::class` value. It may also skip a local version of the method. 

<?php

class w {
}

class x extends w {
    function foo() {
        parent::method();
    }

    // method() is in the parent of Y, but not in the one of X.
    function method() {
        print __METHOD__;
    }
}

class y extends x {}

(new y)->foo(); 
// print W::method
(new y)->method(); 
// print x::method

?>
";
clearphp = "";
severity = "S_MAJOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.4.3";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_VERY_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "self";
features[] = "static";
features[] = "parent";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Use self keyword"
modifications[] = "Use static keyword"
modifications[] = "Use hard-coded class name keyword"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""
