name = "No Null With Null Safe Operator";
description = "When building an expression with a null-safe operator, it may fail and produce a NULL as a result. When the last method of the expression also returns null (or void, which is transformed in null), then it is not possible to differentiate between a failure and a valid execution of the method. 

As such, it is recommended to avoid finishing with a method that returns null, in an expression that uses a null-safe operator.";
code = "<?php

class x {
	function foo($a) : ?int { 
		if ($a % 2) {
			return $a;
		} else {
			return null;
		}
	}
}

$x = x::getInstance(x::class);
$result = $x?->foo($a);

// Is that an error or a valid result ? 
if ($result === null) { }

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_SLOW";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.6.4";
precision = "P_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Avoid using the null-safe operator in that expression";
modifications[] = "Make the last property / method in the expression not return null";
; Alternative to make this code go away. 
; One by possible solution

features[] = "nullsafe-object-operator";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "8.1";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";

