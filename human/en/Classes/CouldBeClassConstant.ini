name = "Could Be Class Constant";
description = "When a property is defined, with a default value, then read, but never modified, it could be turned into a constant. 

Such a property may initially be intended to have a value update, but that never turned out in the code. 

By making the property a constant, it makes visible its constant nature, and reduce the complexity of the code.";
code = "<?php

class foo {
    // $this->bar is never modified. 
    private $bar = 1;
    
    // $this->foofoo is modified, at least once
    private $foofoo = 2;
    
    function method($a) {
        $this->foofoo = $this->bar + $a + $this->foofoo;
        
        return $this->foofoo;
    }
    
}

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Turn the property into a class constant";
; Alternative to make this code go away. 
; One by possible solution

features[] = "class-constant";
features[] = "visibility";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "Class Constants `<https://www.php.net/manual/en/language.oop5.constants.php>`_";
; List of links of interest

related[] = "Functions/NeverUsedParameter";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary
