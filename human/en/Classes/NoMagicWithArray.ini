name = "No Magic Method With Array";
description = "Magic method ``__set()`` doesn't work for array syntax. 

When overloading properties, they can only be used for scalar values, excluding arrays. Under the hood, PHP uses ``__get()`` to reach for the name of the property, and doesn't recognize the following index as an array. It yields an error : "Indirect modification of overloaded property".

<?php

class c {
    private $a;
    private $o = array();

    function __get($name) {
        return $this->o[$name];
    }
    
    function foo() {
        // property b doesn't exists
        $this->b['a'] = 3;
        
        print_r($this);
    }

    // This method has no impact on the issue
    function __set($name, $value) {
        $this->o[$name] = $value;
    }
}

$c = new c();
$c->foo();

?>

It is possible to use the array syntax with a magic property : by making the ``__get`` returns an array, the syntax will actually extract the expected item in the array.

This is not reported by linting.

In this analysis, only properties that are found to be magic are reported. For example, using the b property outside the class scope is not reported, as it would yield too many false-positives.

See also `Overload <https://www.php.net/manual/en/language.oop5.overloading.php#object.get>`_.
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "0.12.4";
precision="P_MEDIUM";

modifications[] = "Use a distinct method to append a new value to that property";
modifications[] = "Assign the whole array, and not just one of its elements";

features[] = 'magic-method'

seeAlso[] = ""

phpVersion = "";


rulesetBuild_title="No Magic Method With Array"
rulesetBuild_code = "class Foo {
    function __get($name) {}
}
// magic is not an array
(new Foo())->magic[1];"

phpErrors[] = "Indirect modification of overloaded property c::$b has no effect";
