name = "Non Static Methods Called In A Static";
description = "Static methods have to be declared as such (using the static keyword). Then, one may call them without instantiating the object.

PHP 7.0, and more recent versions, yield a deprecated error : ``Non-static method A::B() should not be called statically``.

PHP 5 and older doesn't check that a method is static or not : at any point, the code may call one method statically.

<?php
    class x {
        static public function sm( ) { echo __METHOD__.\n; }
        public public sm( ) { echo __METHOD__.\n; }
    } 
    
    x::sm( ); // echo x::sm 
    
    // Dynamic call
    ['x', 'sm']();
    [\x::class, 'sm']();

    $s = 'x::sm';
    $s();

?>

It is a bad idea to call non-static method statically. Such method may make use of special
variable $this, which will be undefined. PHP will not check those calls at compile time,
nor at running time. 

It is recommended to update this situation : make the method actually static, or use it only 
in object context.

Note that this analysis reports all static method call made on a non-static method,
even within the same class or class hierarchy. PHP silently accepts static call to any
in-family method.

<?php
    class x {
        public function foo( ) { self::bar() }
        public function bar( ) { echo __METHOD__.\n; }
    } 
?>

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision="P_MEDIUM";

rulesetBuild_title="Non Static Methods Called In A Static"
rulesetBuild_code = "class x {
    function foo() {}
}
X::foo();
"

phpErrors[] = "Non-static method A::B() should not be called statically"

modifications[] = "Call the method the correct way"
modifications[] = "Define the method as static"

features[] = "static"

phpVersion = ""

seeAlso[] = "`Static Keyword <https://www.php.net/manual/en/language.oop5.static.php>`_"

[example1]
project="Dolphin"
file="Dolphin-v.7.3.5/xmlrpc/BxDolXMLRPCFriends.php"
line="11"
code="class BxDolXMLRPCFriends
{
    function getFriends($sUser, $sPwd, $sNick, $sLang)
    {
        $iIdProfile = BxDolXMLRPCUtil::getIdByNickname ($sNick);

";
explain="getIdByNickname() is indeed defined in the class 'BxDolXMLRPCUtil' and it calls the database. The class relies on functions (not methods) to query the database with the correct connexion. "

[example2]
project="Magento"
file="app/code/core/Mage/Paypal/Model/Payflowlink.php"
line="143"
code="Mage_Payment_Model_Method_Abstract::isAvailable($quote)";
explain="Mage_Payment_Model_Method_Abstract is an abstract class : this way, it is not possible to instantiate it and then, access its methods. The class is extended, so it could be called from one of the objects. Although, the troubling part is that isAvailable() uses $this, so it can't be static. "
