name = "Use Instanceof";
description = "The ``instanceof`` operator is a more precise alternative to ``is_object()``. It is also faster.

instanceof checks for an variable to be of a class or its parents or the interfaces it implements. 
Once ``instanceof`` has been used, the actual attributes available (properties, constants, methods) are known, unlike with ``is_object()``.

Last, ``instanceof`` may be upgraded to Typehint, by moving it to the method signature. 

<?php

class Foo {

    // Don't use is_object
    public function bar($o) {
        if (!is_object($o)) { return false; } // Classic argument check
        return $o->method();
    }

    // use instanceof
    public function bar($o) {
        if ($o instanceof myClass) {  // Now, we know which methods are available
            return $o->method();
        }
        
        return false; } // Default behavior
    }

    // use of typehinting
    // in case $o is not of the right type, exception is raised automatically
    public function bar(myClass $o) {
        return $o->method();
    }
}

?>

``instanceof`` and ``is_object()`` may not be always interchangeable. Consider using isset() on a known property for a simple check on objects. You may also consider is_string(), is_integer() or is_scalar(), in particular instead of ``!is_object()``.

The ``instanceof`` operator is also faster than the ``is_object()`` functioncall. 
";
modifications[] = "Use instanceof and remove is_object()"
modifications[] = "Create a high level interface to check a whole family of classes, instead of testing them individually"
modifications[] = "Use typehint when possible"
modifications[] = "Avoid mixing scalar types and objects in the same variable"
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision="P_HIGH"

modifications[] = ''

features[] = 'instanceof'

seeAlso[] = "`Type Operators <https://www.php.net/manual/en/language.operators.type.php#language.operators.type>`_"
seeAlso[] = "`is_object <https://www.php.net/manual/en/function.is-object.php>`_"

phpErrors[] = ""

phpVersion = "";

[example1]
project="TeamPass"
file="includes/libraries/Database/Meekrodb/db.class.php"
line="506"
code="  protected function parseTS($ts) {
    if (is_string($ts)) return date('Y-m-d H:i:s', strtotime($ts));
    else if (is_object($ts) && ($ts instanceof DateTime)) return $ts->format('Y-m-d H:i:s');
  }
";
explain="In this code, ``is_object()`` and ``instanceof`` have the same basic : they both check that $ts is an object. In fact, ``instanceof`` is more precise, and give more information about the variable. "
[example2]
project="Zencart"
file="includes/modules/payment/firstdata_hco.php"
line="104"
code="  
  function __construct() {
    global $order;

    // more lines, no mention of $order
    if (is_object($order)) $this->update_status();

    // more code
}
";
explain="In this code, ``is_object()`` is used to check the status of the order. Possibly, $order is false or null in case of incompatible status. Yet, when $object is an object, and in particular being a global that may be assigned anywhere else in the code, it seems that the method 'update_status' is magically always available. Here, using instance of to make sure that $order is an 'paypal' class, or a 'storepickup' or any of the payment class.  "

