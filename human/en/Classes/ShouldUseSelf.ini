name = "Could Use self";
description = "``self`` keyword refers to the current class, or any of its parents. Using it is just as fast as the full class name, it is as readable and it is will not be changed upon class or namespace change.

It is also routinely used in traits : there, ``self`` represents the class in which the trait is used, or the trait itself. 

<?php

class x {
    const FOO = 1;
    
    public function bar() {
        return self::FOO;
// same as return x::FOO;
    }
}

?>

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = "P_HIGH"

features[] = "self"
features[] = "class"

phpErrors[] = ""

modifications[] = "replace the explicit name with self"

seeAlso[] = "`Scope Resolution Operator (::) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_"

[example1]
project="WordPress"
file="wp-admin/includes/misc.php"
line="74"
code="
class Securimage 
{
// Lots of code
            Securimage::$_captchaId = $id;
}
";
explain="Securimage could be called self."

[example2]
project="LiveZilla"
file="livezilla/_lib/objects.global.users.inc.php"
line="1599"
code="
class Operator extends BaseUser 
{
    static function ReadParams()
    {
        if(!empty($_POST[POST_EXTERN_REQUESTED_INTERNID]))
            return Communication::GetParameter(POST_EXTERN_REQUESTED_INTERNID,"",$c,FILTER_SANITIZE_SPECIAL_CHARS,null,32);
        else if(!empty($_GET["operator"]))
        {
            $userid = Communication::GetParameter("operator","",$c,FILTER_SANITIZE_SPECIAL_CHARS,null,32,false,false);
            $sysid = Operator::GetSystemId($userid);
}
";
explain="Using self makes it obvious that Operator::GetSystemId() is a local call, while Communication::GetParameter() is external."
