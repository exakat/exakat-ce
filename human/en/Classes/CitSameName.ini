name = "Class, Interface, Enum Or Trait With Identical Names";
description = "The following names are used at the same time for classes, interfaces or traits. For example, 

<?php
    class a     { /* some definitions */ }
    interface a { /* some definitions */ }
    trait a     { /* some definitions */ }
    enum a      { /* some definitions */ } // PHP 8.1
?>

Even if they are in different namespaces, identical names makes classes easy to confuse. This is often solved by using alias at import time : this leads to more confusion, as a class suddenly changes its name. 

Internally, PHP use the same list for all classes, interfaces and traits. As such, it is not allowed to have both a trait and a class with the same name.

In PHP 4, and PHP 5 before namespaces, it was not possible to have classes with the same name. They were simply included after a check. 

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision = "P_VERY_HIGH"

seeAlso[] = ""

phpErrors[] = ""

features[] = "class"

modifications[] = ""

modifications[] = "Use distinct names for every class, trait and interface. "
modifications[] = "Keep eponymous classes, traits and interfaces in distinct files, for definition but also for usage. When this happens, rename one of them."
[example1]
project="shopware"
file="engine/Shopware/Components/Form/Interfaces/Element.php"
line="30"
code="interface Element { /**/ } // in engine/Shopware/Components/Form/Interfaces/Element.php:30

class Element implements \JsonSerializable { /**/ } 	// in engine/Shopware/Bundle/EmotionBundle/Struct/Element.php:29

class Element extends ModelEntity { /**/ } 	// in /engine/Shopware/Models/Document/Element.php:37

";
explain="Most Element classes extends ModelEntity, which is an abstract class. There is also an interface, called Element, for forms. And, last, one of the class Element extends JsonSerializable, which is a PHP native interface. Namespaces are definitely crucial to understand which Element is which. "
[example2]
project="NextCloud"
file="lib/private/Files/Storage/Storage.php"
line="33"
code="interface Storage extends \OCP\Files\Storage { /**/ }
";
explain="Interface Storage extends another Storage class. Here, the fully qualified name is used, so we can understand which storage is which at read time : a 'use' alias would make this line more confusing."
