name = "Don't Send $this In Constructor";
description = "Don't use ``$this`` as an argument while in the __construct(). Until the constructor is finished, the object is not finished, and may be in an unstable state. Providing it to another code may lead to error. 

This is true when the receiving structure puts the incoming object immediately to work, and don't store it for later use. 

<?php

// $this is only provided when Foo is constructed
class Foo {
    private $bar = null;
    private $data = array();
    
    static public function build($data) {
        $foo = new Foo($data);
        // Can't build in one call. Must make it separate.
        $foo->finalize();
    }

    private function __construct($data) {
        // $this is provided too early
        $this->data = $data;
    }
    
    function finalize() {
        $this->bar = new Bar($this);
    }
}

// $this is provided too early, leading to error in Bar
class Foo2 extends Foo {
    private $bar = null;
    private $data = array();
    
    function __construct($data) {
        // $this is provided too early
        $this->bar = new Bar($this);
        $this->data = $data;
    }
}

class Bar {
    function __construct(Foo $foo) {
        // the cache is now initialized with a wrong 
        $this->cache = $foo->getIt();
    }
}

?>

See also `Don't pass this out of a constructor <http://www.javapractices.com/topic/TopicAction.do?Id=252>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "1.0.4";
modifications[] = "Finish the constructor first, then call an external object."
modifications[] = "Sending $this should be made accessible in a separate method, so external objects may call it."
modifications[] = "Sending the current may be the responsibility of the method creating the object."
[example1]
project="Woocommerce"
file="includes/class-wc-cart.php"
line="107"
code="	/**
	 * Constructor for the cart class. Loads options and hooks in the init method.
	 */
	public function __construct() {
		$this->session          = new WC_Cart_Session( $this );
		$this->fees_api         = new WC_Cart_Fees( $this );
		$this->tax_display_cart = $this->is_tax_displayed();

		// Register hooks for the objects.
		$this->session->init();";
explain="WC_Cart_Session and WC_Cart_Fees receives $this, the current object, at a moment where it is not consistent : for example, tax_display_cart hasn't been set yet. Although it may be unexpected to have an object called WC_Cart being called by the session or the fees, this is still a temporary inconsistence. "
[example2]
project="Contao"
file="system/modules/core/library/Contao/Model.php"
line="110"
code="	/**
	 * Load the relations and optionally process a result set
	 *
	 * @param \Database\Result $objResult An optional database result
	 */
	public function __construct(\Database\Result $objResult=null)
	{
        // Some code was removed 
			$objRegistry = \Model\Registry::getInstance();

			$this->setRow($arrData); // see #5439
			$objRegistry->register($this);
			
        // More code below
        // $this-> are set
        // $objRegistry is called 
    }
";
explain="$this is send to $objRegistry. $objRegistry is obtained with a factory, \Model\Registry::getInstance(). It is probably fully prepared at that point. Yet, $objRegistry is called and used to fill $this properties with full values. At some point, $objRegistry return values without having a handle on a fully designed object. "
