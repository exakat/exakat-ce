name = "Ambiguous Visibilities";
description = "The properties have the same name, but have different visibilities, across different classes. 

While it is legit to have a property with the same name in different classes, it may easily lead to confusion. As soon as the context is need to understand if the property is accessible or not, the readability suffers.

It is recommended to handle the same properties in the same way across classes, even when the classes are not related. 

<?php

class person {
    public $name;
    private $address;
}

class gangster {
    private $name;
    public $nickname;
    private $address;
}

$someone = Human::load(123);
echo 'Hello, '.$someone->name;

?>


";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "1.3.4";

modifications[] = "Sync visibilities for both properties, in the different classes"
modifications[] = "Use different names for properties with different usages"

[example1]
project="Typo3"
file="typo3/sysext/backend/Classes/Controller/NewRecordController.php"
line="90"
code="class NewRecordController
{
/.. many lines../
    /**
     * @var array
     */
    protected $allowedNewTables;
    
class DatabaseRecordList
{
/..../ 
    /**
     * Used to indicate which tables (values in the array) that can have a
     * create-new-record link. If the array is empty, all tables are allowed.
     *
     * @var string[]
     */
    public $allowedNewTables = [];

";
explain="$allowedNewTables is declared once  protected and once public. $allowedNewTables is rare : 2 occurences. This may lead to confusion about access to this property."
