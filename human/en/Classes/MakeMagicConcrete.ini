name = "Make Magic Concrete";
description = "Speed up execution by replacing magic calls by concrete properties. 

Magic properties are managed dynamically, with __get() and __set(). They replace property access by a methodcall, and they are much slower than the first. 

When a property name is getting used more often, it is worth creating a concrete property, and skip the method call. The threshold for ``magicMemberUsage`` is 1, by default. 

<?php

class x {
    private $values = array('a' => 1,
                            'b' => 2);
                            
    function __get($name) {
        return $this->values[$name] ?? '';
    }
}

$x = new x();
// Access to 'a' is repeated in the code, at least 'magicMemberUsage' time (cf configuration below)
echo $x->a; 

?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.8.3";

precision = "P_HIGH"

seeAlso[] = "Performances/MemoizeMagicCall"

features[] = "magic-method"

phpVersion = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Make frequently used properties concrete; keep the highly dynamic as magic"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

[parameter1]
name="magicMemberUsage";
default=1;
type="integer";
description="Minimal number of magic member usage across the code, to trigger a concrete property.";
