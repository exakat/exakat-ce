name = "Too Many Injections";
description = "When a class is constructed with more than four dependencies, it should be split into smaller classes.

<?php

// This class relies on 5 other instances. 
// It is probably doing too much.
class Foo {
    public function __construct(
            A $a, 
            B $b, 
            C $c,
            D $d
            E $e ) {
        $this->a = $a;
        $this->b = $b;
        $this->d = $d;
        $this->d = $d;
        $this->e = $e;
    }
}

?>

See also `Dependency Injection Smells <http://seregazhuk.github.io/2017/05/04/di-smells/>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "0.11.6";
modifications[] = "Split the class into smaller classes. Try to do less in that class.";
[parameter1]
name="injectionsCount";
default="5";
type="integer";
description="Threshold for too many injected parameters for one class.";
[example1]
project="NextCloud"
file="lib/private/Share20/Manager.php"
line="130"
code="	/**
	 * Manager constructor.
	 *
	 * @param ILogger $logger
	 * @param IConfig $config
	 * @param ISecureRandom $secureRandom
	 * @param IHasher $hasher
	 * @param IMountManager $mountManager
	 * @param IGroupManager $groupManager
	 * @param IL10N $l
	 * @param IFactory $l10nFactory
	 * @param IProviderFactory $factory
	 * @param IUserManager $userManager
	 * @param IRootFolder $rootFolder
	 * @param EventDispatcher $eventDispatcher
	 * @param IMailer $mailer
	 * @param IURLGenerator $urlGenerator
	 * @param \OC_Defaults $defaults
	 */
	public function __construct(
			ILogger $logger,
			IConfig $config,
			ISecureRandom $secureRandom,
			IHasher $hasher,
			IMountManager $mountManager,
			IGroupManager $groupManager,
			IL10N $l,
			IFactory $l10nFactory,
			IProviderFactory $factory,
			IUserManager $userManager,
			IRootFolder $rootFolder,
			EventDispatcher $eventDispatcher,
			IMailer $mailer,
			IURLGenerator $urlGenerator,
			\OC_Defaults $defaults
	) {
		$this->logger = $logger;
		$this->config = $config;
		$this->secureRandom = $secureRandom;
		$this->hasher = $hasher;
		$this->mountManager = $mountManager;
		$this->groupManager = $groupManager;
		$this->l = $l;
		$this->l10nFactory = $l10nFactory;
		$this->factory = $factory;
		$this->userManager = $userManager;
		$this->rootFolder = $rootFolder;
		$this->eventDispatcher = $eventDispatcher;
		$this->sharingDisabledForUsersCache = new CappedMemoryCache();
		$this->legacyHooks = new LegacyHooks($this->eventDispatcher);
		$this->mailer = $mailer;
		$this->urlGenerator = $urlGenerator;
		$this->defaults = $defaults;
	}
";
explain="Well documented Manager class. Quite a lot of injections though, it must take a long time to prepare it."
[example2]
project="Thelia"
file="core/lib/Thelia/Core/Event/Delivery/DeliveryPostageEvent.php"
line="58"
code="//class DeliveryPostageEvent extends ActionEvent
    public function __construct(
        DeliveryModuleInterface $module,
        Cart $cart,
        Address $address = null,
        Country $country = null,
        State $state = null
    ) {
        $this->module = $module;
        $this->cart = $cart;
        $this->address = $address;
        $this->country = $country;
        $this->state = $state;
    }

";
explain="Classic address class, with every details. May be even shorter than expected."
