name = "Rename Parameter";
description = "Change the name of a parameter to a new name.

The destination parameter name is a constant. 
Suggestions : rename all parameters from the top method (in classes)
rename parameters $a into $b (currently, no $a available)

Limits : this cobbler doesn't check that another parameter is already using that name, nor if a local variable is also using that name. This may lead to unexpected results.
";

dependsOn[] = "";
exakatSince = "2.3.0";

beforeCode = "<?php

foo(a: 1);

function foo($a) { 
    return $a;
}

?>";
afterCode = "<?php

foo(b: 1);

function foo($b) { 
    return $b;
}

?>";

features[] = "parameter"

;List of possible opposite cobbler (there might be several)
reverseCobbler[] = ""

;List of possible related analysis
suggestedAnalysis[] = ""

;similar cobbler; alternative cobbler.
relatedCobbler[] = ""

idempotent=1

[parameter1]
name="oldName";
default="$A";
type="string";
description="The original name of the parameter.";
; Add support for parameter positions?

[parameter2]
name="newName";
default="$B";
type="string";
description="The new name of the parameter.";

[parameter3]
name="method";
default="";
type="string";
description="The name of the target method. Use a full qualified name for a function, and the class name::method for methods.";

