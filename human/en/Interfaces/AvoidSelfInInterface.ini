name = "Avoid Self In Interface";
description = "Self and Parent are tricky when used in an interface. 

``self`` refers to the current interface or its extended parents : as long as the constant is defined in the interface family, this is valid.  On the other hand, when ``self`` refers to the current class, the resolution of names will happen at execution time, leading to confusing results. 

``parent`` has the same behavior than ``self``, except that it doesn't accept to be used inside an interface, as it will yield an error. This is one of those error that lint but won't execute in certain conditions.

``Static`` can't be used in an interface, as it needs to be resolved at call time anyway.

<?php

interface i extends ii {
    // This 'self' is valid : it refers to the interface i
    public const I = self::I2 + 2;

    // This 'self' is also valid, as it refers to interface ii, which is a part of interface i
    public const I2 = self::IP + 4; 

    // This makes interface i dependant on the host class
    public const I3 = parent::A;
}

?>

";
clearphp = "";
severity = "S_CRITICAL";
timetofix = "T_SLOW";
exakatSince = "1.5.4";
precision = "P_VERY_HIGH"

seeAlso[] = "`Scope Resolution Operator (::) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_"

features[] = "self"
features[] = "interface"

modifications[] = "Use a fully qualified namespace instead of self"
modifications[] = "Use a locally defined constant, so self is a valid reference"
phpErrors[] = "Cannot access parent:: when current class scope has no parent";
phpErrors[] = "Undefined class constant";

