name = "Undefined Interfaces";
description = "Some typehints or ``instanceof`` that are relying on undefined interfaces or classes. They will always return false. Any condition based upon them are dead code.";
code = "<?php

class var implements undefinedInterface {
    // If undefinedInterface is undefined, this code lints but doesn't run
}

if ($o instanceof undefinedInterface) {
    // This is silent dead code
}

function foo(undefinedInterface $a) {
    // This is dead code
    // it will probably be discovered at execution
}

?>";
clearphp = "";
severity = "S_MAJOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Implement the missing interfaces";
modifications[] = "Remove the code governed by the missing interface : the whole method if it is an typehint, the whole if/then if it is a condition.";
; Alternative to make this code go away. 
; One by possible solution

features[] = "interface";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Object interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_";
seeAlso[] = "`Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_";
seeAlso[] = "`Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "Argument #1 ($a) must be of type T";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "xataface";
file = "Dataface/Error.php";
line = "112";
code = "	public static function isError($obj){
		if ( !PEAR::isError($obj) and !($obj instanceof Exception_) ) return false;
		return ($obj->getCode() >= DATAFACE_E_ERROR);
	}
";
explain = "Exception seems to be a typo, and leads to an always-true expression.";
