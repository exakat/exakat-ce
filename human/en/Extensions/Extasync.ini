name = "ext/async";
description = "Concurrent Task Extension for PHP.

This extension provides concurrent Zend VM executions using native C fibers in PHP.

<?php
namespace Concurrent;
register_shutdown_function(function () {
    echo \"===> Shutdown function(s) execute here.\n\";
});
$work = function (string $title): void {
    var_dump($title);
};
Task::await(Task::async(function () use ($work) {
    $defer = new Deferred();
    
    Task::await(Task::async($work, 'A'));
    Task::await(Task::async($work, 'B'));
    
    Task::async(function () {
        $defer = new Deferred();
        
        Task::async(function () use ($defer) {
            (new Timer(1000))->awaitTimeout();
            
            $defer->resolve('H :)');
        });
        
        var_dump(Task::await($defer->awaitable()));
    });
    
    Task::async(function () use ($defer) {
        var_dump(Task::await($defer->awaitable()));
    });
    
    $timer = new Timer(500);
    
    Task::async(function () use ($timer, $defer, $work) {
        $timer->awaitTimeout();
        
        $defer->resolve('F');
        
        Task::async($work, 'G');
    });
    
    var_dump('ROOT TASK DONE');
}));
Task::async($work, 'C');
Task::async(function () use ($work) {
    (new Timer(0))->awaitTimeout();
    
    Task::async($work, 'E');
});
Task::async(function ($v) {
    var_dump(Task::await($v));
}, Deferred::value('D'));
var_dump('=> END OF MAIN SCRIPT');

?>

See also `ext-async repository <https://github.com/concurrent-php/ext-async>`_.
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.5.6";

; Alternative to make this code go away. 
; One by possible solution
;modifications[] = ""

; A PHP error that may be emitted by the target faulty code
;phpErrors[] = ""
