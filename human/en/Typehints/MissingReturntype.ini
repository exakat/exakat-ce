name = "Missing Some Returntype";
description = "The specified typehints are not compatible with the returned values. 

The code of the method may return other types, which are not specified and will lead to a PHP fatal error. It is the case for insufficient typehints, when a typehint is missing, or inconsistent typehints, when the method returns varied types. 

<?php

// correct return typehint
function fooSN() : ?string  {
    return shell_exec('ls -hla');
}

// insufficient return typehint
// shell_exec() may return null or string. Here, only string in specified for fooS, and that may lead to a Fatal error
function fooS() : string  {
    return shell_exec('ls -hla');
}

// inconsistent return typehint
function bar() : int {
    return rand(0, 10) ? 1 : \"b\";
}

?>

The analysis reports a method when it finds other return types than the one expected. In the case of multiple typehints, as for the last example, the PHP code may require an upgrade to PHP 8.0.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.7";
precision="P_VERY_HIGH"

rulesetBuild_title="Missing Some Returntype"
rulesetBuild_code = "function foo() : string {
    // shell_exec() returns string or null
    return shell_exec($e); 
}";

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Update the typehint to accept more types"
modifications[] = "Update the code of the method to fit the expected returntype"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = "Return value of foo() must be of the type int, string returned"

phpVersion = ""

features[] = "return-typehint"

seeAlso[] = ""