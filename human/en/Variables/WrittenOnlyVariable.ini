name = "Written Only Variables";
description = "Those variables are being written, but never read. In this way, they are useless and should be removed, or be read at some point in the code.

When the variables are only written, it takes time to process them, while discarding their result without usage. Also, when those variables are built with a complex process, it makes it difficult to understand their point, and still create maintenance work. 

<?php

// $a is used multiple times, but never read
$a = 'a';
$a .= 'b';

$b = 3; 
//$b is actually read once
$a .= $b + 3; 

?>
";
clearphp = "no-unused-variable";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "0.8.4";
precision = "P_VERY_HIGH"

features[] = "variable"

seeAlso[] = ""

phpErrors[] = ""

phpVersion = ""
seeAlso[] =""

modifications[] = "Check that variables are written AND read in each context";
modifications[] = "Remove variables that are only read";
modifications[] = "Use the variable that are only read";

[example1]
project="Dolibarr"
file="htdocs/ecm/class/ecmdirectory.class.php"
line="692"
code="		// We add properties fullxxx to all elements
		foreach($this->cats as $key => $val)
		{
			if (isset($motherof[$key])) continue;
			$this->build_path_from_id_categ($key, 0);
		}
";
explain="$val is only written, as only the keys are used. $val may be skipped by applying the foreach to array_keys($this->cats), instead of the whole array."

[example2]
project="SuiteCrm"
file="modules/Campaigns/utils.php"
line="820"
code="        //run query for mail boxes of type 'bounce'
        $email_health = 0;
        $email_components = 2;
        $mbox_qry = \"select * from inbound_email where deleted ='0' and mailbox_type = 'bounce'\";
        $mbox_res = $focus->db->query($mbox_qry);

        $mbox = array();
        while ($mbox_row = $focus->db->fetchByAssoc($mbox_res)) {
            $mbox[] = $mbox_row;
        }

";
explain="$email_health is used later in the method; while $email_components is only set, and never used."
