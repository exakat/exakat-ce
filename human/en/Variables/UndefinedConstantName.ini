name = "Undefined Constant Name";
description = "When using the `${ }` syntax for variable, the name used must be a defined constant. It is not a simple string, like 'x', it is an actual constant name.

Interestingly, it is possible to use a qualified name within `${ }`, full or partial. PHP will lint such code, and will collect the value of the constant immediately. Since there is no fallback mechanism for fully qualified names, this ends with a Fatal error.

<?php

const x = "a";
$a = "Hello";

// Display 'Hello' ${x} -> $a -> Hello
echo ${x};

// Yield a PHP Warning 
// Use of undefined constant y - assumed 'y' (this will throw an Error in a future version of PHP)
echo ${y};

// Yield a PHP Fatal error as PHP first checks that the constant exists 
//Undefined constant 'y'
echo ${\y};
?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.1";

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Define the constant"
modifications[] = "Turn the dynamic syntax into a normal variable syntax"
modifications[] = "Use a fully qualified name (at least one \ ) to turn this syntax into a Fatal error when the constant is not found. This doesn't fix the problem, but may make it more obvious during the diagnostic."

; A PHP error that may be emitted by the target faulty code
phpErrors[] = "Undefined constant 'y'"
phpErrors[] = "Use of undefined constant y - assumed 'y' (this will throw an Error in a future version of PHP)"

precision = 'P_VERY_HIGH'

features[] = ''

seeAlso[] = ""

phpVersion = "";
