name = "No Static Variable In A Method";
description = "Refactor static variables into properties. 

Inside a class, it is recommended to use the class properties, static or not, to hold values between calls to the method. Inside a function, or a closure, no such container is available, so static variables may be useful. Although, a refactoring to a class is also recommended here. 

Properties have clear definitions, and are less suprising than static variables.

<?php

class barbar {
    function foo() {
        static $counter = 0;
        
        // count the number of calls of this method
        return ++$counter;
    }
}

class bar {
    static $counter = 0;

    function foo() {
        // count the number of calls of this method
        return ++self::$counter;
    }
}

?>

The static variable is easier to refactor as a static property. It is also possible to refactor it as a property, although it may impact the behavior of the previous code, or require extra work.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.2.1";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_VERY_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
;phpVersion = "8.0+"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Refactor the variable into a static property"
modifications[] = "Refactor the variable into a property and then use dependency injection"

features[] = 'static-variable'