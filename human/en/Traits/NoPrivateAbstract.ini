name = "No Private Abstract Method In Trait";
description = "Method could not be both abstract and private in traits. This was changed in PHP 8.0 : the class might overwrite the trait's method, since it has precedence of it. And when the class doesn't overwrite it, then the class has an abstract method, and can't be instantiated. 

<?php

 trait t { abstract private function foo() ;}

 class x {
    use t;
    
    // valid
    private function foo() {}
}

// This is a hidden abstract class
class y {
    use t;
}


?>

This might be important for backward incompatibility, although it doesn't lint in previous versions.
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.4.5";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_VERY_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = "8.0+"

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "`Abstract Trait Members <https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.abstract>`_";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "trait";
features[] = "abstract";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = ""

; A PHP error that may be emitted by the target faulty code
phpErrors[] = "Abstract function t::someAbstractPrivateFunction() cannot be declared private "

; Human readable keywords for manual glossary
;keywords[] = ""

changedBehavior = "8.0"
