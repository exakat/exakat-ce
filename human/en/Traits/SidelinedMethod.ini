name = "Sidelined Method";
description = "A method, defined in a trait, which is overwritten by a class's method. This makes the trait's method useless and unreachable. 

It is recommended to check if this is not a typo, as the trait may not be able to work correctly.

<?php

trait t {
	function name() : string { return 'abc'; }
	function foo() : string { return 'ddd'; }
}

class x {
	use t;
	
	// This method
	function name() : string { return 'bca'; }

	//function foo is imported from the trait
}

?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.5.2";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Check the naming of the function in the class"
modifications[] = "Use a 'as' expression to rename the trait's method with another name"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""
