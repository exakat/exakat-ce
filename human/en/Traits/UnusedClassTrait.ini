name = "Unused Trait In Class";
description = "A trait has been summoned in a class, but is not used. Traits may be used as a copy/paste of code, bringing a batch of methods and properties to a class. In the current case, the imported trait is never called. As such, it may be removed. 

Currently, the analysis covers only traits that are used in the class where they are imported. Also, the properties are not covered yet. 

<?php

trait t {
    function foo() { return 1;}
}

// this class imports and uses the trait
class UsingTrait {
    use t;
    
    function bar() {
        return $this->foo() + 1;
    }
}

// this class imports but doesn't uses the trait
class UsingTrait {
    use t;
    
    function bar() {
        return 1;
    }
}

?>

There are some sneaky situations, where a trait falls into decay : for example, creating a method in the importing class, with the name of a trait class, will exclude the trait method, as the class method has priority. Other precedence rules may lead to the same effect.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.1";
precision = "P_HIGH"

seeAlso[] = "`Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_"

features[] = "trait"

phpErrors[] = ""

phpVersion =  ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Remove the trait from the class"
modifications[] = "Actually use the trait, at least in the importing class"
modifications[] = "Use conflict resolution to make the trait accessible"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Optional parameters
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";
