name = "Logical To in_array";
description = "Multiple exclusive comparisons with ``or``` may be replaced by faster alternative. 

+ isset() and an array which keys are the target comparisons
+ array_key_exists() and an array which keys are the target comparisons
+ strpos() call, with all the target values merged into a string
+ str_contains() call, with all the target values merged into a string
+ switch() call, with each case being an assignation
+ match() call
+ in_array() call, with each values in an array

While each alternative has its performance gain, they make the code more readable by bringing the alternative values into one simple list. 

As little as three ``or`` comparisons are slower than using an alternative. The more calls, the slower is as string of ``or``. Also, the further the target value is in the ``or`` list, the slower it is to find it. Although, it is not easy to control that value. 

This analysis also reports in_array() calls with arrays of a single element : those should be turned into a ``or`` call, or have more values in the array, or have the array published as a constant. 
This is a micro-optimisation : speed gain is low, and marginal. Code centralisation is a more significant advantage.

Thanks to `Frederic Bouchery <https://twitter.com/FredBouchery/>`_ for extending the alternatives of that analysis.";
code = "<?php

$targetValues = array('a', 'b', 'c', 'd');
$needle = 'd'; // for example

// isset() & array_key_exists()
$targets = array_flip($targetValues); // This might be a slow operation
isset($targs[$a]);
array_key_exists($a, $targs);

// strpos() & str_contains
$targets = implode('', $targeValues);
strpos($targets, $needle) !== 0
str_contains($targets, $needle) !== 0

// switch()
switch($needle) {
	case 'a':  // Lots of typing to do
	case 'b':
	case 'c':
	case 'd':
		$result = true;
		break;
	
	default:
		$result = false;
		break;
}

// match()
// surprisingly, slitghly slower than switch()
$result = match($needle) {
	'a', 'b', 'c', 'd' => true,
	default => false
};

// in_array()
// Set the list of alternative in a variable, property or constant. 
$result = in_array($a, $valid_values, true); // use third argument when you can

// slowest and hard to read
$result = $a == 'a' || $a == 'b' || $a == 'c' || $a == 'd');

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.12.5";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Replace the list of comparisons with a in_array() call on an array filled with the various values";
modifications[] = "Replace the list of comparisons with a strpos() call on an string joined with the various values";
modifications[] = "Replace the list of comparisons with a match() call on an string joined with the various values";
modifications[] = "Replace the list of comparisons with a switch() call on an string joined with the various values";
modifications[] = "Replace the list of comparisons with a isset() call on a hash whose keys are the various values ";
; Alternative to make this code go away. 
; One by possible solution

features[] = "";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`in_array() <https://www.php.net/in_array>`_";
seeAlso[] = "`isset() <https://www.php.net/isset>`_";
seeAlso[] = "`match() <https://www.php.net/match>`_";
seeAlso[] = "`switch() <https://www.php.net/switch>`_";
seeAlso[] = "`strpos() <https://www.php.net/strpos>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "Zencart";
file = "admin/users.php";
line = "32";
code = "// if needed, check that a valid user id has been passed
if (($action == 'update' || $action == 'reset') && isset($_POST['user']))
{
  $user = $_POST['user'];
}
elseif (($action == 'edit' || $action == 'password' || $action == 'delete' || $action == 'delete_confirm') && $_GET['user'])
{
  $user = $_GET['user'];
}
elseif(($action=='delete' || $action=='delete_confirm') && isset($_POST['user']))
{
  $user = $_POST['user'];
}
";
explain = "Long list of == are harder to read. Using an in_array() call gathers all the strings together, in an array. In turn, this helps readability and possibility, reusability by making that list an constant. ";
