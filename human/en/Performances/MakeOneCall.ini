name = "Make One Call With Array";
description = "Avoid calling the same function several times by batching the calls with arrays.

Calling the same function to chain modifications tends to be slower than calling the same function with all the transformations at the same time. Some PHP functions accept scalars or arrays, and using the later is more efficient.

<?php

$string = 'abcdef'; 

//str_replace() accepts arrays as arguments
$string = str_replace( ['a', 'b', 'c'],
                       ['A', 'B', 'C'],
                       $string);

// Too many calls to str_replace
$string = str_replace( 'a', 'A', $string);
$string = str_replace( 'b', 'B', $string);
$string = str_replace( 'c', 'C', $string);

// Too many nested calls to str_replace
$string = str_replace( 'a', 'A', str_replace( 'b', 'B', str_replace( 'c', 'C', $string)));

?>

Potential replacements : 

+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| Function                                                                 | Replacement                                                                         |
+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| str_replace()                       | str_replace()                                  |
| str_ireplace()                     | str_replace()                                  |
| substr_replace()                 | substr_replace()                            |
| preg_replace()                     | preg_replace()                                |
| preg_replace_callback()   | preg_replace_callback_array()  |
+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

<?php
$subject = 'Aaaaaa Bbb';


//preg_replace_callback_array() is better than multiple preg_replace_callback : 
preg_replace_callback_array(
    [
        '~[a]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for a found', PHP_EOL;
        },
        '~[b]+~i' => function ($match) {
            echo strlen($match[0]), ' matches for b found', PHP_EOL;
        }
    ],
    $subject
);

$result = preg_replace_callback('~[a]+~i', function ($match) {
            echo strlen($match[0]), ' matches for a found', PHP_EOL;
        }, $subject);

$result = preg_replace_callback('~[b]+~i', function ($match) {
            echo strlen($match[0]), ' matches for b found', PHP_EOL;
        }, $subject);

//str_replace() accepts arrays as arguments
$string = str_replace( ['a', 'b', 'c'],
                       ['A', 'B', 'C'],
                       $string);

// Too many calls to str_replace
$string = str_replace( 'a', 'A');
$string = str_replace( 'b', 'B');
$string = str_replace( 'c', 'C');

?>

 ";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
modifications[] = "use str_replace() with arrays as arguments."
modifications[] = "use preg_replace() with arrays as arguments."
modifications[] = "use preg_replace_callback() for merging multiple complex calls."
[example1]
project="HuMo-Gen"
file="admin/include/kcfinder/lib/helper_text.php"
line="47"
code="    static function jsValue($string) {
        return
            preg_replace('/\r?\n/', \"\\n\",
            str_replace('\"', \"\\\\"\",
            str_replace(\"'\", \"\\'\",
            str_replace(\"\\\", \"\\\\\",
        $string))));
    }
";
explain="The three calls to str_replace() could be replaced by one, using array arguments. Nesting the calls doesn't reduce the number of calls."
[example2]
project="Edusoho"
file="src/AppBundle/Common/StringToolkit.php"
line="55"
code="        $text = strip_tags($text);

        $text = str_replace(array("\n", "\r", "\t"), '', $text);
        $text = str_replace('&nbsp;', ' ', $text);
        $text = trim($text);

";
explain="Since str_replace is already using an array, the second argument must also be an array, with repeated empty strings. That syntax allows adding the '&nbsp;' and ' ' to those arrays. Note also that trim() should be be called early, but since some of the replacing may generate terminal spaces, it should be kept as is."
