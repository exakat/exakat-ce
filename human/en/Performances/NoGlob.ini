name = "Avoid glob() Usage";
description = "glob() and scandir() sorts results by default. When that kind of sorting is not needed, save some time by requesting ``NOSORT`` with those functions.

Besides, whenever possible, use scandir() instead of glob(). 

<?php

// Scandir without sorting is the fastest. 
scandir('docs/', SCANDIR_SORT_NONE);

// Scandir sorts files by default. Same as above, but with sorting
scandir('docs/');

// glob sorts files by default. Same as below, but no sorting
glob('docs/*', GLOB_NOSORT);

// glob sorts files by default. This is the slowest version
glob('docs/*');

?>

Using opendir() and a while loop may be even faster. 

This analysis skips scandir() and glob() if they are explicitly configured with flags (aka, sorting is explicitly needed).

glob() accepts wildchar, such as ``*``, that may not easily replaced with scandir() or opendir().

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.9.6";
precision = "P_VERY_HIGH"

seeAlso[] ="`Putting glob to the test <https://www.phparch.com/2010/04/putting-glob-to-the-test/>`_"
seeAlso[] ="`How to list files recursively in a directory with PHP iterators  <https://dev.to/bdelespierre/how-to-list-files-recursively-in-a-directory-with-php-iterators-5c0m>`_"
seeAlso[] ="`glob:// <https://www.php.net/manual/en/wrappers.glob.php>`_"

features[] = "glob"
features[] = "directoryiterator"
features[] = "filesystemiterator"

phpErrors[] = ""
phpVersion= ""

modifications[] = "Use ``FilesystemIterator`` or ``DirectoryIterator`` classes."
modifications[] = "Use ``RegexIterator`` to filter any unwanted results from ``FilesystemIterator``."
modifications[] = "Use ``glob`` protocol for files : $it = new DirectoryIterator('glob://path/to/examples/*.php');"

[example1]
project="Phinx"
file="src/Phinx/Migration/Manager.php"
line="362"
code="            $phpFiles = glob($config->getMigrationPath() . DIRECTORY_SEPARATOR . '*.php');

            // filter the files to only get the ones that match our naming scheme
            $fileNames = array();
            /** @var AbstractMigration[] $versions */
            $versions = array();

            foreach ($phpFiles as $filePath) {
                if (preg_match('/([0-9]+)_([_a-z0-9]*).php/', basename($filePath))) {";
explain="glob() searches for a list of files in the migration folder. Those files are not known, but they have a format, as checked later with the regex : a combinaison of ``FilesystemIterator`` and ``RegexIterator`` would do the trick too."
[example2]
project="NextCloud"
file="lib/private/legacy/helper.php"
line="185"
code="	static function copyr($src, $dest) {
		if (is_dir($src)) {
			if (!is_dir($dest)) {
				mkdir($dest);
			}
			$files = scandir($src);
			foreach ($files as $file) {
				if ($file != \".\" && $file != \"..\") {
					self::copyr(\"$src/$file\", \"$dest/$file\");
				}
			}
		} elseif (file_exists($src) && !\OC\Files\Filesystem::isFileBlacklisted($src)) {
			copy($src, $dest);
		}
	}";
explain="Recursive copy of folders, based on scandir(). ``DirectoryIterator`` and ``FilesystemIterator`` would do the same without the recursion."
