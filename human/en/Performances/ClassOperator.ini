name = "Scope Resolution Operator";
description = "The scope resolution operator `::class` is faster than a call to get_class() function.

It is also possible to replace `get_class()` by `static::class` to get the name of the calling class. 

<?php

$a = new stdClass();

echo $a::class;

// identical to 
echo get_class($a);

class x {
    function foo() { echo static::class; }
}

class y extends x {}

// static will resolve to y here
(new y)->foo();

?>
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.3.3";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_VERY_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = "7.0+"

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "`get_class <https://www.php.net/manual/fr/function.get-class.php>`_.";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "scope-resolution-operator";
features[] = "static";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Use the `::class` operator instead of the call to get_class()"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""

; Optional parameters
; Duplicate and increment numbers to add more : parameter1, paramter2, etc. 
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";
