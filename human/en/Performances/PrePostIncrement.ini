name = "Pre-increment";
description = "When possible, use the pre-increment operator (``++$i`` or ``--$i``) instead of the post-increment operator (``$i++`` or ``$i--``).

The latter needs an extra memory allocation that costs about 10% of performances. 
This is a micro-optimisation. However, its usage is so widespread, including within loops, that it may eventually have an significant impact on execution time. As such, it is recommended to adopt this rule, and only consider changing legacy code as they are refactored for other reasons.";
code = "<?php

// ++$i should be preferred over $i++, as current value is not important
for($i = 0; $i <10; ++$i) {
    // do Something
}

// ++$b and $b++ have different impact here, since $a will collect $b + 1 or $b, respectively.
$a = $b++;

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Use the pre increment when the new value is not reused.";
; Alternative to make this code go away. 
; One by possible solution

features[] = "increment";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "ExpressionEngine";
file = "system/ee/EllisLab/ExpressionEngine/Controller/Utilities/Communicate.php";
line = "650";
code = "		for ($x = 0; $x < $number_to_send; $x++)
		{
			$email_address = array_shift($recipient_array);

			if ( ! $this->deliverEmail($email, $email_address))
			{
				$email->delete();

				$debug_msg = ee()->email->print_debugger(array());

				show_error(lang('error_sending_email').BR.BR.$debug_msg);
			}
			$email->total_sent++;
		}
";
explain = "Using preincrement in for() loops is safe and straightforward. ";

[example2]
project = "Traq";
file = "src/Controllers/Tickets.php";
line = "84";
code = "            TimelineModel::newTicketEvent($this->currentUser, $ticket)->save();

            $this->currentProject->next_ticket_id++;
            $this->currentProject->save();

";
explain = "$this->currentProject->next_ticket_id value is ignored by the code. It may be turned into a preincrement.";
