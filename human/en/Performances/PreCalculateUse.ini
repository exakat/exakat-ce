name = "Pre-Calculate Use";
description = "In a closure, it is faster to pass a final value, rather than calculate it at call time. 

In the ``use`` clause of the closure, make sure that the passed variables do not require any more processing, such as a call to another function or an extra expression.

<?php

// $b->get is calculated inside the closure
$d = $b->get();
$f = function ($a) use ($d) {
	return $d + $a;
}

// $b->get is calculated inside the closure
$f = function ($a) use ($b) {
	return $b->get() + $a;
}
?>

This is a micro-optimisation. It has more potential with the closure used in a loop, or an array function.  
";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.5.2";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "closure";
features[] = "micro-optimisation";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Inject the final value in the closure and avoid method calls inside the closure"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""
