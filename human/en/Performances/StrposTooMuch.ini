name = "strpos() Too Much";
description = "strpos() covers the whole string before reporting 0. If the expected string is expected be at the beginning, or a fixed place, it is more stable to use substr() for comparison.

The longer the haystack (the searched string), the more efficient is that trick. The string has to be 10k or more to have impact, unless it is in a loop. 

<?php

// This always reads the same amount of string
if (substr($html, 0, 6) === '<html>') {

}

// When searching for a single character, checking with a known position ($string[$position]) is even faster
if ($html[0] === '<') {

}

// With strpos(), the best way is to search for something that exist, and use absence as worst case scenario 
if (strpos($html, '<html>') > 0) {

} else {
    // 
}

// When the search fails, the whole string has been read
if (strpos($html, '<html>') === 0) {

}

?>

This applies to stripos() too.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "1.2.8";

modifications[] = "Check for presence, and not for absence"
modifications[] = "use substr() and compare the extracted string"
modifications[] = "For single chars, try using the position in the string"



[example1]
project="WordPress"
file="core/traits/Request/Server.php"
line="127"
code="			if (strpos($header, 'HTTP_') === 0) {
				$header = substr($header, 5);
			} elseif (strpos($header, 'CONTENT_') !== 0) {
				continue;
			}
";
explain="Instead of searching for ``HTTP_``, it is faster to compare the first 5 chars to the literal ``HTTP_``. In case of absence, this solution returns faster."
