name = "Substring First";
description = "Always start by reducing a string before applying some transformation on it. The shorter string will be processed faster. 

<?php

// fast version
$result = strtolower(substr($string, $offset, $length));

// slower version
$result = substr(strtolower($string), $offset, $length);
?>

The gain produced here is greater with longer strings, or greater reductions. They may also be used in loops. This is a micro-optimisation when used on short strings and single string reductions.

This works with any reduction function instead of substr(), like trim(), iconv(), etc. 

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "1.0.1";

modifications[] = "Always reduce the string first, then apply some transformation"

[example1]
project="SPIP"
file="ecrire/inc/filtres.php"
line="1694"
code="function filtre_initiale($nom) {
	return spip_substr(trim(strtoupper(extraire_multi($nom))), 0, 1);
}
";
explain="The code first makes everything uppercase, including the leading and trailing spaces, and then, removes them : it would be best to swap those operations. Note that spip_substr() is not considered in this analysis, but with SPIP knowledge, it could be moved inside the calls. "

[example2]
project="PrestaShop"
file="admin-dev/filemanager/include/utils.php"
line="197"
code="dirname(str_replace(' ', '~', $str))

";
explain="dirname() reduces the string (or at least, keeps it the same size), so it more efficient to have it first."
