name = "Isset() On The Whole Array";
description = "Isset() works quietly on a whole array. There is no need to test all previous index before testing for the target index.

It also works on chained properties. 

<?php

// Straight to the point
if (isset($a[1]['source'])) {
    // Do something with $a[1]['source']
}

// Doing too much work
if (isset($a) && isset($a[1]) && isset($a[1]['source'])) {
    // Do something with $a[1]['source']
}

// Doing too much work
if (isset($object) && isset($object->p1) && isset($object->p1->property)) {
    // Do something with $object->p1->property
}

?>

There is a gain in readability, by avoiding long and hard to read logical expression, and reducing them in one simple isset() call.

There is a gain in performances by using one call to isset(), instead of several. It is a micro-optimization. 

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "1.5.6";
precision = "P_HIGH"

modifications[] = "Merge all calls in one, and remove all unnecessary calls to isset()"

seeAlso[] = "`Isset <http://www.php.net/isset>`_"

features[] = "coalesce"
features[] = "isset"

phpVersion = ""

phpErrors[] = ""

[example1]
project="Tine20"
file="tine20/Crm/Model/Lead.php"
line="208"
code="isset($relation['related_record']) && isset($relation['related_record']['n_fileas'])";
explain="Only the second call is necessary : it also includes the first one."

[example2]
project="ExpressionEngine"
file="system/ee/legacy/libraries/Form_validation.php"
line="1487"
code="!isset($this->_field_data[$field]) OR !isset($this->_field_data[$field]['postdata'])";
explain="This is equivalent to `isset($this->_field_data[$field], $this->_field_data[$field]['postdata'])`, and the second call may be skipped."
