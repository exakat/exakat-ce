name = "Avoid Concat In Loop";
description = "Concatenations inside a loop generate a lot of temporary variables. They are accumulated and tend to raise the memory usage, leading to slower performances.

It is recommended to store the values in an array, and then use implode() on that array to make the concatenation at once. The effect is positive when the source array has at least 50 elements. 

<?php

// Concatenation in one operation
$tmp = array();
foreach(data_source() as $data) {
    $tmp[] = $data;
}
$final = implode('', $tmp);

// Concatenation in many operations
foreach(data_source() as $data) {
    $final .= $data;
}

?>

The same doesn't apply to addition and multiplication, with array_sum() and array_multiply(), as those operations work on the current memory allocation, and don't need to allocate new memory at each step. 

See also `PHP 7 performance improvements (3/5): Encapsed strings optimization <https://blog.blackfire.io/php-7-performance-improvements-encapsed-strings-optimization.html>`_.
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "0.12.4";
modifications[] = "Collect all pieces in an array, then implode() the array in one call."
[example1]
project="SuiteCrm"
file="include/export_utils.php"
line="433"
code="        foreach($records as $record)
        {
            $line = implode(\"\\"\" . getDelimiter() . \"\\"\", $record);
            $line = \"\\"\" . $line;
            $line .= \"\\"\r\n\";
            $line = parseRelateFields($line, $record, $customRelateFields);
            $content .= $line;
        }
";
explain="$line is build in several steps, then then final version is added to $content. It would be much faster to make $content an array, and implode it once after the loop. "

[example2]
project="ThinkPHP"
file="ThinkPHP/Common/functions.php"
line="720"
code="    if (!C('APP_USE_NAMESPACE')) {
        $class = parse_name($name, 1);
        import($module . '/' . $layer . '/' . $class . $layer);
    } else {
        $class = $module . '\\' . $layer;
        foreach ($array as $name) {
            $class .= '\\' . parse_name($name, 1);
        }
        // 导入资源类库
        if ($extend) {
            // 扩展资源
            $class = $extend . '\\' . $class;
        }
    }
    return $class . $layer;

";
explain="The foreach loop appends the $name and builds a fully qualified name. "
