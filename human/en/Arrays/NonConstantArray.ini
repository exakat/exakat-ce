name = "Non-constant Index In Array";
description = "Undefined constants revert as strings in Arrays. They are also called ``barewords``.

In ``$array[index]``, PHP cannot find index as a constant, but, as a default behavior, turns it into the string ``index``. 

This default behavior raise concerns when a corresponding constant is defined, either using define() or the const keyword (outside a class). The definition of the index constant will modify the behavior of the index, as it will now use the constant definition, and not the 'index' string. 

<?php

// assign 1 to the element index in $array
// index will fallback to string
$array[index] = 1; 
//PHP Notice:  Use of undefined constant index - assumed 'index'

echo $array[index];      // display 1 and the above error
echo \"$array[index]\";    // display 1
echo \"$array['index']\";  // Syntax error


define('index', 2);
 
 // now 1 to the element 2 in $array
 $array[index] = 1;

?>

It is recommended to make index a real string (with ' or \"), or to define the corresponding constant to avoid any future surprise.

Note that PHP 7.2 removes the support for this feature.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = "P_HIGH"

features[] = "array"

phpVersion = ""

phpErrors[] = "Uncaught Error: Undefined constant"

seeAlso[] = "`PHP RFC: Deprecate and Remove Bareword (Unquoted) Strings <https://wiki.php.net/rfc/deprecate-bareword-strings>`_"
seeAlso[] = "`Syntax <https://www.php.net/manual/en/language.constants.syntax.php>`_"

modifications[] = "Declare the constant to give it an actual value"
modifications[] = "Turn the constant name into a string"

[example1]
project="Dolibarr"
file="htdocs/includes/OAuth/Common/Storage/DoliStorage.php"
line="245"
code="    public function hasAuthorizationState($service)
    {
        // get state from db
        dol_syslog(\"get state from db\");
        $sql = \"SELECT state FROM \".MAIN_DB_PREFIX.\"oauth_state\";
        $sql.= \" WHERE service='\".$this->db->escape($service).\"'\";
        $resql = $this->db->query($sql);
        $result = $this->db->fetch_array($resql);
        $states[$service] = $result[state];
        $this->states[$service] = $states[$service];

        return is_array($states)
        && isset($states[$service])
        && null !== $states[$service];
    }
";
explain="The `state` constant in the `$result` array is coming from the SQL query. There is no need to make this a constant : making it a string will remove some warnings in the logs."

[example2]
project="Zencart"
file="app/library/zencart/Services/src/LeadLanguagesRoutes.php"
line="112"
code="    public function updateLanguageTables($insertId)
    {
        $tableList = $this->listener->getTableList();
        if (count($tableList) == 0) {
            return;
        }
        foreach ($tableList as $tableEntry) {
            $languageKeyField = issetorArray($tableEntry, 'languageKeyField', 'language_id');
            $sql = \" INSERT IGNORE INTO :table: (\";
            $sql = $this->dbConn->bindVars($sql, ':table:', $tableEntry ['table'], 'noquotestring');
            $sql .= $languageKeyField. \", \";
            $fieldNames = \"\";
            foreach ($tableEntry[fields] as $fieldName => $fieldType) {
                $fieldNames .= $fieldName . \", \";
            }
";
explain="The `fields` constant in the `$tableEntry` which holds a list of tables. It seems to be a SQL result, but it is conveniently abstracted with `$this->listener->getTableList()`, so we can't be sure."

