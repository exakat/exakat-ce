name = "Throw Functioncall";
description = "The ``throw`` keyword expects to use an exception. Calling a function to prepare that exception before throwing it is possible, but forgetting the new keyword is also possible. 

<?php

// Forgotten new
throw \RuntimeException('error!');

// Code is OK, function returns an exception
throw getException(ERROR_TYPE, 'error!');

function getException(ERROR_TYPE, $message) {
    return new \RuntimeException($messsage);
}

?>

When the ``new`` keyword is forgotten, then the class constructor is used as a function name, and now exception is emitted, but an ``Undefined function`` fatal error is emitted. 
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = "P_MEDIUM"

rulesetBuild_title="Throw A Functioncall"
rulesetBuild_code = "class Foo extends Exception {} 
throw Foo();
"

modifications[] = "Add the new operator to the call"
modifications[] = "Make sure the function is really a functioncall, not a class name"
modifications[] = "Use return typehints for functions, so that Exception may be detected"

phpErrors[] = "Call to undefined function"

features[] = "exception"

phpVersion = ""

seeAlso[] = ""

[example1]
project="SugarCrm"
file="include/externalAPI/cmis_repository_wrapper.php"
line="918"
code="    function getContentChanges()
    {
        throw Exception(\"Not Implemented\");
    }
";
explain="SugarCRM uses exceptions to fill work in progress. Here, we recognize a forgotten 'new' that makes throw call a function named 'Exception'. This fails with a Fatal Error, and doesn't issue the right messsage. The same error had propgated in the code by copy and paste : it is available 17 times in that same file."


[example2]
project="Zurmo"
file="app/protected/modules/gamification/rules/collections/GameCollectionRules.php"
line="66"
code="    abstract class GameCollectionRules
    {
        /**
         * @return string
         * @throws NotImplementedException - Implement in children classes
         */
        public static function getType()
        {
            throw NotImplementedException();
        }
";
explain="Other part of the code actually instantiate the exception before throwing it."
