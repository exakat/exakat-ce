name = "Rethrown Exceptions";
description = "Throwing a caught exception is usually useless and dead code.

When exceptions are caught, they should be processed or transformed, but not rethrown as is.

Those issues often happen when a catch structure was positioned for debug purposes, but lost its usage later. 

<?php

try {
    doSomething();
} catch (Exception $e) {
    throw $e;
}

?>

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.9.0";
precision = "P_HIGH";
modifications[] = "Log the message of the exception for later usage."
modifications[] = "Remove the try/catch and let the rest of the application handle this exception."
modifications[] = "Chain the exception, by throwing a new exception, including the caught exception. "

features[] = 'exception'

seeAlso[] = "`What are the best practices for catching and re-throwing exceptions? <https://stackoverflow.com/questions/5551668/what-are-the-best-practices-for-catching-and-re-throwing-exceptions/5551828>`_"

phpErrors[] = ""

phpVersion = "";

[example1]
project="PrestaShop"
file="classes/webservice/WebserviceOutputBuilder.php"
line="731"
code="	public function setSpecificField($object, $method, $field_name, $entity_name)
	{
		try {
			$this->validateObjectAndMethod($object, $method);
		} catch (WebserviceException $e) {
			throw $e;
		}

		$this->specificFields[$field_name] = array('entity'=>$entity_name, 'object' => $object, 'method' => $method, 'type' => gettype($object));
		return $this;
	}
";
explain="The setSpecificField method catches a WebserviceException, representing an issue with the call to the webservice. However, that piece of information is lost, and the exception is rethrown immediately, without any action."
