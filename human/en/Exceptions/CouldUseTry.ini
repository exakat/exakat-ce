name = "Could Use Try";
description = "Some commands may raise exceptions. It is recommended to use the try/catch block to intercept those exceptions, and process them.

* / : ``DivisionByZeroError``
* % : ``DivisionByZeroError``
* intdiv() : ``DivisionByZeroError``, ``ArithmeticError``
* << : ``ArithmeticError``
* >> : ``ArithmeticError``
* ``Phar::mungserver`` : ``PharException``
* ``Phar::webphar`` : ``PharException``

Some exceptions have an extra analysis, due to special detection condition : ``ParseError``, with eval() and ``DivisionByZeroError``.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "1.5.0";
precision = "P_HIGH"

features[] = "try-catch"
features[] = "exception"
features[] = "arithmeticerror";
features[] = "divisionbyzeroerror";
features[] = "exception";
features[] = "imagickexception";
features[] = "imagickpixelexception";
features[] = "invalidargumentexception";
features[] = "jsonexception";
features[] = "mysqli_sql_exception";
features[] = "pdoexception";
features[] = "pharexception";
features[] = "reflectionexception";
features[] = "svmexception";
features[] = "typerror";
features[] = "unexpectedvalueexception";

modifications[] = "Add a try/catch clause around those commands"
modifications[] = "Add a check on the values used with those operator : for example, check a dividend is not 0, or a bitshift is not negative"

phpExceptions[] = "ArithmeticError";
phpExceptions[] = "DivisionByZeroError";
phpExceptions[] = "Exception";
phpExceptions[] = "ImagickException";
phpExceptions[] = "ImagickPixelException";
phpExceptions[] = "InvalidArgumentException";
phpExceptions[] = "JsonException";
phpExceptions[] = "mysqli_sql_exception";
phpExceptions[] = "PDOexception";
phpExceptions[] = "PharException";
phpExceptions[] = "ReflectionException";
phpExceptions[] = "SVMException";
phpExceptions[] = "Typerror";
phpExceptions[] = "UnexpectedValueException";


seeAlso[] = "`Predefined Exceptions <https://www.php.net/manual/en/reserved.exceptions.php>`_"
seeAlso[] = "`PharException <https://www.php.net/manual/en/class.pharexception.php>`_"

related[] = "Structures/EvalWithoutTry"
related[] = "Structures/CheckDivision"

[example1]
project="Mautic"
file="app/bundles/StageBundle/Controller/StageController.php"
line="78"
code="        //set limits
        $limit = $this->get('session')->get(
            'mautic.stage.limit',
            $this->coreParametersHelper->getParameter('default_pagelimit')
        );
/... Code where $limit is read but not modified /
        $count = count($stages);
        if ($count && $count < ($start + 1)) {
            $lastPage = ($count === 1) ? 1 : (ceil($count / $limit)) ?: 1;
";
explain="$limit is read as a session variable or a default value. There are no check here that $limit is not null, before using it in a division. It is easy to imagine this is done elsewhere, yet a try/catch could help intercept unwanted situations."
