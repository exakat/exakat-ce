name = "Large Try Block";
description = "Try block should enclosing only the expression that may emit an exception. 

When writing large blocks of code in a try, it becomes difficult to understand where the expression is coming from. Large blocks may also lead to catch multiples exceptions, with a long list of catch clause. 

In particular, the catch clause will resume the execution without knowing where the try was interrupted : there are no indication of achievement, even partial. In fact, catching an exception signals a very dirty situation.

<?php

// try is one expression only
try {
    $database->query($query);
} catch (DatabaseException $e) {
    // process exception
}

// Too many expressions around the one that may actually emit the exception
try {
    $SQL = build_query($arguments);
    $database = new Database($dsn);
    $database->setOption($options);
    $statement = $database->prepareQuery($SQL);
    $result = $statement->query($query);
} catch (DatabaseException $e) {
    // process exception
}

?>

This analysis reports try blocks that are 5 lines or more. This threshold may be configured with the directive ``tryBlockMaxSize``. Catch clause, and finally are not considered here.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.1.5";

precision = "P_VERY_HIGH";

features[] = "try-catch"

seeAlso[] = "`Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_";

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Reduce the amount of code in the block, by moving it before and after"

; A PHP error that may be emitted by the target faulty code
;phpErrors[] = ""

[parameter1]
name="tryBlockMaxSize";
default="5";
type="integer";
description="Maximal number of expressions in the try block.";

