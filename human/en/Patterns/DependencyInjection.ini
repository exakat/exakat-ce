name = "Dependency Injection";
description = "A dependency injection is a typehinted argument, that is stored in a property by the constructor.";
code = "<?php

// Classic dependency injection 
class foo {
    private $bar;

    public function __construct(Bar $bar) {
        $this->bar = $bar;
    }

    public function doSomething($args) {
        return $this->bar->barbar($args);
    }
}

// Without typehint, this is not a dependency injection
class foo {
    private $bar;

    public function __construct($bar) {
        $this->bar = $bar;
    }
}

?>";
clearphp = "";
severity = "S_NONE";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_NONE";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.11.6";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "";
; Alternative to make this code go away. 
; One by possible solution

features[] = "dependency-injection";
features[] = "pattern";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Understanding Dependency Injection <http://php-di.org/doc/understanding-di.html>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";

