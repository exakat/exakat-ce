name = "Courier Anti-Pattern";
description = "The courier anti-pattern is the storage of a dependency by a class, in order to create an instance that requires this dependency.

The class itself doesn't actually need this dependency, but has a dependency to a class that requires it. 

<?php

// The foo class requires bar
class Foo {
    public function __construct(Bar $b) {
    }
}

// Class A doesn't depends on Bar, but depends on Foo
// Class A never uses Bar, but only uses Foo.
class A {
    private $courier;

    public function __construct(Bar $courier) {
        $this->courier = $courier;       
    }

    public function Afoo() {
        $b = new Foo($this->courier);
    }

}

?>

The alternative here is to inject Foo instead of Bar. 
";
clearphp = "";
severity = "S_NONE";
timetofix = "T_NONE";
exakatSince = "0.11.6";
precision = "P_VERY_HIGH"

modifications[] = ""

features[] = "pattern"

seeAlso[] = "`Courier Anti-pattern <https://r.je/oop-courier-anti-pattern.html>`_"

phpErrors[] = ""

phpVersion = "";
