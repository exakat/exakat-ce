name = "Check JSON";
description = "Check errors whenever JSON is encoded or decoded. 

In particular, ``NULL`` is a valid decoded JSON response. If you want to avoid mistaking NULL for an error, it is recommended to call ``json_last_error``.

<?php

$encoded = json_encode($incoming);
// Unless JSON must contains some non-null data, this mistakes NULL and error
if(json_last_error() != JSON_ERROR_NONE) {
    die('Error when encoding JSON');
}

$decoded = json_decode($incoming);
// Unless JSON must contains some non-null data, this mistakes NULL and error
if($decoded === null) {
    die('ERROR');
}

?>

See also `Option to make json_encode and json_decode throw exceptions on errors <https://ayesh.me/Upgrade-PHP-7.3#json-exceptions>`_, 
         `json_last_error <https://www.php.net/json_last_error>`_.
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "1.3.0";

modifications[] = "Always check after JSON operation : encoding or decoding."
modifications[] = "Add a call to json_last_error()"
modifications[] = "Configure operations to throw an exception upon error (``JSON_THROW_ON_ERROR``), and catch it."

[example1]
project="Woocommerce"
file="includes/admin/helper/class-wc-helper-plugin-info.php"
line="66"
code="		$results = json_decode( wp_remote_retrieve_body( $request ), true );
		if ( ! empty( $results ) ) {
			$response = (object) $results;
		}

		return $response;
";
explain="In case the body is an empty string, this will be correctly decoded, but will yield an object with an empty-named property."
