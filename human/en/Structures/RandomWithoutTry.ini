name = "Random Without Try";
description = "random_int() and random_bytes() require a try/catch structure around them.

random_int() and random_bytes() emit Exceptions if they meet a problem. This way, failure can't be mistaken with returning an empty value, which leads to lower security. 

<?php

try {
    $salt = random_bytes($length);
} catch (TypeError $e) {
    // Error while reading the provided parameter
} catch (Exception $e) {
    // Insufficient random data generated
} catch (Error $e) {
    // Error with the provided parameter : <= 0
}

?>

Since PHP 7.4, openssl_random_pseudo_bytes() has adopted the same behavior. It is included in this analysis : check your PHP version for actual application.

";
clearphp = "";
phpVersion = "7.0+";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

phpVersion = "7.0+";

precision = "P_VERY_HIGH";

features[] = "random"

phpErrors[] = ""

seeAlso[] = "";

modifications[] = "Add a try/catch structure around calls to random_int() and random_bytes()."