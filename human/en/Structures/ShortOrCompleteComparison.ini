name = "Short Or Complete Comparison";
description = "Which type of condition is used for boolean comparisons : either short or formal. 

Formal is an explicit comparison to another boolean, while short is when the variable is used without comparison. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

<?php

// returns a boolean
$checked = checkSomething(); 

// short comparison
if ($checked) {
	// doSomething()
}

// also short comparison
if (!$checked) {
	// doSomething()
}

// formal comparison
if ($checked === true) {
	// doSomething()
}

?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.5.3";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = ""

; A PHP error that may be emitted by the target faulty code
;phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""
