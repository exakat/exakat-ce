name = "Don't Loop On Yield";
description = "Use ``yield from``, instead of looping on a generator with ``yield``.

``yield from`` delegate the yielding to another generator, and keep calling that generator until it is finished. It also works with implicit generator datastructure, like arrays.

<?php

function generator() {
    for($i = 0; $i < 10; ++$i) {
        yield $i;
    }
}

function delegatingGenerator() {
    yield from generator();
}

// Too much code here
function generator2() {
    foreach(generator() as $g) {
        yield $g;
    }
}

?>

There is a performance gain when delegating, over looping manually on the generator. You may even consider writing the loop to store all values in an array, then ``yield from`` the array.
";
clearphp = "";
exakatSince = "1.5.3";
severity = "S_MINOR";
timetofix = "T_QUICK";
modifications[] = "Use `yield from` instead of the whole foreach() loop"
precision = "P_HIGH"

features[] = "yield"

seeAlso[] = "`Generator delegation via yield from <https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.from>`_"

phpErrors[] = ""

phpVersion = "7.0+"

[example1]
project="Dolibarr"
file="htdocs/includes/sabre/sabre/dav/lib/DAV/Server.php"
line="912"
code="
if (($newDepth === self::DEPTH_INFINITY || $newDepth >= 1) && $childNode instanceof ICollection) {
    foreach ($this->generatePathNodes($subPropFind) as $subItem) {
        yield $subItem;
    }
}";
explain="Yield from is a straight replacement here."

[example2]
project="Tikiwiki"
file="lib/goal/goallib.php"
line="944"
code="$done = [];

foreach ($goal['eligible'] as $groupName) {
	foreach ($userlib->get_group_users($groupName) as $user) {
		if (! isset($done[$user])) {
			yield ['user' => $user, 'group' => null];
			$done[$user] = true;
		}
	}
}";
explain="The replacement with ``yield from``is not straigthforward here. Yield is only called when $user hasn't been ``$done`` : this is a unicity check. So, the double loop may produce a fully merged array, that may be reduced further by array_unique(). The final array, then, can be used with yield from. "
