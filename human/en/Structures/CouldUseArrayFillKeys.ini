name = "Could Use array_fill_keys";
description = "array_fill_keys() is a native PHP function that creates an array from keys. It gets the list of keys, and a constant value to assign to each keys.

This is twice faster than doing the same with a loop.

Note that is possible to use an object as initializing value : every element of the final array will be pointing to the same value. And, also, using an object as initializing value means that the same object will be used for each key : the object will not be cloned for each value.

<?php

$array = range('a', 'z');

// Fast way to build the array
$b = array_fill_keys($a, 0);

// Fast way to build the array, but every element will be the same object
$b = array_fill_keys($a, new Stdclass());

// Slow way to build the array
foreach($array as $a) {
    $b[$a] = 0;
}

// Setting everything to null, slowly
$array = array_map(function() {}, $array);

?>

See also `array_fill_keys <https://www.php.net/array_fill_keys>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "1.1.7";

modifications[] = "Use array_fill_keys()"

[example1]
project="ChurchCRM"
file="src/ManageEnvelopes.php"
line="107"
code="    foreach ($familyArray as $fam_ID => $fam_Data) {
        $envelopesByFamID[$fam_ID] = 0;
        $envelopesToWrite[$fam_ID] = 0;
    }
";
explain="There are two initialisations at the same time here : that should make two call to array_fill_keys()."
[example2]
project="PhpIPAM"
file="functions/scripts/merge_databases.php"
line="418"
code="    				$arr_new = array();
				foreach ($arr as $type=>$objects) {
					$arr_new[$type] = array();
					if(sizeof($objects)>0) {
						foreach($objects as $ok=>$object) {
							$arr_new[$type][] = $highest_ids_append[$type] + $object;
						}
					}
				}

";
explain="Even when the initialization is mixed with other operations, it is a good idea to extract it from the loop and give it to array_fill_keys(). "
