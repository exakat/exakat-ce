name = "Empty Blocks";
description = "Full empty block, part of a control structures. 

It is recommended to remove those blocks, so as to reduce confusion in the code.";
code = "<?php

foreach($foo as $bar) ; // This block seems erroneous
    $foobar++;

if ($a === $b) {
    doSomething();
} else {
    // Empty block. Remove this
}

// Blocks containing only empty expressions are also detected
for($i = 0; $i < 10; $i++) {
    ;
}

// Although namespaces are not control structures, they are reported here
namespace A;
namespace B;

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_INSTANT";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Fill the block with a command";
modifications[] = "Fill the block with a comment that explain the situation";
modifications[] = "Remove the block and its commanding operator";
; Alternative to make this code go away. 
; One by possible solution

features[] = "block";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "Cleverstyle";
file = "modules/Blogs/api/Controller.php";
line = "44";
code = "	public static function posts_get ($Request) {
		$id = $Request->route_ids(0);
		if ($id) {
			$post = Posts::instance()->get($id);
			if (!$post) {
				throw new ExitException(404);
			}
			return $post;
		} else {
			// TODO: implement latest posts
		}
	}
";
explain = "Else is empty, but commented. ";

[example2]
project = "PhpIPAM";
file = "wp-admin/includes/misc.php";
line = "74";
code = "/* checks */
if($_POST['action'] == delete) {
	# no cecks
}
else {
	# remove spaces
	$_POST['name'] = trim($_POST['name']);

	# length > 4 and < 12
	if( (mb_strlen($_POST['name']) < 2) || (mb_strlen($_POST['name']) > 24) ) 	{ $errors[] = _('Name must be between 4 and 24 characters'); }


";
explain = "The ``then`` block is empty and commented : yet, it may have been clearer to make the condition != and omitted the whole empty block.";
