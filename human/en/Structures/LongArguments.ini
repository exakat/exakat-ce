name = "Long Arguments";
description = "Long arguments should be put in variable, to preserve readability. 

When literal arguments are too long, they break the hosting structure by moving the next argument too far on the right. Whenever possible, long arguments should be set in a local variable to keep the readability.

<?php

// Now the call to foo() is easier to read.
$reallyBigNumber = <<<BIGNUMBER
123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
BIGNUMBER
foo($reallyBigNumber, 2, '12345678901234567890123456789012345678901234567890');

// where are the next arguments ? 
foo('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890', 2, '123456789012345678901234567890123456789012345678901234567890');

// This is still difficult to read
foo(<<<BIGNUMBER
123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
BIGNUMBER
, 2, '123456789012345678901234567890123456789012345678901234567890');

?>

Literal strings and heredoc strings, including variables, that are over 50 chars longs are reported here. 

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.9.7";
modifications[] = "Put the long arguments in a separate variable, and use the variable in the second expression, reducing its total length ";
[parameter1]
name="codeTooLong";
default="100";
type="integer";
description="Minimum size of a functioncall or a methodcall to be considered too long.";
[example1]
project="Cleverstyle"
file="core/drivers/DB/MySQLi.php"
line="40"
code="$this->instance->query(\"SET SESSION sql_mode='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'\")";
explain="This query is not complex, but its length tend to push the end out of the view in the IDE. It could be rewritten as a variable, on the previous line, with some formatting. The same formatting would help without the variable too, yet, mixing the SQL syntax with the PHP methodcall adds a layer of confusion. "
[example2]
project="Contao"
file="core-bundle/src/Resources/contao/widgets/CheckBoxWizard.php"
line="145"
code="sprintf('<span><input type=\"checkbox\" name=\"%s\" id=\"opt_%s\" class=\"tl_checkbox\" value=\"%s\"%s%s onfocus=\"Backend.getScrollOffset()\"> %s<label for=\"opt_%s\">%s</label></span>', $this->strName . ($this->multiple ? '[]' : ''), $this->strId . '_' . $i, ($this->multiple ? \StringUtil::specialchars($arrOption['value']) : 1), (((\is_array($this->varValue) && \in_array($arrOption['value'], $this->varValue)) || $this->varValue == $arrOption['value']) ? ' checked=\"checked\"' : ''), $this->getAttributes( ), $strButtons, $this->strId . '_' . $i, $arrOption['label'])";
explain="This one-liner includes 9 members and 6 variables : some are formatted by sprintf, some are directly concatenated in the string. Breaking this into two lines improves readbility and code review."
