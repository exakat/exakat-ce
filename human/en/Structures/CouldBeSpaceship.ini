name = "Could Be Spaceship";
description = "The spaceship operator compares values and returns 0 for equality, 1 for superior and -1 for inferior. 

It is the same as below, and prevents lots of code. 

<?php

if ($a) {
    return 1;
} elseif ($b) {
    return 0;
} else {
    return -1;
}
?>

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.4.0";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = "7.0+"

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "`spaceship operator <https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op>`_";
seeAlso[] = "`Remembering what spaceship operator do on comparison in PHP <https://www.amitmerchant.com/remembering-what-spaceship-operator-do-comparison-php/>`_";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "spaceship";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Adopt the spaceship operator"

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""

; Optional parameters
; Duplicate and increment numbers to add more : parameter1, paramter2, etc. 
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";

; Information for the ruleset Builder (https://www.exakat.io/en/ruleset_builder)
;rulesetBuild_title="Wrong Type Returned"
;rulesetBuild_code = "function foo() : string {
