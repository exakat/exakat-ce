name = "Several Instructions On The Same Line";
description = "Usually, instructions do not share their line : one instruction, one line. 

This is good for readability, and help at understanding the code. This is especially important when fast-reading the code to find some special situation, where such double-meaning line way have an impact.

<?php

switch ($x) {
    // Is it a fallthrough or not ? 
    case 1:
        doSomething(); break;

    // Easily spotted break.
    case 1:
        doSomethingElse(); 
        break;

    default : 
        doDefault(); 
        break;
}

?>

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = 'P_VERY_HIGH'

modifications[] = "Add new lines, so that one expression is on one line";

features[] = ''

seeAlso[] = "`Object Calisthenics, rule # 5 <http://williamdurand.fr/2013/06/03/object-calisthenics/#one-dot-per-line>`_"

phpErrors[] = ""

phpVersion = "";

[example1]
project="Piwigo"
file="tools/triggers_list.php"
line="993"
code="      foreach ($trigger['files'] as $file)
      {
        if (!$f) echo '<br>'; $f=0;
        echo preg_replace('#\((.+)\)#', '(<i>$1</i>)', $file);
      }
";
explain="There are two instructions on the line with the if(). Note that the condition is not followed by a bracketed block. When reviewing, it really seems that echo '<br>' and $f=0; are on the same block, but the second is indeed an unconditional expression. This is very difficult to spot. "
[example2]
project="Tine20"
file="tine20/Calendar/Controller/Event.php"
line="1594"
code="                $futurePersistentExceptionEvents->setRecurId($_event->getId());
                unset($_event->recurid);
                unset($_event->base_event_id);
                foreach(array('attendee', 'notes', 'alarms') as $prop) {
                    if ($_event->{$prop} instanceof Tinebase_Record_RecordSet) {
                        $_event->{$prop}->setId(NULL);
                    }
                }
                $_event->exdate = $futureExdates;

                $attendees = $_event->attendee; unset($_event->attendee);
                $note = $_event->notes; unset($_event->notes);
                $persistentExceptionEvent = $this->create($_event, $_checkBusyConflicts && $dtStartHasDiff);
";
explain="Here, $_event->attendee is saved in a local variable, then the property is destroyed. Same for $_event->notes; Strangely, a few lines above, the properties are unset on their own line. Unsetting properties leads to surprise bugs, and hidding the unset after ; makes it harder to spot."
