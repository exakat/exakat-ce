name = "Json_encode() Without Exceptions";
description = "json_encode() and json_decode() should use the exception system, to detect invalid JSON syntax. 

The second argument is a bitmask, and shall include JSON_THROW_ON_ERROR, so that both function may emit an exception when a parsing error happen. That exception can then be caught with a try/catch structure.

<?php

try{
	echo json_encode($response,  JSON_THROW_ON_ERROR | JSON_PRETY_PRINT);
} catch (\JsonException $e) {
	echo "Sorry, an error occured.";
}
?>

Alternatively, the error may be check by calling json_last_error() function. It will not be empty if an error is called.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.5.0";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = ""

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
;phpDeprecation = "7.4";

; List of links of interest
seeAlso[] = "`json_encode() <https://www.php.net/manual/en/function.json-encode.php>`_";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "json";
features[] = "error-handling";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Add the JSON_THROW_ON_ERROR in the second argument."
modifications[] = "Call json_validate() on the data, before parsing it."
modifications[] = "Check json_last_error() after the parsing, to detect any error";

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

; Human readable keywords for manual glossary
keywords[] = "json"
