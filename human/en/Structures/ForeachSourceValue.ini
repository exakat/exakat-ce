name = "Overwritten Source And Value";
description = "In a foreach(), it is best to keep source and values distinct. Otherwise, they overwrite each other.

Since PHP 7.0, PHP makes a copy of the original source, then works on it. This makes possible to use the same name for the source and the values.

<?php

// displays 0-1-2-3-3
$array = range(0, 3);
foreach($array as $array) {
    print $array . '-';
}
print_r($array);


/* displays 0-1-2-3-Array
(
    [0] => 0
    [1] => 1
    [2] => 2
    [3] => 3
)
*/
$array = range(0, 3);
foreach($array as $v) {
    print $v . '-';
}
print_r($array);

?>

When the source is used as the value, the elements in the array are successively assigned to itself. After the loop, the original array has been replaced by its last element.

The same applies to the index, or to any variable in a list() structure, used in a foreach().

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.8.9";
precision = "P_VERY_HIGH"

modifications[] = "Keep the source, the index and the values distinct"

features[] = "foreach"

seeAlso[] = ""

phpErrors[] = ""

phpVersion = "";


[example1]
project="ChurchCRM"
file="edusoho/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Dumper/CliDumper.php"
line="194"
code="            foreach ($str as $str) {
                if ($i < $m) {
                    $str .= "\n";
                }
                if (0 < $this->maxStringWidth && $this->maxStringWidth < $len = mb_strlen($str, 'UTF-8')) {
                    $str = mb_substr($str, 0, $this->maxStringWidth, 'UTF-8');
                    $lineCut = $len - $this->maxStringWidth;
                }
                //.... More code
";
explain="$str is actually processed as an array (string of characters), and it is also modified along the way."

[example2]
project="ExpressionEngine"
file="system/ee/EllisLab/ExpressionEngine/Service/Theme/ThemeInstaller.php"
line="595"
code="			foreach (directory_map($to_dir) as $directory => $filename)
			{
				if (is_string($directory))
				{
					foreach ($filename as $filename)
					{
						unlink($to_dir.$directory.'/'.$filename);
					}

					@rmdir($to_dir.$directory);
				}
				else
				{
					unlink($to_dir.$filename);
				}
			}
";
explain="Looping over $filename. "
