name = "Strict Comparison With Booleans";
description = "Strict comparisons prevent from mistaking an error with a false. 

Boolean values may be easily mistaken with other values, especially when the function may return integer or boolean as a normal course of action. 

It is encouraged to use strict comparison === or !== when booleans are involved in a comparison.

<?php

// distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
if (strpos($a, $b) === 0) {
    doSomething();
}

// DOES NOT distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
if (strpos($a, $b)) {
    doSomething();
}

// will NOT mistake 1 and true
$a = array(0, 1, 2, true);
if (in_array($a, true, true)) {
    doSomething();
}

// will mistake 1 and true
$a = array(0, 1, 2, true);
if (in_array($a, true)) {
    doSomething();
}

?>

switch() structures always uses == comparisons. 

Native function in_array() has a third parameter to make it use strict comparisons.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Use strict comparison whenever possible"

[example1]
project="Phinx"
file="src/Phinx/Db/Adapter/MysqlAdapter.php"
line="1131"
code="$column->isNull( ) == false";
explain="`Ã¬sNull( )`` always returns a boolean : it may be only be ``true`` or ``false``. Until typehinted properties or return typehint are used, isNull() may return anything else. "

[example2]
project="Typo3"
file="typo3/sysext/lowlevel/Classes/Command/FilesWithMultipleReferencesCommand.php"
line="90"
code="$input->getOption('dry-run') != false";
explain="When ``dry-run`` is not defined, the getOption() method actually returns a ``null`` value. So, comparing the result of getOption() to false is actually wrong : using a constant to prevent values to be inconsistent is recommended here."
