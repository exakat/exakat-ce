name = "Catch Overwrite Variable";
description = "The try/catch structure uses some variables that are also in use in this scope. In case of a caught exception, the exception will be put in the catch variable, and overwrite the current value, loosing some data.
It is recommended to use another name for these catch variables.";
code = "<?php

// variables and caught exceptions are distinct
$argument = 1;
try {
    methodThatMayRaiseException($argument);
} (Exception $e) {
    // here, $e has been changed to an exception.
}

// variables and caught exceptions are overlapping
$e = 1;
try {
    methodThatMayRaiseException();
} (Exception $e) {
    // here, $e has been changed to an exception.
}

?>";
clearphp = "no-catch-overwrite";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_INSTANT";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Use a standard : only use $e (or else) to catch exceptions. Avoid using them for anything else, parameter, property or local variable.";
modifications[] = "Change the variable, and keep the caught exception";
; Alternative to make this code go away. 
; One by possible solution

features[] = "try-catch";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "PhpIPAM";
file = "app/subnets/scan/subnet-scan-snmp-route.php";
line = "58";
code = "    try {
        $res = $Snmp->get_query(get_routing_table);
        // remove those not in subnet
        if (sizeof($res)>0) {
           // save for debug
           $debug[$d->hostname][$q] = $res;

           // save result
           $found[$d->id][$q] = $res;
        }
    } catch (Exception $e) {
       // save for debug
       $debug[$d->hostname][$q] = $res;
       $errors[] = $e->getMessage();
	}

// lots of code
// on line 132
    // print errors
    if (isset($errors)) {
        print <hr>;
        foreach ($errors as $e) {
            print $Result->show (warning, $e, false, false, true);
        }
    }

";
explain = "$e is used both as 'local' variable : it is local to the catch clause, and it is a blind variable in a foreach(). There is little overlap between the two occurrences, but one reader may wonder why the caught exception is shown later on. ";

[example2]
project = "SuiteCrm";
file = "modules/Emails/EmailUIAjax.php";
line = "1082";
code = "
// On line 900, $e is a Email
        case getMultipleMessagesFromSugar:
            $GLOBALS['log']->debug(********** EMAIL 2.0 - Asynchronous - at: getMultipleMessagesFromSugar);
            if (isset($_REQUEST['uid']) && !empty($_REQUEST['uid'])) {
                $exIds = explode(,, $_REQUEST['uid']);
                $out = array();

                foreach ($exIds as $id) {
                    $e = new Email();
                    $e->retrieve($id);
                    $e->description_html = from_html($e->description_html);
                    $ie->email = $e;
                    $out[] = $ie->displayOneEmail($id, $_REQUEST['mbox']);
                }

                echo $json->encode($out);
            }

            break;


// lots of code
// on line 1082
        case refreshSugarFolders:
            try {
                $GLOBALS['log']->debug(********** EMAIL 2.0 - Asynchronous - at: refreshSugarFolders);
                $rootNode = new ExtNode('', '');
                $folderOpenState = $current_user->getPreference('folderOpenState', 'Emails');
                $folderOpenState = (empty($folderOpenState)) ?  : $folderOpenState;
                $ret = $email->et->folder->getUserFolders(
                    $rootNode,
                    sugar_unserialize($folderOpenState),
                    $current_user,
                    true
                );
                $out = $json->encode($ret);
                echo $out;
            } catch (SugarFolderEmptyException $e) {
                $GLOBALS['log']->warn($e);
                $out = $json->encode(array(
                    'message' => 'No folder selected warning message here...',
                ));
                echo $out;
            }
            break;

";
explain = "$e starts as an Email(), in the 'getMultipleMessagesFromSugar' case, while a few lines later, in 'refreshSugarFolders', $e is now an exception. Breaks are in place, so both occurrences are separated, yet, one may wonder why an email is a warning, or a mail is a warning. ";
