name = "Function Subscripting, Old Style";
description = "It is possible use function results as an array, and read directly its element. This was added in PHP 5.4.

<?php

function foo() {
    return array(1 => 'a', 'b', 'c');
}

echo foo()[1]; // displays 'a';

// Function subscripting, the old way
function foo() {
    return array(1 => 'a', 'b', 'c');
}

$x = foo();
echo $x[1]; // displays 'a';

?>

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";

precision = "P_HIGH"

phpVersion = "5.4+"

modifications[] = "Skip the local variable and directly use the return value from the function";

features[] = "function-subscripting"

phpErrors[]= ""

seeAlso[] = ""

[example1]
project="OpenConf"
file="openconf/include.php"
line="1469"
code="	$advocateid = false;
	if (isset($GLOBALS['OC_configAR']['OC_paperAdvocates']) && $GLOBALS['OC_configAR']['OC_paperAdvocates']) {
		$ar = ocsql_query(""SELECT `advocateid` FROM `"" . OCC_TABLE_PAPERADVOCATE . ""` WHERE `paperid`='"" . safeSQLstr($pid) . ""'"") or err('Unable to retrieve advocate');
		if (ocsql_num_rows($ar) == 1) {
			$al = ocsql_fetch_assoc($ar);
			$advocateid = $al['advocateid'];
		}
	}
";
explain="Here, $advocateid may be directly read from ocsql_fetch_assoc(), although, checking for the existence of 'advocateid' before accessing it would make the code more robust"

