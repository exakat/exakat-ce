name = "Ternary In Concat";
description = "Ternary and coalesce operator have higher priority than dot '.' for concatenation. This means that : 

<?php
  // print B0CE as expected  
  print 'B'.$b.'C'. ($b > 1 ? 'D') : 'E';

  // print E, instead of B0CE
  print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';

  print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';
?>

prints actually 'E', instead of the awaited 'B0CE'.

To be safe, always add parenthesis when using ternary operator with concatenation.

See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.

";
clearphp = "";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Use parenthesis "
modifications[] = "Avoid ternaries and coalesce operators inside a string"

[example1]
project="TeamPass"
file="includes/libraries/protect/AntiXSS/UTF8.php"
line="5409"
code="$str1 . '' === $str2 . '' ? 0 : strnatcmp(self::strtonatfold($str1), self::strtonatfold($str2))";
explain="The concatenations in the initial comparison are disguised casting. When $str2 is empty too, the ternary operator yields a 0, leading to a systematic failure. "
