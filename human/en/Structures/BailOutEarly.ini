name = "Bail Out Early";
description = "When using conditions, it is recommended to quit in the current context, and avoid else clause altogether. 

The main benefit is to make clear the method applies a condition, and stop immediately when it is not satisfied. 
The main sequence is then focused on the actual code. 

This works with the ``break``, ``continue``, ``throw`` and ``goto`` keywords too, depending on situations.

<?php

// Bailing out early, low level of indentation
function foo1($a) {
    if ($a > 0) {
        return false;
    } 
    
    $a++;
    return $a;
}

// Works with continue too
foreach($array as $a => $b) {
    if ($a > 0) {
        continue false;
    } 
    
    $a++;
    return $a;
}

// No need for else
function foo2($a) {
    if ($a > 0) {
        return false;
    } else {
        $a++;
    }
    
    return $a;
}

// No need for else : return goes into then. 
function foo3($a) {
    if ($a < 0) {
        $a++;
    } else {
        return false;
    }
    
    return $a;
}

// Make a return early, and make the condition visible.
function foo3($a) {
    if ($a < 0) {
        $a++;
        methodcall();
        functioncall();
    } 
}

?>

See also `Avoid nesting too deeply and return early (part 1) <https://github.com/jupeter/clean-code-php#avoid-nesting-too-deeply-and-return-early-part-1>`_ and 
         `Avoid nesting too deeply and return early (part 2) <https://github.com/jupeter/clean-code-php#avoid-nesting-too-deeply-and-return-early-part-2>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.9";
modifications[] = "Detect errors, and then, return as soon as possible."
modifications[] = "When a if...then branches are unbalanced, test for the small branch, finish it with return. Then keep the other branch as the main code."
[example1]
project="OpenEMR"
file="interface/modules/zend_modules/module/Carecoordination/src/Carecoordination/Controller/EncounterccdadispatchController.php"
line="69"
code="      public function ccdaFetching($parameterArray = array())
    {
        $validResult = $this->getEncounterccdadispatchTable()->valid($parameterArray[0]);
        // validate credentials
        if ($validResult == 'existingpatient') {
/// Long bloc of code
        } else {
            return '<?xml version="1.0" encoding="UTF-8"?>
			<!-- Edited by XMLSpy -->
			<note>

				<heading>Authetication Failure</heading>
				<body></body>
			</note>
			';
        }
";
explain="This is a typical example of a function mostly controlled by one condition. It could be rewrite as 'if($validResult != 'existingpatient')' then return. The 'else' clause is not used anymore, and the whole block of code is now the main sequence of the method. "
[example2]
project="opencfp"
file="chair/assign_auto_reviewers_weighted_topic_match.inc"
line="105"
code="function oc_inConflict(&$conflictAR, $pid, $rid=null) {
	if ($rid == null) {
		$rid = $_SESSION[OCC_SESSION_VAR_NAME]['acreviewerid'];
	}
	if (!in_array($pid.'-'.$rid, $conflictAR)) {
		return false; // not in conflict
	} else {
		$tempr = ocsql_query(\"SELECT COUNT(*) AS `count` FROM `\" . OCC_TABLE_PAPERREVIEWER . \"` WHERE `paperid`='\" . safeSQLstr($pid) . \"' AND `reviewerid`='\" . safeSQLstr($rid) . \"'\");
		if ((ocsql_num_rows($tempr) == 1)
			&& ($templ = ocsql_fetch_assoc($tempr))
			&& ($templ['count'] == 1)
		) {
			return false; // assigned as reviewer
		} else {
			$tempr = ocsql_query(\"SELECT COUNT(*) AS `count` FROM `\" . OCC_TABLE_PAPERADVOCATE . \"` WHERE `paperid`='\" . safeSQLstr($pid) . \"' AND `advocateid`='\" . safeSQLstr($rid) . \"'\");
			if ((ocsql_num_rows($tempr) == 1)
				&& ($templ = ocsql_fetch_assoc($tempr))
				&& ($templ['count'] == 1)
			) {
				return false; // assigned as advocate
			}
		}
	}
	return true;
}
";
explain="This long example illustrates two aspects : first, the shortcut to the end of the method may be the 'then' clause, not necessarily the 'else'. '!in_array($pid.'-'.$rid, $conflictAR)' leads to return, and the 'else' should be removed, while keeping its content. Secondly, we can see 3 conditions that all lead to a premature end to the method. After refactoring all of them, the method would end up with 1 level of indentation, instead of 3."

