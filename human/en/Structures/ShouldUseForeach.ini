name = "Should Use Foreach";
description = "Use foreach instead of for when traversing an array.

Foreach() is the modern loop : it maps automatically every element of the array to a blind variable, and loop over it. This is faster and safer.

<?php

// Foreach version
foreach($array as $element) {
    doSomething($element);
}

// The above case may even be upgraded with array_map and a callback, 
// for the simplest one of them
$array = array_map('doSomething', $array);

// For version (one of various alternatives)
for($i = 0; $i < count($array); $i++) {
    $element = $array[$i];
    doSomething($element);
}

// Based on array_pop or array_shift()
while($value = array_pop($array)) {
    doSomething($array);
}

?>

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_ and 
         `5 Ways To Loop Through An Array In PHP <https://www.codewall.co.uk/5-ways-to-loop-through-array-php/>`_.

";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.12.7";

modifications[] = "Move for() loops to foreach(), whenever they apply to a finite list of elements"

[example1]
project="ExpressionEngine"
file="system/ee/EllisLab/ExpressionEngine/Service/Model/Query/Builder.php"
line="241"
code="		$length = strlen($str);
		$words = array();

		$word = '';
		$quote = '';
		$quoted = FALSE;

		for ($i = 0; $i < $length; $i++)
		{
			$char = $str[$i];

			if (($quoted == FALSE && $char == ' ') || ($quoted == TRUE && $char == $quote))
			{
				if (strlen($word) > 2)
				{
					$words[] = $word;
				}

				$quoted = FALSE;
				$quote = '';
				$word = '';

				continue;
			}

			if ($quoted == FALSE && ($char == '"' || $char == "'") && ($word === '' || $word == '-'))
			{
				$quoted = TRUE;
				$quote = $char;
				continue;
			}

			$word .= $char;
		}
";
explain="This code could turn the string into an array, with the explode() function, and use foreach(), instead of calculating the length() initially, and then building the loop."

[example2]
project="Woocommerce"
file="includes/libraries/class-wc-eval-math.php"
line="84"
code="				$stack_size = count( $stack );
				for ( $i = 0; $i < $stack_size; $i++ ) { // freeze the state of the non-argument variables
					$token = $stack[ $i ];
					if ( preg_match( '/^[a-z]\w*$/', $token ) and ! in_array( $token, $args ) ) {
						if ( array_key_exists( $token, self::$v ) ) {
							$stack[ $i ] = self::$v[ $token ];
						} else {
							return self::trigger( \"undefined variable '$token' in function definition\" );
						}
					}
				}
";
explain="This loops reviews the 'stack' and updates its elements. The same loop may leverage foreach and references for more efficient code."

