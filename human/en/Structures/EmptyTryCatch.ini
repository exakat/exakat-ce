name = "Empty Try Catch";
description = "The code does try, then catch errors but do no act upon the error. 

<?php

try { 
    doSomething();
} catch (Throwable $e) {
    // ignore this
}

?>

At worst, the error should be logged, so as to measure the actual usage of the catch expression.

``catch( Exception $e)`` (PHP 5) or ``catch(Throwable $e)`` with empty catch block should be banned. They ignore any error and proceed as if nothing happened. At worst, the event should be logged for future analysis. 

See also `Empty Catch Clause <http://wiki.c2.com/?EmptyCatchClause>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Add some logging in the catch"
modifications[] = "Add a comment to mention why the catch is empty"
modifications[] = "Change the exception, chain it and throw again"

[example1]
project="LiveZilla"
file="livezilla/_lib/trdp/Zend/Mail/Protocol/Pop3.php"
line="237"
code="public function logout()
    {
        if (!$this->_socket) {
            return;
        }

        try {
            $this->request('QUIT');
        } catch (Zend_Mail_Protocol_Exception $e) {
            // ignore error - we're closing the socket anyway
        }

        fclose($this->_socket);
        $this->_socket = null;
    }
";
explain="This is an aptly commented empty try/catch : the emited exception is extra check for a Zend Mail Protocol Exception. Hopefully, the Zend_Mail_Protocol_Exception only covers a already-closed situation. Anyhow, this should be logged for later diagnostic. "
[example2]
project="Mautic"
file="app/bundles/ReportBundle/Model/ExportHandler.php"
line="66"
code="        /**
     * @param string $fileName
     */
    public function removeFile($fileName)
    {
        try {
            $path = $this->getPath($fileName);
            $this->filePathResolver->delete($path);
        } catch (FileIOException $e) {
        }
    }
";
explain="Removing a file : if the file is not 'deleted' by the method call, but raises an error, it is hidden. When file destruction is impossible because the file is already destroyed (or missing), this is well. If the file couldn't be destroyed because of missing writing privileges, hiding this error will have serious consequences. "
