name = "Cast To Boolean";
description = "This expression may be reduced to casting to a boolean. This makes the code more readable, and adapt the type of the value to its usage.";
code = "<?php

$variable = $condition == 'met' ? 1 : 0;
// Same as 
$variable = (bool) $condition == 'met';

$variable = $condition == 'met' ? 0 : 1;
// Same as (Note the condition inversion)
$variable = (bool) $condition != 'met';
// also, with an indentical condition
$variable = !(bool) $condition == 'met';

// This also works with straight booleans expressions
$variable = $condition == 'met' ? true : false;
// Same as 
$variable = $condition == 'met';

?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_INSTANT";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Remove the old expression and use ``(bool)`` operator instead";
modifications[] = "Change the target values from true/false, or 0/1 to non-binary values, like strings or integers beyond 0 and 1.";
modifications[] = "Complete the current branches with other commands";
; Alternative to make this code go away. 
; One by possible solution

features[] = "cast";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "MediaWiki";
file = "includes/page/WikiPage.php";
line = "2274";
code = "
		$edits = $options['changed'] ? 1 : 0;
		$pages = $options['created'] ? 1 : 0;
		

		DeferredUpdates::addUpdate( SiteStatsUpdate::factory(
			[ 'edits' => $edits, 'articles' => $good, 'pages' => $pages ]
		) );
";
explain = "$options['changed'] and $options['created'] are documented and used as boolean. Yet, SiteStatsUpdate may require integers, for correct storage in the database, hence the type casting. ``(int) (bool)`` may be an alternative here.";

[example2]
project = "Dolibarr";
file = "htdocs/societe/class/societe.class.php";
line = "2777";
code = "			case 3:
				$ret=(!$conf->global->SOCIETE_IDPROF3_UNIQUE?false:true);
				break;

";
explain = "Several cases are built on the same pattern there. Each of the expression may be replaced by a cast to ``(bool)``.";
