name = "Avoid Substr() One";
description = "Use array notation ``$string[$position]`` to reach a single byte in a string.

There are two ways to access a byte in a string : substr() and ``$v[$pos]``.

The second style is more readable. It may be up to four times faster, though it is a micro-optimization. It is recommended to use it. 

PHP 7.1 also introduces the support of negative offsets as string index : negative offset are also reported.

<?php

$string = 'ab人cde';

echo substr($string, $pos, 1);
echo $string[$pos];

echo mb_substr($string, $pos, 1);

// when $pos = 1
// displays bbb
// when $pos = 2
// displays ??人

?>

Beware that substr() and ``$v[$pos]`` are similar, while mb_substr() is not. The first function works on bytes, while the latter works on characters.";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";

modifications[] = "Replace substr() with the array notations for strings."
modifications[] = "Replace substr() with a call to mb_substr()."

[example1]
project="ChurchCRM"
file="src/Login.php"
line="141"
code="if (substr($LocationFromGet, 0, 1) == \"/\") {
    $LocationFromGet = substr($LocationFromGet, 1);
}
";
explain="No need to call substr() to get only one char. "

[example2]
project="LiveZilla"
file="livezilla/_lib/objects.global.inc.php"
line="2243"
code="        $_hex = str_replace(\"#\", \"\", $_hex);
            if(strlen($_hex) == 3) {
            $r = hexdec(substr($_hex,0,1).substr($_hex,0,1));
            $g = hexdec(substr($_hex,1,1).substr($_hex,1,1));
            $b = hexdec(substr($_hex,2,1).substr($_hex,2,1));
        } else {
            $r = hexdec(substr($_hex,0,2));
            $g = hexdec(substr($_hex,2,2));
            $b = hexdec(substr($_hex,4,2));
        }
        $rgb = array($r, $g, $b);
        return $rgb;
";
explain="No need to call substr() to get only one char. "

