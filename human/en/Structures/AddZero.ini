name = "Adding Zero";
description = "Adding 0 is useless, as 0 is the neutral element for addition. Besides, when one of the argument is an integer, PHP triggers a cast to integer. 

It is recommended to make the cast explicit with ``(int)``. 

<?php

// Explicit cast
$a = (int) foo();

// Useless addition
$a = foo() + 0;
$a = 0 + foo();

// Also works with minus
$b = 0 - $c; // drop the 0, but keep the minus
$b = $c - 0; // drop the 0 and the minus

$a += 0;
$a -= 0;

?>

Adding zero is also reported when the zero is a defined constants. 

If it is used to type cast a value to integer, then casting with ``(int)`` is clearer. 

";
clearphp = "no-useless-math";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = "P_HIGH"

modifications[] = "Remove the +/- 0, may be the whole assignation"
modifications[] = "Use an explicit type casting operator (int)"

features[] = "addition"

seeAlso[] = ""

phpVersion = ""

phpErrors[] = ""

[example1]
project="Thelia";
file="core/lib/Thelia/Model/Map/ProfileResourceTableMap.php";
line="250";
code="        return serialize(array((string) $row[TableMap::TYPE_NUM == $indexType ? 0 + $offset : static::translateFieldName('ProfileId', TableMap::TYPE_PHPNAME, $indexType)], (string) $row[TableMap::TYPE_NUM == $indexType ? 1 + $offset : static::translateFieldName('ResourceId', TableMap::TYPE_PHPNAME, $indexType)]));";
explain="This return statement is doing quite a lot, including a buried '0 + $offset'. This call is probably an echo to '1 + $offset', which is a little later in the expression."
[example2]
project="OpenEMR"
file="interface/forms/fee_sheet/new.php:466";
line="534";
code="if (!$alertmsg && ($_POST['bn_save'] || $_POST['bn_save_close'] || $_POST['bn_save_stay'])) {
    $main_provid = 0 + $_POST['ProviderID'];
    $main_supid  = 0 + (int)$_POST['SupervisorID'];
    //.....
";
explain="$main_provid is filtered as an integer. $main_supid is then filtered twice : one with the sufficent (int) and then, added with 0."
