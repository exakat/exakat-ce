name = "Named Regex";
description = "Captured subpatterns may be named, for easier reference. 

From the manual : It is possible to name a subpattern using the syntax ``(?P<name>pattern)``. This subpattern will then be indexed in the matches array by its normal numeric position and also by name. PHP 5.2.2 introduced two alternative syntaxes ``(?<name>pattern)`` and ``(?'name'pattern)``.

Naming subpatterns makes it easier to know what is read from the results of the subpattern : for example, ``$r['name']`` has more meaning than ``$r[1]``. 

Named subpatterns may also be shifted in the regex without impact on the resulting array. 

<?php

$x = 'abc';
preg_match_all('/(?<name>a)/', $x, $r);
print_r($r[1]);
print_r($r['name']);

preg_match(\"/(?<name>a)(?'sub'b)/\", $x, $s);
print $s[2];
print $s['sub'];

?>

See also `Subpatterns <https://www.php.net/manual/en/regexp.reference.subpatterns.php>`_.

 ";
clearphp = "";
severity = "";
timetofix = "";
exakatSince = "1.4.9";
modifications[] = "Use named regex, and stop using integer-named subpatterns"
precision = "P_HIGH"
[example1]
project="Phinx"
file="src/Phinx/Util/Util.php"
line="127"
code="
    const MIGRATION_FILE_NAME_PATTERN = '/^\d+_([\w_]+).php$/i';
//.... More code with class definition
    public static function mapFileNameToClassName($fileName)
    {
        $matches = [];
        if (preg_match(static::MIGRATION_FILE_NAME_PATTERN, $fileName, $matches)) {
            $fileName = $matches[1];
        }

        return str_replace(' ', '', ucwords(str_replace('_', ' ', $fileName)));
    }
";
explain="$matches[1] could be renamed by $matches['filename'], if the capturing subpattern was named 'filename'. "
[example2]
project="shopware"
file="engine/Library/Enlight/Components/Snippet/Resource.php"
line="207"
code="            if (!preg_match(\"!(.?)(name=)(.*?)(?=(\s|$))!\", $_block_args, $_match) && empty($_block_default)) {
                throw new SmartyException('\"' . $_block_tag . '\" missing name attribute');
            }
            $_block_force = (bool) preg_match('#[\s]force#', $_block_args);
            $_block_json = (bool) preg_match('#[\s]json=[\"\']true[\"\']\W#', $_block_args);
            $_block_name = !empty($_match[3]) ? trim($_match[3], '\'\"') : $_block_default;

";
explain="$_match[3] is actually extracted two preg_match() before : by the time we read its usage, the first regex has been forgotten. A named subpattern would be useful here to remember what was captured."
