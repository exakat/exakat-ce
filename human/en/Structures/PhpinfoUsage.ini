name = "Phpinfo";
description = "phpinfo() is a great function to learn about the current configuration of the server.

<?php

if (DEBUG) {
    phpinfo();
}

?>

If left in the production code, it may lead to a critical leak, as any attacker gaining access to this data will know a lot about the server configuration.

It is advised to never leave that kind of instruction in a production code. 

phpinfo() may be necessary to access some specific configuration of the server : for example, ``Apache`` module list are only available via phpinfo(), and apache_get(), when they are loaded.

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

precsion = "P_VERY_HIGH";

seeAlso[] = "";

features[] = "phpinfo";

phpErrors[] = "";
related[] = "";

modifications[] = "Remove all usage of phpinfo()"
modifications[] = "Add one or more constant to fine-tune the phpinfo(), and limit the amount of displayed information"
modifications[] = "Replace phpinfo() with a more adapted method : get_loaded_extensions() to access the list of loaded extensions"
[example1]
project="Dolphin"
file="Dolphin-v.7.3.5/install/exec.php"
line="4"
code="<?php

    if (!empty($_POST['phpinfo']))
        phpinfo();
    elseif (!empty($_POST['gdinfo']))
        echo '<pre>' . print_r(gd_info(), true) . '</pre>';

?>
<center>

    <form method=post>
        <input type=submit name=phpinfo value=\"PHP Info\">
    </form>
    <form method=post>
        <input type=submit name=gdinfo value=\"GD Info\">
    </form>

</center>
";
explain="An actual phpinfo(), available during installation. Note that the phpinfo() is actually triggered by a hidden POST variable. "

