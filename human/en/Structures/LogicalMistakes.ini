name = "Logical Mistakes";
description = "Avoid logical mistakes within long expressions. 

Sometimes, the logic is not what it seems. It is important to check the actual impact of every part of the logical expression. Do not hesitate to make a table with all possible cases. If those cases are too numerous, it may be time to rethink the whole expression. 

<?php 

// Always true
if ($a != 1 || $a != 2) { } 

// $a == 1 is useless
if ($a == 1 || $a != 2) {}

// Always false
if ($a == 1 && $a == 2) {}

// $a != 2 is useless
if ($a == 1 && $a != 2) {}

?>

Based on article from ``Andrey Karpov``  `Logical Expressions in C/C++. Mistakes Made by Professionals <http://www.viva64.com/en/b/0390/>`_

";
clearphp = "";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Change the expressions for them to have a real meaning"

[example1]
project="Dolibarr"
file="htdocs/core/lib/admin.lib.php"
line="1165"
code="$nbtablib != $nbtabsql || $nbtabsql != $nbtabsqlsort";
explain="This expression is always true. When `$nbtabsql` is `$nbtablib`, the left part is true; When `$nbtabsql` is `$nbtabsqlsort`, the right part is true; When any other value is provided, both operands are true. "

[example2]
project="Cleverstyle"
file="modules/HybridAuth/Hybrid/Providers/DigitalOcean.php"
line="123"
code="TRUE == $data->account->email_verified and $data->account->email == $data->account->email_verified";
explain="This expression is always false. When `$data->account->email_verified` is `true`, the right part is false; When `$data->account->email_verified` is `$data->account->email`, the right part is false; The only viable solution is to have ` $data->account->email`true : this is may be the intend it, though it is not easy to understand. "
