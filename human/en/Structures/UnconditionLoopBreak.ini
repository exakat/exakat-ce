name = "Unconditional Break In Loop";
description = "An unconditional break in a loop creates dead code. Since the break is directly in the body of the loop, it is always executed, creating a strange loop that can only run once. 

Here, break may also be a return, a goto or a continue. They all branch out of the loop. Such statement are valid, but should be moderated with a condition. 

<?php

// return in loop should be in 
function summAll($array) {
    $sum = 0;
    
    foreach($array as $a) {
        // Stop at the first error
        if (is_string($a)) {
            return $sum;
        }
        $sum += $a;
    }
    
    return $sum;
}

// foreach loop used to collect first element in array
function getFirst($array) {
    foreach($array as $a) {
        return $a;
    }
}

?>

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.12.16";

modifications[] = "Remove the loop and call the content of the loop once."
[example1]
project="LiveZilla"
file="wp-admin/includes/misc.php"
line="74"
code="        $result = DBManager::Execute(true, \"SELECT * FROM `\" . DB_PREFIX . DATABASE_STATS_AGGS . \"` WHERE `month`>0 AND ((`year`='\" . DBManager::RealEscape(date(\"Y\")) . \"' AND `month`<'\" . DBManager::RealEscape(date(\"n\")) . \"') OR (`year`<'\" . DBManager::RealEscape(date(\"Y\")) . \"')) AND (`aggregated`=0 OR `aggregated`>\" . (time() - 300) . \") AND `day`=0 ORDER BY `year` ASC,`month` ASC LIMIT 1;\");
        if ($result)
            while ($row = DBManager::FetchArray($result)) {
                if (empty($row[\"aggregated\"])) {
                    DBManager::Execute(true, \"UPDATE `\" . DB_PREFIX . DATABASE_STATS_AGGS . \"` SET `aggregated`=\" . time() . \" WHERE `year`=\" . $row[\"year\"] . \" AND `month`=\" . $row[\"month\"] . \" AND `day`=0 LIMIT 1;\");
                    $this->AggregateMonth($row[\"year\"], $row[\"month\"]);
                }
                return false;
            }
";
explain="Only one row is read from the DBManager, and the rest is ignored. The result has no more than one result, basedd on the `LIMIT 1` clause in the SQL. The while loop may be removed."

[example2]
project="MediaWiki"
file="includes/htmlform/HTMLFormField.php"
line="138"
code="		for ( $i = count( $thisKeys ) - 1; $i >= 0; $i-- ) {
			$keys = array_merge( array_slice( $thisKeys, 0, $i ), $nameKeys );
			$data = $alldata;
			foreach ( $keys as $key ) {
				if ( !is_array( $data ) || !array_key_exists( $key, $data ) ) {
					continue 2;
				}
				$data = $data[$key];
			}
			$testValue = (string)$data;
			break;
		}
";
explain="The final break is useless : the execution has already reached the end of the loop."
