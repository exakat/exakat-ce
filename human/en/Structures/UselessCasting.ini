name = "Useless Type Casting";
description = "There is no need to overcast returned values.

<?php

// trim always returns a string : cast is useless
$a = (string) trim($b);

// strpos doesn't always returns an integer : cast is useful
$a = (boolean) strpos($b, $c);

// comparison don't need casting, nor parenthesis
$c = (bool) ($b > 2);

?>

See also `Type juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.7";
precision="P_VERY_HIGH";

rulesetBuild_title="Useless Type Casting"
rulesetBuild_code = "$s = (string) strtolower($s);"

modifications[] = "Remove the type cast"

[example1]
project="FuelCMS"
file="fuel/codeigniter/core/URI.php"
line="214"
code="		if (isset($_SERVER['SCRIPT_NAME'][0]))
		{
			if (strpos($uri, $_SERVER['SCRIPT_NAME']) === 0)
			{
				$uri = (string) substr($uri, strlen($_SERVER['SCRIPT_NAME']));
			}
			elseif (strpos($uri, dirname($_SERVER['SCRIPT_NAME'])) === 0)
			{
				$uri = (string) substr($uri, strlen(dirname($_SERVER['SCRIPT_NAME'])));
			}
		}
";
explain="substr() always returns a string, so there is no need to enforce this."

[example2]
project="ThinkPHP"
file="ThinkPHP/Library/Think/Db/Driver/Sqlsrv.class.php"
line="67"
code="            foreach ($result as $key => $val) {
                $info[$val['column_name']] = array(
                    'name'    => $val['column_name'],
                    'type'    => $val['data_type'],
                    'notnull' => (bool) ('' === $val['is_nullable']), // not null is empty, null is yes
                    'default' => $val['column_default'],
                    'primary' => false,
                    'autoinc' => false,
                );
            }
";
explain="A comparison always returns a boolean, except for the spaceship operator."
