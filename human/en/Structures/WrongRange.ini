name = "Wrong Range Check";
description = "The interval check should use && and not ||. 

<?php

//interval correctly checked a is between 2 and 999
if ($a > 1 && $a < 1000) {}

//interval incorrectly checked : a is 2 or more ($a < 1000 is never checked)
if ($a > 1 || $a < 1000) {}

?>
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_INSTANT";
exakatSince = "1.2.5";

modifications[] = "Make the interval easy to read and understand"
modifications[] = "Check the truth table for the logical operation"

[example1]
project="Dolibarr"
file="htdocs/includes/phpoffice/PhpSpreadsheet/Spreadsheet.php"
line="1484"
code="
    public function setTabRatio($tabRatio)
    {
        if ($tabRatio >= 0 || $tabRatio <= 1000) {
            $this->tabRatio = (int) $tabRatio;
        } else {
            throw new Exception('Tab ratio must be between 0 and 1000.');
        }
    }
";
explain="When $tabRatio is 1001, then the condition is valid, and the ratio accepted. The right part of the condition is not executed."

[example2]
project="WordPress"
file="wp-includes/formatting.php"
line="3634"
code="
	} elseif ( $diff < MONTH_IN_SECONDS && $diff >= WEEK_IN_SECONDS ) {
		$weeks = round( $diff / WEEK_IN_SECONDS );
		if ( $weeks <= 1 ) {
			$weeks = 1;
		}
		/* translators: Time difference between two dates, in weeks. %s: Number of weeks */
		$since = sprintf( _n( '%s week', '%s weeks', $weeks ), $weeks );
";
explain="This condition may be easier to read as `$diff >= WEEK_IN_SECONDS && $diff < MONTH_IN_SECONDS`. When testing for outside this interval, using not is also more readable : `!($diff >= WEEK_IN_SECONDS && $diff < MONTH_IN_SECONDS)`."

