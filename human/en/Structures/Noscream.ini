name = "@ Operator";
description = "@ is the 'no scream' operator : it suppresses error output. 

<?php

// Set x with incoming value, or else null. 
$x = @$_GET['x'];

?>

This operator is very slow : it processes the error, and finally decides not to display it. It is often faster to check the conditions first, then run the method without ``@``.

You may also set display_error to 0 in the ``php.ini`` : this avoids user's error display, and keeps the error in the PHP logs, for later processing. 

The only situation where ``@`` is useful is when a native PHP function displays errors messages and there is no way to check it from the code beforehand. 

This was the case with fopen(), stream_socket_server(), token_get_all(). As of PHP 7.0, they are all hiding errors when ``@`` is active.

";
clearphp = "no-noscream";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision = "P_VERY_HIGH"

modifications[] = "Remove the @ operator by default"

features[] = "class"

seeAlso[] = "`I scream, you scream, we all scream for @ <https://www.exakat.io/en/i-scream-you-scream-we-all-scream-for/>`_"
seeAlso[] = "`Error Control Operators <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_"
seeAlso[] = "`Five reasons why the shut-op operator should be avoided <https://derickrethans.nl/five-reasons-why-the-shutop-operator-should-be-avoided.html>`_"

phpErrors[] = ""

phpVersion = "";


; Optional parameters
[parameter1]
name="authorizedFunctions";
default="noscream_functions.json";
type="data";
description="Functions that are authorized to sports a @.";

rulesetBuild_title=\"Usage of no scream operator @"
rulesetBuild_code = \"@$a['index'] = 1;
@foo($b, $c);"

[example1]
project="Phinx"
file="src/Phinx/Util/Util.php"
line="239"
code="        $isReadable = @\\fopen($filePath, 'r') !== false;

        if (!$filePath || !$isReadable) {
            throw new \\Exception(sprintf(\"Cannot open file %s \\n\", $filename));
        }
";
explain="fopen() may be tested for existence, readability before using it. Although, it actually emits some errors on Windows, with network volumes."

[example2]
project="PhpIPAM"
file="functions/classes/class.Log.php"
line="322"
code=" $_SESSION['ipamusername']";
explain="Variable and index existence should always be tested with isset() : it is faster than using ``@``."
