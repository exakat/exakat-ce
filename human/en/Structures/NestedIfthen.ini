name = "Nested Ifthen";
description = "Three levels of ifthen is too much. The method should be split into smaller functions.

<?php

function foo($a, $b) {
    if ($a == 1) {
        // Second level, possibly too much already
        if ($b == 2) {
            
        }
    }
}

function bar($a, $b, $c) {
    if ($a == 1) {
        // Second level. 
        if ($b == 2) {
            // Third level level. 
            if ($c == 3) {
                // Too much
            }
        }
    }
}

?>
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision = "P_VERY_HIGH"

seeAlso[] = "Structures/TooManyIf"

phpErrors[] = ""

features[] = "if-then"

[parameter1]
name="nestedIfthen";
default="3";
type="integer";
description="Maximal number of acceptable nesting of if-then structures";

modifications[] = "Move some of the if-then structure to an external method"
modifications[] = "Turn the nested if-then into a switch"
modifications[] = "Put any condition that terminate the method call early, so that else is not needed."
modifications[] = "Turn the method into a class, using the properties to split the code into smaller methods."

[example1]
project="LiveZilla"
file="livezilla/_lib/objects.global.inc.php"
line="847"
code="        if(isset(Server::$Configuration->File[\"gl_url_detect\"]) && !Server::$Configuration->File[\"gl_url_detect\"] && isset(Server::$Configuration->File[\"gl_url\"]) && !empty(Server::$Configuration->File[\"gl_url\"]))
        {
            $url = Server::$Configuration->File[\"gl_url\"];
        }
        else if(isset($_SERVER[\"HTTP_HOST\"]) && !empty($_SERVER[\"HTTP_HOST\"]))
        {
            $host = $_SERVER[\"HTTP_HOST\"];
            $path = $_SERVER[\"PHP_SELF\"];

            if(!empty($path) && !Str::EndsWith(strtolower($path),strtolower($_file)) && strpos(strtolower($path),strtolower($_file)) !== false)
            {
                if(empty(Server::$Configuration->File[\"gl_kbmr\"]))
                {
                    Logging::DebugLog(serialize($_SERVER));
                    exit(\"err 888383; can't read \$_SERVER[\\"HTTP_HOST\\"] and \$_SERVER[\\"PHP_SELF\\"]\");
                }
            }

            define(\"LIVEZILLA_DOMAIN\",Communication::GetScheme() . $host);
            $url = LIVEZILLA_DOMAIN . str_replace($_file,\"\",htmlentities($path,ENT_QUOTES,\"UTF-8\"));
        }
";
explain="The first condition is fairly complex, and could also return early. Then, the second nested if could be merged into one : this would reduce the number of nesting, but make the condition higher. "

[example2]
project="MediaWiki"
file="includes/Linker.php"
line="1493"
code="	public static function normalizeSubpageLink( $contextTitle, $target, &$text ) {
		$ret = $target; # default return value is no change

		# Some namespaces don't allow subpages,
		# so only perform processing if subpages are allowed
		if (
			$contextTitle && MediaWikiServices::getInstance()->getNamespaceInfo()->
			hasSubpages( $contextTitle->getNamespace() )
		) {
			$hash = strpos( $target, '#' );
			if ( $hash !== false ) {
				$suffix = substr( $target, $hash );
				$target = substr( $target, 0, $hash );
			} else {
				$suffix = '';
			}
			# T9425
			$target = trim( $target );
			$contextPrefixedText = MediaWikiServices::getInstance()->getTitleFormatter()->
				getPrefixedText( $contextTitle );
			# Look at the first character
			if ( $target != '' && $target[0] === '/' ) {
				# / at end means we don't want the slash to be shown
				$m = [];
				$trailingSlashes = preg_match_all( '%(/+)$%', $target, $m );
				if ( $trailingSlashes ) {
					$noslash = $target = substr( $target, 1, -strlen( $m[0][0] ) );
				} else {
					$noslash = substr( $target, 1 );
				}

				$ret = $contextPrefixedText . '/' . trim( $noslash ) . $suffix;
				if ( $text === '' ) {
					$text = $target . $suffix;
				} # this might be changed for ugliness reasons
			} else {
				# check for .. subpage backlinks
				$dotdotcount = 0;
				$nodotdot = $target;
				while ( strncmp( $nodotdot, \"../\", 3 ) == 0 ) {
					++$dotdotcount;
					$nodotdot = substr( $nodotdot, 3 );
				}
				if ( $dotdotcount > 0 ) {
					$exploded = explode( '/', $contextPrefixedText );
					if ( count( $exploded ) > $dotdotcount ) { # not allowed to go below top level page
						$ret = implode( '/', array_slice( $exploded, 0, -$dotdotcount ) );
						# / at the end means don't show full path
						if ( substr( $nodotdot, -1, 1 ) === '/' ) {
							$nodotdot = rtrim( $nodotdot, '/' );
							if ( $text === '' ) {
								$text = $nodotdot . $suffix;
							}
						}
						$nodotdot = trim( $nodotdot );
						if ( $nodotdot != '' ) {
							$ret .= '/' . $nodotdot;
						}
						$ret .= $suffix;
					}
				}
			}
		}

		return $ret;
	}
";
explain="There are 5 level of nesting here, from the beginning of the method, down to the last condition. All work on local variables, as it is a static method. May be breaking this into smaller functions would help readability."


