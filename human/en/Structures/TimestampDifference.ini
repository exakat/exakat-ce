name = "Timestamp Difference";
description = "``time()`` and ``microtime()`` shouldn't be used to calculate duration. 

``time()`` and ``microtime()`` are subject to variations, depending on system clock variations, such as daylight saving time difference (every spring and fall, one hour variation), or leap seconds, happening on ``June, 30th`` or ``December 31th``, as announced by `IERS <https://www.iers.org/IERS/EN/Home/home_node.html>`_.

<?php

// Calculating tomorow, same hour, the wrong way
// tomorrow is not always in 86400s, especially in countries with daylight saving 
$tomorrow = time()  + 86400; 

// Good way to calculate tomorrow
$datetime = new DateTime('tomorrow');

?>

When the difference may be rounded to a larger time unit (rounding the difference to days, or several hours), the variation may be ignored safely.

When the difference is very small, it requires a better way to measure time difference, such as `Ticks <https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks>'_, 
`ext/hrtime <https://www.php.net/manual/en/book.hrtime.php>'_, or including a check on the actual time zone (``ini_get()`` with 'date.timezone'). 

See also `PHP DateTime difference – it’s a trap! <http://blog.codebusters.pl/en/php-datetime-difference-trap/>`_ and 
           `PHP Daylight savings bug? <https://stackoverflow.com/questions/22519091/php-daylight-savings-bug>`_.
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_SLOW";
exakatSince = "0.8.4";

modifications[] = "For small time intervals, use hrtime() functions";
modifications[] = "For larger time intervals, use add() method with ``DateTime``";


[example1]
project=Zurmo
file=app/protected/modules/import/jobs/ImportCleanupJob.php
line=73
code="        /**
         * Get all imports where the modifiedDateTime was more than 1 week ago.  Then
         * delete the imports.
         * (non-PHPdoc)
         * @see BaseJob::run()
         */
        public function run()
        {
            $oneWeekAgoTimeStamp = DateTimeUtil::convertTimestampToDbFormatDateTime(time() - 60 * 60 *24 * 7);
";
explain="This is wrong twice a year, in countries that has day-ligth saving time. One of the weeks will be too short, and the other will be too long. "
[example2]
project=shopware
file=engine/Shopware/Controllers/Backend/Newsletter.php
line=150
code="            // Check lock time. Add a buffer of 30 seconds to the lock time (default request time)
            if (!empty($mailing['locked']) && strtotime($mailing['locked']) > time() - 30) {
                echo \"Current mail: '\" . $subjectCurrentMailing . \"'\n\";
                echo \"Wait \" . (strtotime($mailing['locked']) + 30 - time()) . \" seconds ...\n\";
                return;
            }
";
explain="When daylight saving strike, the email may suddenly be locked for 1 hour minus 30 seconds ago. The lock will be set for the rest of the hour, until the server catch up. "
