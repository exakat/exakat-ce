name = "Should Use Operator";
description = "Some functions duplicate the feature of an operator. When in doubt, it is better to use the operator. 

Beware, some edge cases may apply. In particular, backward compatibility may prevent usage of newer features.

* array_push() is equivalent to [] 
* is_object() is equivalent to instanceof
* function_get_arg() and function_get_args() is equivalent to ellipsis : ...
* chr() is equivalent to string escape sequences, such as ``\n``, ``\x69``, ``u{04699}``
* call_user_func() is equivalent to ``$functionName(arguments)``, ``$object->$method(...$arguments)``
* is_null() is equivalent to ``=== null``
* php_version() is equivalent to ``PHP_VERSION`` (the constant)
* is_array(), is_int(), is_object(), etc. is equivalent to a scalar typehint


";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "1.3.0";
modifications[] = "Use [] instead of array_push()"
modifications[] = "Use instanceof instead of is_object()"
modifications[] = "Use ... instead of function_get_arg() and function_get_args()"
modifications[] = "Use escape sequences instead of chr()"
modifications[] = "Use dynamic function call instead of call_user_func()"
modifications[] = "Use === null instead of is_null()"
modifications[] = "Use PHP_VERSION instead of php_version()"
modifications[] = "Use typehint instead of is_int(), is_string(), is_bool(), etc."
[example1]
project="Zencart"
file="includes/modules/payment/paypal/paypal_curl.php"
line="378"
code="  function TransactionSearch($startdate, $txnID = '', $email = '', $options) {
    // several lines of code, no mention of $options
      if (is_array($options)) $values = array_merge($values, $options);
    }
    return $this->_request($values, 'TransactionSearch');
  }";
explain="Here, $options is merged with $values if it is an array. If it is not an array, it is probably a null value, and may be ignored. Adding a 'array' typehint will strengthen the code an catch situations where TransactionSearch() is called with a string, leading to clearer code."
[example2]
project="SugarCrm"
file="include/utils.php:2093"
line="464"
code="function sugar_config_union( $default, $override ){
	// a little different then array_merge and array_merge_recursive.  we want
	// the second array to override the first array if the same value exists,
	// otherwise merge the unique keys.  it handles arrays of arrays recursively
	// might be suitable for a generic array_union
	if( !is_array( $override ) ){
		$override = array();
	}
	foreach( $default as $key => $value ){
		if( !array_key_exists($key, $override) ){
			$override[$key] = $value;
		}
		else if( is_array( $key ) ){
			$override[$key] = sugar_config_union( $value, $override[$key] );
		}
	}
	return( $override );
}";
explain="$override should an an array : if not, it is actually set by default to empty array. Here, a typehint with a default value of 'array()' would offset the parameter validation to the calling method."
