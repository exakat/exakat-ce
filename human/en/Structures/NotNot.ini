name = "Not Not";
description = "Double not makes a boolean, not a ``true``.

This is a wrong casting to boolean. PHP supports ``(boolean)`` to do the same, faster and cleaner.

<?php
    // Explicit code
    $b = (boolean) $x; 
    $b = (bool) $x; 

    // Wrong type casting
    $b = !!$x; 

?>

";
clearphp = "no-implied-cast";
severity = "S_MINOR";
timetofix = "T_INSTANT";
exakatSince = "0.8.4";
precision = 'P_VERY_HIGH'

modifications[] = "Use ``(bool)`` casting operator for that";
modifications[] = "Don't typecast, and let PHP handle it. This works in situations where the boolean is immediately used.";

features[] = 'logical-operator'
features[] = 'cast'

seeAlso[] = "`Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_"
seeAlso[] = "`Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_"

phpErrors[] = ""

phpVersion = "";

[example1]
project="Cleverstyle"
file="modules/OAuth2/OAuth2.php"
line="190"
code="		$result = $this->db_prime()->q(
			[
				\"DELETE FROM `[prefix]oauth2_clients`
				WHERE `id` = '%s'\",
				\"DELETE FROM `[prefix]oauth2_clients_grant_access`
				WHERE `id`	= '%s'\",
				\"DELETE FROM `[prefix]oauth2_clients_sessions`
				WHERE `id`	= '%s'\" 
			],
			$id
		);
		unset($this->cache->{'/'});
		return !!$result;
";
explain="This double-call returns ``$results`` as a boolean, preventing a spill of data to the calling method. The ``(bool)`` operator would be clearer here."
[example2]
project="Tine20"
file="tine20/Calendar/Controller/MSEventFacade.php"
line="392"
code="            foreach ($exceptions as $exception) {
                $exception->assertAttendee($this->getCalendarUser());
                $this->_prepareException($savedEvent, $exception);
                $this->_preserveMetaData($savedEvent, $exception, true);
                $this->_eventController->createRecurException($exception, !!$exception->is_deleted);
            }

";
explain="It seems that !! is almost superfluous, as a property called 'is_deleted' should already be a boolean."
