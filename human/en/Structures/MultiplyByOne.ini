name = "Multiply By One";
description = "Multiplying by 1 is a fancy type cast. 

If it is used to type cast a value to number, then casting (int) or (float) is clearer. This behavior may change with PHP 7.1, which has unified the behavior of all hidden casts.";
code = "<?php

// Still the same value than $m, but now cast to integer or float
$m = $m * 1; 

// Still the same value than $m, but now cast to integer or float
$n *= 1; 

// make typecasting clear, and merge it with the producing call.
$n = (int) $n;

?>";
clearphp = "no-useless-math";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_INSTANT";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Typecast to (int) or (float) for better readability";
modifications[] = "Skip useless math operation altogether";
; Alternative to make this code go away. 
; One by possible solution

features[] = "neutral-element";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

[example1]
project = "SugarCrm";
file = "SugarCE-Full-6.5.26/modules/Relationships/views/view.editfields.php";
line = "74";
code = "        $count = 0;
        foreach($this->fields as $def)
        {
            if (!empty($def['relationship_field'])) {
                $label = !empty($def['vname']) ? $def['vname'] : $def['name'];
                echo \"<td>\" . translate($label, $this->module) . \":</td>\" 
                   . \"<td><input id='{$def['name']}' name='{$def['name']}'>\"; 

                if ($count%1)
                    echo \"</tr><tr>\";
                $count++;
            }
        }
        echo \"</tr></table></form>\";
";
explain = "Here, '$count % 1' is always true, after the first loop of the foreach. There is no need for % usage.";

[example2]
project = "Edusoho";
file = "wp-admin/includes/misc.php";
line = "74";
code = "            'yesterdayStart' => date('Y-m-d', strtotime(date('Y-m-d', time())) - 1 * 24 * 3600),

";
explain = "1 is useless here, since 24 * 3600 is already an integer. And, of course, a day is not 24 * 3600... at least every day.";
