name = "Same Conditions In Condition";
description = "At least two consecutive if/then structures use identical conditions. The latter will probably be ignored.

This analysis returns false positive when there are attempt to fix a situation, or to call an alternative solution. 

Conditions that are shared between if structures, but inside a logical OR expression are also detected.

<?php

if ($a == 1) { doSomething(); }
elseif ($b == 1) { doSomething(); }
elseif ($c == 1) { doSomething(); }
elseif ($a == 1) { doSomething(); }
else {}

// Also works on if then else if chains
if ($a == 1) { doSomething(); }
else if ($b == 1) { doSomething(); }
else if ($c == 1) { doSomething(); }
else if ($a == 1) { doSomething(); }
else {}

// Also works on if then else if chains
// Here, $a is common and sufficient in both conditions
if ($a || $b) { doSomething(); } 
elseif ($a || $c) { doSomethingElse(); } 

// This sort of situation generate false postive. 
$config = load_config_from_commandline();
if (empty($config)) {
    $config = load_config_from_file();
    if (empty($config)) {
        $config = load_default_config();
    }
}

?>
";
clearphp = "";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Merge the two conditions into one"
modifications[] = "Make the two conditions different"

[example1]
project="TeamPass"
file="sources/identify.php"
line="1096"
code="
            if ($result == 1) {
                $return = \"\";
                $logError = \"\";
                $proceedIdentification = true;
                $userPasswordVerified = false;
                unset($_SESSION['hedgeId']);
                unset($_SESSION['flickercode']);
            } else {
                if ($result < -10) {
                    $logError = \"ERROR: \".$result;
                } elseif ($result == -4) {
                    $logError = \"Wrong response code, no more tries left.\";
                } elseif ($result == -3) {
                    $logError = \"Wrong response code, try to reenter.\";
                } elseif ($result == -2) {
                    $logError = \"Timeout. The response code is not valid anymore.\";
                } elseif ($result == -1) {
                    $logError = \"Security Error. Did you try to verify the response from a different computer?\";
                } elseif ($result == 1) {
                    $logError = \"Authentication successful, response code correct.
                          <br /><br />Authentification Method for SecureBrowser updated!\";
                    // Add necessary code here for accessing your Business Application
                }
                $return = \"agses_error\";
                echo '[{\"value\" : \"'.$return.'\", \"user_admin\":\"',
                isset($_SESSION['user_admin']) ? $_SESSION['user_admin'] : \"\",
                '\", \"initial_url\" : \"'.@$_SESSION['initial_url'].'\",
                \"error\" : \"'.$logError.'\"}]';

                exit();
            }
";
explain="`$result == 1` is use once in the main if/then, then again the second if/then/elseif structure. Both are incompatible, since, in the else, `$result` will be different from 1. "

[example2]
project="Typo3"
file="typo3/sysext/recordlist/Classes/RecordList/DatabaseRecordList.php"
line="1696"
code="
                            } elseif ($table === 'pages') {
                                $parameters = ['id' => $this->id, 'pagesOnly' => 1, 'returnUrl' => GeneralUtility::getIndpEnv('REQUEST_URI')];
                                $href = (string)$uriBuilder->buildUriFromRoute('db_new', $parameters);
                                $icon = '<a class=\"btn btn-default\" href=\"' . htmlspecialchars($href) . '\" title=\"' . htmlspecialchars($lang->getLL('new')) . '\">'
                                    . $spriteIcon->render() . '</a>';
                            } else {
                                $params = '&edit[' . $table . '][' . $this->id . ']=new';
                                if ($table === 'pages') {
                                    $params .= '&overrideVals[pages][doktype]=' . (int)$this->pageRow['doktype'];
                                }
                                $icon = '<a class=\"btn btn-default\" href=\"#\" onclick=\"' . htmlspecialchars(BackendUtility::editOnClick($params, '', -1))
                                    . '\" title=\"' . htmlspecialchars($lang->getLL('new')) . '\">' . $spriteIcon->render() . '</a>';
                            }
";
explain="`$table == 'pages` is caught initially, and if it fails, it is tested again in the final else. This won't happen.";
