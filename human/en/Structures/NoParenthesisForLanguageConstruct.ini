name = "No Parenthesis For Language Construct";
description = "Some PHP language constructs, such are ``include``, ``require``, ``include_once``, ``require_once``, ``print``, ``echo`` don't need parenthesis. They accept parenthesis, but it is may lead to strange situations. 

<?php

// This is an attempt to load 'foo.inc', or kill the script
include('foo.inc') or die();
// in fact, this is read by PHP as : include 1 
// include  'foo.inc' or die();

?>

It it better to avoid using parenthesis with ``echo``, ``print``, ``return``, ``throw``, ``yield``, ``yield from``, ``include``, ``require``, ``include_once``, ``require_once``.

See also `include <https://www.php.net/manual/en/function.include.php>`_.
";
clearphp = "no-parenthesis-for-language-construct";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
modifications[] = "Remove parenthesis"

keywords[] = "parenthesis"
keywords[] = "language construct"
keywords[] = "return"
keywords[] = "include"

[example1]
project="Phpdocumentor"
file="src/Application/Renderer/Router/StandardRouter.php"
line="55"
code="        $this[] = new Rule(function ($node) { return ($node instanceof NamespaceDescriptor); }, $namespaceGenerator);";
explain="No need for parenthesis with require(). instanceof has a higher precedence than return anyway. "
[example2]
project="phpMyAdmin"
file="db_datadict.php"
line="170"
code="echo (($row['Null'] == 'NO') ? __('No') : __('Yes'))";
explain="Not only echo() doesn't use any parenthesis, but this syntax gives the illusion that echo() only accepts one argument, while it actually accepts an arbitrary number of argument."

