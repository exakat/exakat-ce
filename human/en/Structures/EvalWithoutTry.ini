name = "eval() Without Try";
description = "``eval()`` emits a ``ParseError`` exception with PHP 7 and later. Catching this exception is the recommended way to handle errors when using the ``eval()`` function.
Note that it will catch situations where ``eval()`` is provided with code that can't be used, but it will not catch security problems. Avoid using ``eval()`` with incoming data.";
code = "<?php

$code = 'This is no PHP code.';

//PHP 5 style
eval($code);
// Ends up with a Fatal error, at execution time

//PHP 7 style
try {
    eval($code);
} catch (ParseError $e) {
    cleanUpAfterEval();
}

?>";
clearphp = "";
severity = "S_CRITICAL";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Always add a try/catch block around eval() call";
; Alternative to make this code go away. 
; One by possible solution

features[] = "eval";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "";
; List of links of interest

related[] = "Exceptions/CouldUseTry";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "7.0+";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "7.0";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "FuelCMS";
file = "fuel/modules/fuel/controllers/Blocks.php";
line = "268";
code = "@eval($_name_var_eval)";
explain = "The @ will prevent any error, while the try/catch allows the processing of certain types of error, namely the Fatal ones. ";

[example2]
project = "ExpressionEngine";
file = "system/ee/EllisLab/Addons/member/mod.member_memberlist.php";
line = "637";
code = "					elseif (isset($fields[$val['3']]))
					{
						if (array_key_exists('m_field_id_'.$fields[$val['3']], $row))
						{
							$v = $row['m_field_id_'.$fields[$val['3']]];

							$lcond = str_replace($val['3'], "$v", $lcond);
							$cond = $lcond.' '.$rcond;
							$cond = str_replace(\"|\", \"|\", $cond);

							eval(\"$result = \".$cond.\";\");
";
explain = "$cond is build from values extracted from the $fields array. Although it is probably reasonably safe, a try/catch here will collect any unexpected situation cleaningly.";
