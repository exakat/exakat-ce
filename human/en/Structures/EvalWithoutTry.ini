name = "eval() Without Try";
description = "``eval()`` emits a ``ParseError`` exception with PHP 7 and later. Catching this exception is the recommended way to handle errors when using the ``eval()`` function.

<?php

$code = 'This is no PHP code.';

//PHP 5 style
eval($code);
// Ends up with a Fatal error, at execution time

//PHP 7 style
try {
    eval($code);
} catch (ParseError $e) {
    cleanUpAfterEval();
}

?>

Note that it will catch situations where ``eval()`` is provided with code that can't be used, but it will not catch security problems. Avoid using ``eval()`` with incoming data.
";
clearphp = "";
phpversion = "7.0+";
severity = "S_CRITICAL";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Always add a try/catch block around eval() call"

[example1]
project="FuelCMS"
file="fuel/modules/fuel/controllers/Blocks.php"
line="268"
code="@eval($_name_var_eval)";
explain="The @ will prevent any error, while the try/catch allows the processing of certain types of error, namely the Fatal ones. "


[example2]
project="ExpressionEngine"
file="system/ee/EllisLab/Addons/member/mod.member_memberlist.php"
line="637"
code="					elseif (isset($fields[$val['3']]))
					{
						if (array_key_exists('m_field_id_'.$fields[$val['3']], $row))
						{
							$v = $row['m_field_id_'.$fields[$val['3']]];

							$lcond = str_replace($val['3'], \"\$v\", $lcond);
							$cond = $lcond.' '.$rcond;
							$cond = str_replace(\"\|\", \"|\", $cond);

							eval(\"\$result = \".$cond.\";\");
";
explain="$cond is build from values extracted from the $fields array. Although it is probably reasonably safe, a try/catch here will collect any unexpected situation cleaningly."
