name = "Strpos()-like Comparison";
description = "The result of that function may be mistaken with an error.

strpos(), along with several PHP native functions, returns a string position, starting at 0, or false, in case of failure. 

<?php

// This is the best comparison
if (strpos($string, 'a') === false) { }

// This is OK, as 2 won't be mistaken with false
if (strpos($string, 'a') == 2) { }

// strpos is one of the 26 functions that may behave this way
if (preg_match($regex, $string)) { } 

// This works like above, catching the value for later reuse
if ($a = strpos($string, 'a')) { }

// This misses the case where 'a' is the first char of the string
if (strpos($string, 'a')) { }

// This misses the case where 'a' is the first char of the string, just like above
if (strpos($string, 'a') == 0) { }

?>

It is recommended to check the result of strpos() with === or !==, so as to avoid confusing 0 and false. 

This analyzer list all the strpos()-like functions that are directly compared with == or !=. preg_match(), when its first argument is a literal, is omitted : this function only returns NULL in case of regex error. 

The full list is the following : 


* array_search()
* collator_compare()
* collator_get_sort_key()
* current()
* fgetc()
* file_get_contents()
* file_put_contents()
* fread()
* iconv_strpos()
* iconv_strrpos()
* imagecolorallocate()
* imagecolorallocatealpha()
* mb_strlen()
* next()
* pcntl_getpriority()
* preg_match()
* prev()
* readdir()
* stripos()
* strpos()
* strripos()
* strrpos()
* strtok()
* curl_exec()

In PHP 8.0, str_contains() will do the expected job of strpos(), with less confusion. 

See also `strpos not working correctly <https://bugs.php.net/bug.php?id=52198>`_.

";
clearphp = "strict-comparisons";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";

modifications[] = "Use identity comparisons, for 0 values : === instead of ==, etc."
modifications[] = "Compare with other exact values than 0 : strpos() == 2"
modifications[] = "Use str_contains()"

[example1]
project="Piwigo"
file="admin/include/functions.php"
line="2585"
code="function clear_derivative_cache_rec($path, $pattern)
{
  $rmdir = true;
  $rm_index = false;

  if ($contents = opendir($path))
  {
    while (($node = readdir($contents)) !== false)
    {
      if ($node == '.' or $node == '..')
        continue;
      if (is_dir($path.'/'.$node))
      {
        $rmdir &= clear_derivative_cache_rec($path.'/'.$node, $pattern);
      }
      else
      {
        if (preg_match($pattern, $node))
";
explain="preg_match may return 0 if not found, and null if the $pattern is erroneous. While hardcoded regex may be checked at compile time, dynamically built regex may fail at execution time. This is particularly important here, since the function may be called with incoming data for maintenance : 'clear_derivative_cache($_GET['type']);' is in the /admin/maintenance.php."
[example2]
project="Thelia"
file="core/lib/Thelia/Controller/Admin/FileController.php"
line="198"
code="
        if (!empty($extBlackList)) {
            $regex = \"#^(.+)\.(\".implode(\"|\", $extBlackList).\")$#i\";

            if (preg_match($regex, $realFileName)) {
                $message = $this->getTranslator()
                    ->trans(
                        'Files with the following extension are not allowed: %extension, please do an archive of the file if you want to upload it',
                        [
                            '%extension' => $fileBeingUploaded->getClientOriginalExtension(),
                        ]
                    );
            }
        }

";
explain="preg_match is used here to identify files with a forbidden extension. The actual list of extension is provided to the method via the parameter $extBlackList, which is an array. In case of mis-configuration by the user of this array, preg_match may fail : for example, when regex special characters are provided. At that point, the whole filter becomes invalid, and can't distinguish good files (returning false) and other files (returning NULL). It is safe to use === false in this situation."
