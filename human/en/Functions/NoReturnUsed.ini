name = "No Return Used";
description = "The return value of the following functions are never used. The return argument may be dropped from the code, as it is dead code.

This analysis supports functions and static methods, when a definition may be found. It doesn't support method calls.

<?php

function foo($a = 1;) { return 1; }
foo();
foo();
foo();
foo();
foo();
foo();

// This function doesn't return anything. 
function foo2() { }

// The following function are used in an expression, thus the return is important
function foo3() {  return 1;}
function foo4() {  return 1;}
function foo5() {  return 1;}

foo3() + 1; 
$a = foo4();
foo(foo5());

?>
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_SLOW";
exakatSince = "0.11.3";

modifications[] = "Remove the return statement in the function"
modifications[] = "Actually use the value returned by the method, for test or combination with other values"

[example1]
project="SPIP"
file="ecrire/inc/utils.php"
line="1067"
code="function job_queue_remove($id_job) {
	include_spip('inc/queue');

	return queue_remove_job($id_job);
}

";
explain="job_queue_remove() is called as an administration order, and the result is not checked. It is considered as a fire-and-forget command. "
[example2]
project="LiveZilla"
file="livezilla/_lib/trdp/Zend/Loader.php"
line="114"
code="    public static function loadFile($filename, $dirs = null, $once = false)
    {
// A lot of code to check and include files

        return true;
    }
";
explain="The loadFile method tries to load a file, aka as include. If the inclusion fails, a PHP error is emitted (an exception would do the same), and there is not error management. Hence, the 'return true;', which is not tested later. It may be dropped."
