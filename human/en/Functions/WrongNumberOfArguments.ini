name = "Wrong Number Of Arguments";
description = "Those functioncalls are made with too many or too few arguments. 

When the number arguments is wrong for native functions, PHP emits a warning. 
When the number arguments is too small for custom functions, PHP raises an exception. 
When the number arguments is too high for custom functions, PHP ignores the arguments. Such arguments should be handled with the variadic operator, or with func_get_args() family of functions.

<?php

echo strtoupper('This function is', 'ignoring arguments');
//Warning: strtoupper() expects exactly 1 parameter, 2 given in Command line code on line 1

echo strtoupper();
//Warning: strtoupper() expects exactly 1 parameter, 0 given in Command line code on line 1

function foo($argument) {}
echo foo();
//Fatal error: Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in /Users/famille/Desktop/analyzeG3/test.php on line 10 and exactly 1 expected in /Users/famille/Desktop/analyzeG3/test.php:3

echo foo('This function is', 'ignoring arguments');

?>

It is recommended to check the signature of the methods, and fix the arguments. ";
clearphp = "no-missing-argument.md";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
precision = "P_HIGH";

rulesetBuild_title="Wrong Number Of Arguments"
rulesetBuild_code = "function foo($a) {}
foo();    // Missing arguments
foo(1,2); // Extraneous arguments"

phpErrors[] = "Uncaught ArgumentCountError: Too few arguments to function, 0 passed"
phpErrors[] = "Too few arguments to function foo(), 1 passed and exactly 2 expected"
phpErrors[] = "strlen() expects exactly 1 argument, 3 given";

phpExceptions[] = "ArgumentCountError"

modifications[] = "Add more arguments to fill the list of compulsory arguments"
modifications[] = "Remove arguments to fit the list of compulsory arguments"
modifications[] = "Use another method or class"

features[] = "function"
features[] = "method"
features[] = "static-method"
features[] = "constructor"

isStubs = 1
isPHP   = 1
isExt   = 1

[example1]
project="xataface"
file="actions/existing_related_record.php"
line="130"
code="		df_display($context, $template, true);

// in public-api.php :
function df_display($context, $template_name){
	import( 'Dataface/SkinTool.php');
	$st = Dataface_SkinTool::getInstance();
	
	return $st->display($context, $template_name);
}

";
explain="df_display() actually requires only 2 arguments, while three are provided. The last argument is completely ignored. df_display() is called in a total of 9 places : this now looks like an API change that left many calls untouched."
