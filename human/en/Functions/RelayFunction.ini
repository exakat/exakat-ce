name = "Relay Function";
description = "Relay function only delegate workload to another one. 

Relay functions and methods are delegating the actual work to another function or method. They do not have any impact on the results, besides exposing another name for the same feature.

<?php

function myStrtolower($string) {
    return \strtolower($string);
}

?>

Relay functions are typical of transition API, where an old API have to be preserved until it is fully migrated. Then, they may be removed, so as to reduce confusion, and simplify the API. 
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.8.4";
modifications[] = "Remove relay function, call directly the final function"
modifications[] = "Remove the target function, and move the code here"
modifications[] = "Add more logic to that function, like conditions or cache"
[example1]
project="TeamPass"
file="includes/libraries/Goodby/CSV/Import/Standard/Interpreter.php"
line="88"
code="    /**
     * delegate to observer
     *
     * @param $observer
     * @param $line
     */
    private function delegate($observer, $line)
    {
        call_user_func($observer, $line);
    }";
explain="This example puts actually a name on the events : this method 'delegate' and it does it in the smallest amount of possible work, being given all the arguments. "
[example2]
project="SPIP"
file="ecrire/inc/json.php"
line="73"
code="if (!function_exists('json_encode')) {
	function json_encode($v) {
		return var2js($v);
	}
}
";
explain="var2js() acts as an alternative for json_encode(). Yet, it used to be directly called by the framework's code and difficult to change. With the advent of json_encode, the native function has been used, and even, a compatibility tool was set up. Thus, the relay function. "
