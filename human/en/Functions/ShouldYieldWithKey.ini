name = "Should Yield With Key";
description = "iterator_to_array() will overwrite generated values with the same key. 

PHP generators are based on the ``yield`` keyword. They also delegate some generating to other methods, with ``yield from``. 

When delegating, ``yield from`` uses the keys that are generated with ``yield``, and otherwise, it uses auto-generated index, starting with 0. 

The trap is that each ``yield from`` reset the index generation and start again with 0. Coupled with iterator_to_array(), this means that the final generated array may lack some values, while a foreach() loop would yield all of them.

<?php 

function g1() : Generator {
	for ( $i = 0; $i < 4; $i++ ) { yield $i; }
}

function g2() : Generator {
	for ( $i = 5; $i < 10; $i++ ) { yield $i; }
}

function aggregator() : Generator {
	yield from g1();
	yield from g2();
}

print_r(iterator_to_array());

/*
Array
(
    [0] => 6
    [1] => 7
    [2] => 8
    [3] => 9
    [4] => 4  // Note that 4 and 5 still appears
    [5] => 5  // They are not overwritten by the second yield
)
*/


foreach ( aggregator() as $i ) {
	print $i.PHP_EOL;
}

/*
0  // Foreach has no overlap and yield it all.
1
2
3
4
5
6
7
8
9
*/

?>

Thanks to `Holger Woltersdorf <https://twitter.com/hollodotme>`_ for `pointing this <https://twitter.com/hollodotme/status/1057909890566537217>`_.

See also `Generator syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_ and 
         `Yielding values with keys <https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.associative>`_.
";
severity = "S_MAJOR";
timetofix = "T_SLOW";
clearphp = "";
exakatSince = "1.5.2";
modifications[] = "Use iterator_to_array() on each generator separately, and use array_merge() to merge all the arrays."
modifications[] = "Always yield with distinct keys"
modifications[] = "Avoid iterator_to_array() and use foreach()"
