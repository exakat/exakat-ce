name = "No Class As Typehint";
description = "Avoid using concrete classes as typehint : always use interfaces or abstract classes. This way, different classes, or versions of classes may be passed as argument. The typehint is not linked to an implementation, but to signatures.

A class is needed when the object is with properties : interfaces do not allow the specifications of properties.

<?php

class X {
    public $p = 1;

    function foo() {}
}

interface i {
    function foo();
}

// X is a class : any update in the code requires changing / subclassing X or the rest of the code.
function bar(X $x) {
    $x->foo();
}

// I is an interface : X may implements this interface without refactoring and pass
// later, newer versions of X may get another name, but still implement I, and still pass
function bar2(I $x) {
    $x->foo();
}

function bar3(I $x) {
    echo $x->p;
}

?>

";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_QUICK";
exakatSince = "0.11.4";
precision = "P_VERY_HIGH"

seeAlso[] = "`Type hinting for interfaces <http://phpenthusiast.com/object-oriented-php-tutorials/type-hinting-for-interfaces>`_"

modifications[] = "Create an interface with the important methods, and use that interface"
modifications[] = "Create an abstract class, when public properties are also needed"

phpErrors[] = ""

features[] = "typehint"
features[] = "class"

phpVersion = ""

keywords[] = "best practice"

[example1]
project="Vanilla"
file="library/Vanilla/Formatting/Formats/RichFormat.php"
line="51"
code="    public function __construct(Quill\\Parser $parser, Quill\\Renderer $renderer, Quill\\Filterer $filterer) {
        $this->parser = $parser;
        $this->renderer = $renderer;
        $this->filterer = $filterer;
    }
";
explain="All three typehints are based on classes. When Parser or Renderer are changed, for testing, versioning or moduling reasons, they must subclass the original class. "

[example2]
project="phpMyAdmin"
file="libraries/classes/CreateAddField.php"
line="29"
code="    public function __construct(DatabaseInterface $dbi)
    {
        $this->dbi = $dbi;
    }";
explain="Although the class is named 'DatabaseInterface', it is a class."
