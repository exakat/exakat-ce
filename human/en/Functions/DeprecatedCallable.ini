name = "Deprecated Callable";
description = "Callable functions that are supported by ``call_user_func($callable)``, but not with the ``$callable()`` syntax are deprecated. 

One important aspect is the loss of context : 'self::method' may be created anywhere in the code, while `self::class` can only be used inside a class, and, in that case, inside the target class. 

<?php

class x {
    // This will fail 
    function foo(callable $callable) {
        $callable();
    }
    
    function method() {
    
    }
}

$x = new x;
$x->foo('self::method');
?>

It is recommended to update the code with any PHP version, to prepare for the future removal of the feature.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "2.3.1";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
precision = "P_HIGH";
;Versions of PHP where this rule is applicable. 
;8.0+, 7.4-...
phpVersion = "8.2-"

; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpDeprecation = "8.2+";

; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features
features[] = "callable";

; Possible other rules that might be related to this one. 
; Use 'Folder/Name' format, one each
; related[] = ""

seeAlso[] = "`PHP RFC: Deprecate partially supported callables <https://wiki.php.net/rfc/deprecate_partially_supported_callables>`_"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Replace the keyword (such as self) by the full class name, with self::class."
modifications[] = "Use a variable and the $s(...) syntax."

; A PHP error that may be emitted by the target faulty code
phpErrors[] = "Use of \"self\" in callables is deprecated"
phpErrors[] = "Use of \"static\" in callables is deprecated"
phpErrors[] = "Use of \"parent\" in callables is deprecated"

; Human readable keywords for manual glossary
;keywords[] = ""

; manual index for Sphinx index building
;index[] = ""

; Optional parameters
; Duplicate and increment numbers to add more : parameter1, paramter2, etc. 
;[parameter1]
;name="parametersCount";
;default="8";
;type="integer";
;description="Minimal number of parameters to report.";

; Information for the ruleset Builder (https://www.exakat.io/en/ruleset_builder)
;rulesetBuild_title="Wrong Type Returned"
;rulesetBuild_code = "function foo() : string {
