name = "Unbinding Closures";
description = "Never drop ``$this``, once a closure was created in a non-static method. 

From the PHP wiki : ""Currently it is possible to unbind the $this variable from a closure that originally had one by using ``$closure->bindTo(null)``. Due to the removal of static calls to non-static methods in PHP 8, we now have a guarantee that $this always exists inside non-static methods. We would like to have a similar guarantee that $this always exists for non-static closures declared inside non-static methods. Otherwise, we will end up imposing an unnecessary performance penalty either on $this accesses in general, or $this accesses inside such closures.""

<?php

class x {
    private $a = 3;
    
    function foo() {
        return function () { echo $this->a; };
    }
}

$closure = (new x)->foo();

// $this was expected, and it is not anymore
$closure->bindTo(null);

$closure->bindTo(new x);

?>

Calling ``bindTo()`` with a valid object is still valid.

";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "1.9.0";
precision = "P_HIGH"

features[] = "closure"
features[] = "closure-binding"

; Alternative to make this code go away. 
; One by possible solution
modifications[] = "Create a static closure, which doesn't rely on $this at all"
modifications[] = "Remove the call to ``bindTo(null)``."

; A PHP error that may be emitted by the target faulty code
phpErrors[] = ""

seeAlso[] = "`Unbinding $this from non-static closures <https://wiki.php.net/rfc/deprecations_php_7_4#unbinding_this_from_non-static_closures>`_"

phpVersion = ""
