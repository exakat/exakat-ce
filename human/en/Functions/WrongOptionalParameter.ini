name = "Wrong Optional Parameter";
description = "Wrong placement of optional parameters.

PHP parameters are optional when they defined with a default value, like this : 



When a function have both compulsory and optional parameters, the compulsory ones should appear first, and the optional should appear last : 



PHP solves this problem at runtime, assign values in the same other, but will miss some of the default values and emits warnings. 

It is better to put all the optional parameters at the end of the method's signature.

Optional parameter wrongly placed are now a Notice in PHP 8.0. The only previous case that is allowed in PHP 8.0 and also in this analysis, is when the ``null`` value is used as default for typed arguments.";
code = "<?php
    function x($arg = 1) {
        // PHP code here
    }
?>";
clearphp = "";
severity = "S_MINOR";
; from : S_NONE, S_MINOR, S_MAJOR, S_CRITICAL
timetofix = "T_QUICK";
; from : T_INSTANT, T_QUICK, T_SLOW
exakatSince = "0.8.4";
precision = "P_VERY_HIGH";
; from : P_VERY_HIGH, P_HIGH, P_MEDIUM, P_LOW, P_UNKNOWN
modifications[] = "Give default values to all but first parameters. Null is a good default value, as PHP will use it if not told otherwise. ";
modifications[] = "Remove default values to all but last parameters. That is probably a weak solution.";
modifications[] = "Change the order of the values, so default-valued parameters are at the end. This will probably have impact on the rest of the code, as the API is changing.";
; Alternative to make this code go away. 
; One by possible solution

features[] = "parameter";
features[] = "optional-parameter";
; Name of a PHP feature. 
; This should match one of the available feature description in humane/en/Features

seeAlso[] = "`Function arguments <https://www.php.net/manual/en/functions.arguments.php>`_";
; List of links of interest

related[] = "";
; Possible other rules that might be related to this one. 
; Use "Folder/Name" format, one each
phpVersion = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.

phpDeprecation = "";
; Versions when this feature was deprecated. Beyond is removed, and before is fine.
; This might need a range : 7.3-7.4.
phpErrors[] = "Too few arguments to function foo(), 1 passed and exactly 2 expected";
phpErrors[] = "Deprecated: Required parameter $y follows optional parameter $x";
phpErrors[] = "Optional parameter $a declared before required parameter $b is implicitly treated as a required parameter";
; A PHP error that may be emitted by the target faulty code

keywords[] = "";
; Human readable keywords for manual glossary

changedBehavior = "8.1";
; Which version did that behavior changed
changedBehavior_details = "";


[example1]
project = "FuelCMS";
file = "fuel/modules/fuel/helpers/validator_helper.php";
line = "78";
code = "if (!function_exists('regex'))
{
	function regex($var = null, $regex)
	{
		return preg_match('#'.$regex.'#', $var);
	} 
}
";
explain = "The $regex parameter should really be first, as it is compulsory. Though, if this is a legacy function, it may be better to give regex a default value, such as empty string or null, and test it before using it.";

[example2]
project = "Vanilla";
file = "applications/dashboard/modules/class.navmodule.php";
line = "99";
code = "    /**
     * Add a dropdown to the items array if it satisfies the $isAllowed condition.
     *
     * @param bool|string|array $isAllowed Either a boolean to indicate whether to actually add the item
     * or a permission string or array of permission strings (full match) to check.
     * @param DropdownModule $dropdown The dropdown menu to add.
     * @param string $key The item's key (for sorting and CSS targeting).
     * @param string $cssClass The dropdown wrapper's CSS class.
     * @param array|int $sort Either a numeric sort position or and array in the style: array('before|after', 'key').
     * @return NavModule $this The calling object.
     */
    public function addDropdownIf($isAllowed = true, $dropdown, $key = '', $cssClass = '', $sort = []) {
        if (!$this->isAllowed($isAllowed)) {
            return $this;
        } else {
            return $this->addDropdown($dropdown, $key, $cssClass, $sort);
        }
    }

";
explain = "Note the second parameter, $dropdown, which has no default value. It is relayed to the addDropdown method, which as no default value too. Since both methods are documented, we can see that they should be an addDropdown : null is probably a good idea, coupled with an explicit check on the actual value.";
