name = "Closure Could Be A Callback";
description = "Closure or arrowfunction could be simplified to a callback. Callbacks are strings or arrays.

A simple closure that only returns arguments relayed to another function or method, could be reduced to a simpler expression. They 

Closure may be simplified with a string, for functioncall, with an array for methodcalls and static methodcalls. 

Performances : simplifying a closure tends to reduce the call time by 50%. 

<?php

// Simple and faster call to strtoupper
$filtered = array_map('strtoupper', $array);

// Here the closure doesn't add any feature over strtoupper
$filtered = array_map(function ($x) { return strtoupper($x);}, $array);

// Methodcall example : no fix
$filtered = array_map(function ($x) { return $x->strtoupper() ;}, $array);

// Methodcall example  : replace with array($y, 'strtoupper')
$filtered = array_map(function ($x) use ($y) { return $y->strtoupper($x) ;}, $array);

// Static methodcall example 
$filtered = array_map(function ($x) { return $x::strtoupper() ;}, $array);

// Static methodcall example   : replace with array('A', 'strtoupper')
$filtered = array_map(function ($x) { return A::strtoupper($x) ;}, $array);

?>

See also `Closure class <https://www.php.net/closure>`_ and 
         `Callbacks / Callables <https://www.php.net/manual/en/language.types.callable.php>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "1.4.3";

modifications[] = "Replace the closure by a string, with the name of the called function"
modifications[] = "Replace the closure by an array, with the name of the called method and the object as first element"

[example1]
project="Tine20"
file="tine20/Tinebase/Convert/Json.php"
line="318"
code="$value = array_filter($value, function ($val) { return is_scalar($val); });";
explain="is_scalar() is sufficient here."

[example2]
project="NextCloud"
file="apps/files_sharing/lib/ShareBackend/Folder.php"
line="114"
code="			$parents = array_map(function($parent) use ($qb) {
				return $qb->createNamedParameter($parent);
			}, $parents);
";
explain="$qb is the object for the methodcall, passed via use. The closure may have been replaced with array($qb, 'createNamedParameter')."
