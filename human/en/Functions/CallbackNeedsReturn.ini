name = "Callback Function Needs Return";
description = "When used with array_map() functions, the callback must return something. This return may be in the form of a ``return`` statement, a global variable or a parameter with a reference. All those solutions extract information from the callback. 

<?php

// This filters each element
$filtered = array_filter($array, function ($x) {return $x == 2; });

// This return void for every element
$filtered = array_filter($array, function ($x) {return ; });

// costly array_sum()
$sum = 0;
$filtered = array_filter($array, function ($x) use (&$sum) {$sum += $x; });

// costly array_sum()
global $sum = 0;
$filtered = array_filter($array, function () {global $sum; $sum += $x; });

// register_shutown_function() doesn't require any return
register_shutown_function("my_shutdown");

?>

The following functions are omitted, as they don't require the return : 

+ forward_static_call_array()
+ forward_static_call()
+ register_shutdown_function()
+ register_tick_function()
";
clearphp = "";
severity = "S_MAJOR";
timetofix = "T_INSTANT";
exakatSince = "1.2.6";
precision="P_HIGH";

seeAlso[] = "`array_map <https://www.php.net/array_map>`_"

rulesetBuild_title="Callback Function Needs Return"
rulesetBuild_code = "array_filter($array, function ($x) { $x == 2; });
// Missing return";

modifications[] = "Add an explicit return to the callback"
modifications[] = "Use `null` to unset elements in an array without destroying the index"

[example1]
project="Contao"
file="core-bundle/src/Resources/contao/modules/ModuleQuicklink.php"
line="91"
code="$arrPages = array_map(function () {}, array_flip($tmp));";
explain="The empty closure returns `null`. The array_flip() array has now all its values set to null, and reset, as intended. A better alternative is to use the array_fill_keys() function, which set a default value to every element of an array, once provided with the expected keys.";

[example2]
project="Phpdocumentor"
file="src/phpDocumentor/Plugin/ServiceProvider.php"
line="24"
code="        array_walk(
            $plugins,
            function ($plugin) use ($app) {
                /** @var Plugin $plugin */
                $provider = (strpos($plugin->getClassName(), '\\') === false)
                    ? sprintf('phpDocumentor\\Plugin\\%s\\ServiceProvider', $plugin->getClassName())
                    : $plugin->getClassName();
                if (!class_exists($provider)) {
                    throw new \RuntimeException('Loading Service Provider for ' . $provider . ' failed.');
                }

                try {
                    $app->register(new $provider($plugin));
                } catch (\InvalidArgumentException $e) {
                    throw new \RuntimeException($e->getMessage());
                }
            }
        );
";
explain="The array_walk() function is called on the plugin's list. Each element is registered with the application, but is not used directly : this is for later. The error mechanism is to throw an exception : this is the only expected feedback. As such, no return is expected. May be a 'foreach' loop would be more appropriate here, but this is syntactic sugar.";

