name = "Could Be Static Closure";
description = "Closure and arrow functions may be static, and prevent the import of ``$this``. 

By preventing the useless import of ``$this``, you avoid useless work. 

This also has the added value to prevent the usage of ``$this`` from the closure. This is a good security practice.

<?php

class Foo
{
    function __construct()
    {

        // Not possible to use $this
        $func = static function() {
            var_dump($this);
        };
        $func();

        // Normal import of $this
        $closure = function() {
            var_dump($this);
        };
    }
};
new Foo();

?>

This is a micro-optimisation. Apply it in case of intensive usage.

See also `Anonymous functions <https://www.php.net/manual/en/functions.anonymous.php>`_,
         `GeneratedHydrator <https://github.com/Ocramius/GeneratedHydrator/releases/tag/3.0.0>`_ and 
         `Static anonymous functions <https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous-functions.static>`_.
";
clearphp = "";
severity = "S_MINOR";
timetofix = "T_QUICK";
exakatSince = "1.3.2";

modifications[] = "Add the static keyword to the closure."
modifications[] = "Make actual usage of $this in the closure."

[example1]
project="Piwigo"
file="include/ws_core.inc.php"
line="620"
code="  /**
   * WS reflection method implementation: lists all available methods
   */
  static function ws_getMethodList($params, &$service)
  {
    $methods = array_filter($service->_methods,
      function($m) { return empty($m[\"options\"][\"hidden\"]) || !$m[\"options\"][\"hidden\"];} );
    return array('methods' => new PwgNamedArray( array_keys($methods),'method' ) );
  }
";
explain="The closure function($m) makes no usage of the current object : using static prevents $this to be forwarded with the closure."
